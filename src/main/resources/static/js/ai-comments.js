/**
 * AI Comments Integration
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è AI
let aiServiceAvailable = false;
let lastGeneratedComment = '';
let commentToImprove = '';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI
const AI_CONFIG = {
    maxPromptLength: 200,
    retryAttempts: 3,
    timeoutMs: 30000,
    debounceDelay: 300
};

// –ö—ç—à –¥–ª—è AI –¥–∞–Ω–Ω—ã—Ö
const aiCache = {
    templates: null,
    examples: null,
    lastCheck: null
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Ñ—É–Ω–∫—Ü–∏–π
 */
document.addEventListener('DOMContentLoaded', function() {
    initializeAIComments();
});

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
 */
async function initializeAIComments() {
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');

    try {
        await checkAIServiceStatus();
        setupAIEventListeners();
        addImproveButtonsToComments();
        setupPromptValidation();
        preloadAIData();

        console.log('‚úÖ AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AI —Å–µ—Ä–≤–∏—Å–∞
 */
async function checkAIServiceStatus() {
    try {
        const response = await fetch(`/api/posts/${postId}/comments/ai/status`);
        const data = await response.json();

        aiServiceAvailable = data.aiServiceAvailable;
        aiCache.lastCheck = Date.now();

        const statusBadge = document.getElementById('ai-status-badge');
        const aiSection = document.querySelector('.ai-assistant-section');

        if (!statusBadge || !aiSection) {
            console.warn('AI —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM');
            return;
        }

        if (aiServiceAvailable) {
            statusBadge.textContent = '–ì–æ—Ç–æ–≤';
            statusBadge.className = 'badge bg-success text-white ms-2';
            aiSection.style.display = 'block';
            aiSection.style.opacity = '1';
            aiSection.style.pointerEvents = 'auto';
        } else {
            statusBadge.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            statusBadge.className = 'badge bg-danger text-white ms-2';
            aiSection.style.opacity = '0.6';
            aiSection.style.pointerEvents = 'none';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —Å–µ—Ä–≤–∏—Å–∞:', error);
        const statusBadge = document.getElementById('ai-status-badge');
        if (statusBadge) {
            statusBadge.textContent = '–û—à–∏–±–∫–∞';
            statusBadge.className = 'badge bg-warning text-dark ms-2';
        }
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupAIEventListeners() {
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const commentType = document.getElementById('comment-type');
    if (commentType) {
        commentType.addEventListener('change', saveAIPreferences);
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    document.addEventListener('keydown', handleKeyboardShortcuts);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
 */
function handleKeyboardShortcuts(event) {
    // Ctrl/Cmd + Shift + A - —Ñ–æ–∫—É—Å –Ω–∞ AI –ø—Ä–æ–º–ø—Ç
    if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'A') {
        event.preventDefault();
        const promptInput = document.getElementById('ai-prompt');
        if (promptInput) {
            promptInput.focus();
            showSuccess('ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        }
    }

    // Ctrl/Cmd + Enter - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é (–µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–º–ø—Ç–µ)
    if ((event.ctrlKey || event.metaKey) && event.key === 'Enter' &&
        document.activeElement?.id === 'ai-prompt') {
        event.preventDefault();
        generateCommentPreview();
    }

    // Escape - —Å–∫—Ä—ã—Ç—å –ø—Ä–µ–≤—å—é
    if (event.key === 'Escape') {
        const previewSection = document.getElementById('ai-preview-section');
        if (previewSection && previewSection.style.display === 'block') {
            hidePreview();
        }
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
 */
function setupPromptValidation() {
    const promptInput = document.getElementById('ai-prompt');
    if (!promptInput) return;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
    const charCounter = document.createElement('div');
    charCounter.className = 'form-text text-end';
    charCounter.id = 'prompt-char-counter';
    promptInput.parentNode.appendChild(charCounter);

    // Debounced –≤–∞–ª–∏–¥–∞—Ü–∏—è
    let validationTimeout;
    promptInput.addEventListener('input', function() {
        clearTimeout(validationTimeout);
        validationTimeout = setTimeout(() => {
            validatePrompt(this.value);
        }, AI_CONFIG.debounceDelay);
    });
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
 */
function validatePrompt(value) {
    const length = value.length;
    const maxLength = AI_CONFIG.maxPromptLength;
    const charCounter = document.getElementById('prompt-char-counter');
    const promptInput = document.getElementById('ai-prompt');

    if (charCounter) {
        charCounter.textContent = `${length}/${maxLength}`;
        charCounter.className = `form-text text-end ${length > maxLength ? 'text-danger' : 'text-muted'}`;
    }

    if (promptInput) {
        if (length > maxLength) {
            promptInput.classList.add('is-invalid');
        } else {
            promptInput.classList.remove('is-invalid');
        }
    }
}

/**
 * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ AI –¥–∞–Ω–Ω—ã—Ö
 */
async function preloadAIData() {
    try {
        const [templatesResponse, examplesResponse] = await Promise.all([
            fetch(`/api/posts/${postId}/comments/ai/templates`),
            fetch(`/api/posts/${postId}/comments/ai/examples`)
        ]);

        if (templatesResponse.ok) {
            aiCache.templates = await templatesResponse.json();
        }

        if (examplesResponse.ok) {
            aiCache.examples = await examplesResponse.json();
        }

        console.log('üìÅ AI –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å AI –¥–∞–Ω–Ω—ã–µ:', error);
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
async function generateCommentPreview() {
    const prompt = document.getElementById('ai-prompt')?.value?.trim();
    const commentType = document.getElementById('comment-type')?.value;

    if (!prompt) {
        showError('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
        return;
    }

    if (!aiServiceAvailable) {
        showError('AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
    }

    showAILoading(true);
    hidePreview();

    try {
        const response = await fetchWithTimeout(`/api/posts/${postId}/comments/ai/preview`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                prompt: prompt,
                commentType: commentType
            })
        });

        const data = await response.json();

        if (data.success) {
            lastGeneratedComment = data.data.generatedComment;
            displayPreview(lastGeneratedComment);
            showSuccess(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ ${data.data.generationTimeMs} –º—Å`);
        } else {
            showError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ' + data.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + error.message);
    } finally {
        showAILoading(false);
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
function displayPreview(text) {
    const previewText = document.getElementById('ai-preview-text');
    const previewSection = document.getElementById('ai-preview-section');

    if (previewText && previewSection) {
        previewText.textContent = text;
        previewSection.style.display = 'block';

        // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        previewSection.style.opacity = '0';
        previewSection.style.transform = 'translateY(-10px)';

        requestAnimationFrame(() => {
            previewSection.style.transition = 'all 0.3s ease';
            previewSection.style.opacity = '1';
            previewSection.style.transform = 'translateY(0)';
        });
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
async function generateAndPostComment() {
    const prompt = document.getElementById('ai-prompt')?.value?.trim();
    const commentType = document.getElementById('comment-type')?.value;

    if (!prompt) {
        showError('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
        return;
    }

    if (!aiServiceAvailable) {
        showError('AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
    }

    if (!confirm('–°–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø–æ–º–æ—â—å—é AI?')) {
        return;
    }

    showAILoading(true);
    hidePreview();

    try {
        const response = await fetchWithTimeout(`/api/posts/${postId}/comments/ai/create`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                prompt: prompt,
                commentType: commentType
            })
        });

        const data = await response.json();

        if (data.success) {
            showSuccess('AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
            clearAIForm();
            refreshComments();
        } else {
            showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + data.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + error.message);
    } finally {
        showAILoading(false);
    }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ AI —Ñ–æ—Ä–º—ã
 */
function clearAIForm() {
    const promptInput = document.getElementById('ai-prompt');
    const commentTypeSelect = document.getElementById('comment-type');

    if (promptInput) promptInput.value = '';
    if (commentTypeSelect) commentTypeSelect.value = 'GENERAL';
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
 */
function refreshComments() {
    // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (typeof updateCommentsCount === 'function') {
        updateCommentsCount();
    }
    if (typeof loadLatestComments === 'function') {
        loadLatestComments();
    }
    if (typeof loadComments === 'function') {
        loadComments(0);
    }
}

/**
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
function useGeneratedComment() {
    if (lastGeneratedComment) {
        const commentTextarea = document.getElementById('comment-content');
        if (commentTextarea) {
            commentTextarea.value = lastGeneratedComment;
            hidePreview();
            showSuccess('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º—É. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.');

            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            commentTextarea.scrollIntoView({ behavior: 'smooth' });
            commentTextarea.focus();
        }
    }
}

/**
 * –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–≤—å—é
 */
function hidePreview() {
    const previewSection = document.getElementById('ai-preview-section');
    if (previewSection) {
        previewSection.style.display = 'none';
    }
}

/**
 * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ AI
 */
function showAILoading(show) {
    const loadingElement = document.getElementById('ai-loading');
    if (loadingElement) {
        loadingElement.style.display = show ? 'block' : 'none';
    }
}

/**
 * –ü–æ–∫–∞–∑ —à–∞–±–ª–æ–Ω–æ–≤
 */
async function showAITemplates() {
    const modal = new bootstrap.Modal(document.getElementById('templatesModal'));
    modal.show();

    try {
        let data = aiCache.templates;

        if (!data) {
            const response = await fetch(`/api/posts/${postId}/comments/ai/templates`);
            data = await response.json();
            aiCache.templates = data;
        }

        if (data.success) {
            renderTemplates(data);
        }
    } catch (error) {
        document.getElementById('templates-content').innerHTML =
            '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤</div>';
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
 */
function renderTemplates(data) {
    let templatesHtml = '<div class="row">';

    Object.entries(data.templates).forEach(([key, template]) => {
        templatesHtml += `
            <div class="col-md-6 mb-3">
                <div class="card template-card h-100">
                    <div class="card-body">
                        <h6 class="card-title text-capitalize">${key.replace('_', ' ')}</h6>
                        <p class="card-text small text-muted">${template.example}</p>
                        <button class="btn btn-sm btn-primary" onclick="useTemplate('${escapeHtml(template.prompt)}')">
                            <i class="fas fa-copy"></i> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;
    });

    templatesHtml += '</div>';
    templatesHtml += `<div class="alert alert-info mt-3"><i class="fas fa-info-circle"></i> ${data.usage}</div>`;

    document.getElementById('templates-content').innerHTML = templatesHtml;
}

/**
 * –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
 */
async function showAIExamples() {
    const modal = new bootstrap.Modal(document.getElementById('examplesModal'));
    modal.show();

    try {
        let data = aiCache.examples;

        if (!data) {
            const response = await fetch(`/api/posts/${postId}/comments/ai/examples`);
            data = await response.json();
            aiCache.examples = data;
        }

        if (data.success) {
            renderExamples(data);
        }
    } catch (error) {
        document.getElementById('examples-content').innerHTML =
            '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤</div>';
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
 */
function renderExamples(data) {
    let examplesHtml = '<div class="row">';

    Object.entries(data.examples).forEach(([key, example]) => {
        examplesHtml += `
            <div class="col-md-6 mb-3">
                <div class="card example-card h-100">
                    <div class="card-body">
                        <h6 class="card-title text-capitalize">${key}</h6>
                        <p class="card-text">"${escapeHtml(example.prompt)}"</p>
                        <small class="text-muted">${example.description}</small>
                        <div class="mt-2">
                            <button class="btn btn-sm btn-primary" onclick="useExample('${escapeHtml(example.prompt)}', '${key.toUpperCase()}')">
                                <i class="fas fa-copy"></i> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });

    examplesHtml += '</div>';

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã
    if (data.tips) {
        examplesHtml += '<div class="alert alert-info mt-3"><h6>üí° –°–æ–≤–µ—Ç—ã:</h6><ul class="mb-0">';
        Object.entries(data.tips).forEach(([key, tip]) => {
            examplesHtml += `<li><strong>${key}:</strong> ${tip}</li>`;
        });
        examplesHtml += '</ul></div>';
    }

    document.getElementById('examples-content').innerHTML = examplesHtml;
}

/**
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
 */
function useTemplate(prompt) {
    const promptInput = document.getElementById('ai-prompt');
    if (promptInput) {
        promptInput.value = prompt;
        bootstrap.Modal.getInstance(document.getElementById('templatesModal')).hide();
        showSuccess('–®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–ª–µ –ø—Ä–æ–º–ø—Ç–∞');
        promptInput.focus();
    }
}

/**
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞
 */
function useExample(prompt, type) {
    const promptInput = document.getElementById('ai-prompt');
    const typeSelect = document.getElementById('comment-type');

    if (promptInput) promptInput.value = prompt;
    if (typeSelect) typeSelect.value = type;

    bootstrap.Modal.getInstance(document.getElementById('examplesModal')).hide();
    showSuccess('–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º—É');

    if (promptInput) promptInput.focus();
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
 */
function addImproveButtonsToComments() {
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é renderCommentActions –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof window.renderCommentActions === 'function') {
        const originalRenderCommentActions = window.renderCommentActions;

        window.renderCommentActions = function(comment) {
            if (!currentUser) return '';

            const isOwner = currentUser.id === comment.author.id;
            let actions = '';

            if (isOwner) {
                actions += `
                    <button class="btn btn-sm btn-outline-primary me-2" onclick="editComment(${comment.id})">
                        <i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-sm btn-outline-danger me-2" onclick="deleteComment(${comment.id})">
                        <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                    </button>
                `;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if (aiServiceAvailable) {
                actions += `
                    <button class="btn btn-sm btn-outline-info" onclick="showImproveModal('${escapeHtml(comment.content)}')">
                        <i class="fas fa-magic"></i> –£–ª—É—á—à–∏—Ç—å —Å AI
                    </button>
                `;
            }

            return actions ? `<div class="comment-actions mt-2">${actions}</div>` : '';
        };
    }
}

/**
 * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è
 */
function showImproveModal(commentText) {
    commentToImprove = commentText;

    const improveTextarea = document.getElementById('improve-text');
    const improveResult = document.getElementById('improve-result');
    const useImprovedBtn = document.getElementById('use-improved-btn');

    if (improveTextarea) improveTextarea.value = commentText;
    if (improveResult) improveResult.style.display = 'none';
    if (useImprovedBtn) useImprovedBtn.style.display = 'none';

    const modal = new bootstrap.Modal(document.getElementById('improveModal'));
    modal.show();
}

/**
 * –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
async function improveComment() {
    const originalComment = document.getElementById('improve-text')?.value?.trim();
    const improvementType = document.getElementById('improve-type')?.value;

    if (!originalComment) {
        showError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è');
        return;
    }

    try {
        const response = await fetchWithTimeout(`/api/posts/${postId}/comments/ai/improve`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                originalComment: originalComment,
                improvementType: improvementType
            })
        });

        const data = await response.json();

        if (data.success) {
            const improvedText = document.getElementById('improved-text');
            const improveResult = document.getElementById('improve-result');
            const useImprovedBtn = document.getElementById('use-improved-btn');

            if (improvedText) improvedText.textContent = data.data.generatedComment;
            if (improveResult) improveResult.style.display = 'block';
            if (useImprovedBtn) useImprovedBtn.style.display = 'inline-block';

            showSuccess(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–ª—É—á—à–µ–Ω –∑–∞ ${data.data.generationTimeMs} –º—Å`);
        } else {
            showError('–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è: ' + data.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + error.message);
    }
}

/**
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
function useImprovedComment() {
    const improvedText = document.getElementById('improved-text')?.textContent;
    const commentTextarea = document.getElementById('comment-content');

    if (improvedText && commentTextarea) {
        commentTextarea.value = improvedText;

        bootstrap.Modal.getInstance(document.getElementById('improveModal')).hide();
        showSuccess('–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º—É');

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
        commentTextarea.scrollIntoView({ behavior: 'smooth' });
        commentTextarea.focus();
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π AI
 */
function saveAIPreferences() {
    try {
        const preferences = {
            commentType: document.getElementById('comment-type')?.value,
            timestamp: Date.now()
        };

        localStorage.setItem('aiCommentPreferences', JSON.stringify(preferences));
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è AI:', error);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π AI
 */
function loadAIPreferences() {
    try {
        const preferences = JSON.parse(localStorage.getItem('aiCommentPreferences') || '{}');

        if (preferences.commentType) {
            const typeSelect = document.getElementById('comment-type');
            if (typeSelect) {
                typeSelect.value = preferences.commentType;
            }
        }
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è AI:', error);
    }
}

/**
 * Fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 */
async function fetchWithTimeout(url, options = {}) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), AI_CONFIG.timeoutMs);

    try {
        const response = await fetch(url, {
            ...options,
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        return response;
    } catch (error) {
        clearTimeout(timeoutId);

        if (error.name === 'AbortError') {
            throw new Error('–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
        }

        throw error;
    }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
 */
function showError(message) {
    if (typeof window.showError === 'function') {
        window.showError(message);
    } else {
        console.error('AI Error:', message);
        alert('–û—à–∏–±–∫–∞: ' + message);
    }
}

/**
 * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
 */
function showSuccess(message) {
    if (typeof window.showSuccess === 'function') {
        window.showSuccess(message);
    } else {
        console.log('AI Success:', message);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', loadAIPreferences);

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.AIComments = {
    generatePreview: generateCommentPreview,
    generateAndPost: generateAndPostComment,
    showTemplates: showAITemplates,
    showExamples: showAIExamples,
    improve: improveComment,
    checkStatus: checkAIServiceStatus,
    config: AI_CONFIG,
    cache: aiCache
};

console.log('üöÄ AI Comments JavaScript –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');