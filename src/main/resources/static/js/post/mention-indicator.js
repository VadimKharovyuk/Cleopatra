// // ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô mention-indicator.js =====
//
// class MentionSystem {
//     constructor(textareaId, suggestionsId) {
//         this.textareaId = textareaId;
//         this.suggestionsId = suggestionsId;
//         this.textarea = null;
//         this.suggestions = null;
//         this.indicator = null;
//
//         this.isActive = false;
//         this.mentionStart = -1;
//         this.mentionQuery = '';
//         this.selectedIndex = 0;
//         this.users = [];
//         this.debounceTimer = null;
//
//         // ‚úÖ –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
//         this.initializeWhenReady();
//     }
//
//     // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
//     initializeWhenReady() {
//         const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
//         let attempts = 0;
//
//         const tryInitialize = () => {
//             attempts++;
//
//             // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
//             this.textarea = document.getElementById(this.textareaId);
//             this.suggestions = document.getElementById(this.suggestionsId);
//             this.indicator = document.getElementById('mentionIndicator');
//
//             if (this.textarea && this.suggestions) {
//                 console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π');
//                 this.init();
//                 return;
//             }
//
//             if (attempts < maxAttempts) {
//                 console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 100–º—Å`);
//                 setTimeout(tryInitialize, 100);
//             } else {
//                 console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:', {
//                     textarea: this.textareaId,
//                     suggestions: this.suggestionsId,
//                     textareaFound: !!this.textarea,
//                     suggestionsFound: !!this.suggestions
//                 });
//             }
//         };
//
//         // –ü—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
//         if (document.readyState === 'loading') {
//             document.addEventListener('DOMContentLoaded', tryInitialize);
//         } else {
//             tryInitialize();
//         }
//     }
//
//     init() {
//         if (!this.textarea || !this.suggestions) {
//             console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
//             return;
//         }
//
//         console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
//
//         // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
//         this.textarea.addEventListener('input', (e) => this.handleInput(e));
//         this.textarea.addEventListener('keydown', (e) => this.handleKeydown(e));
//         this.textarea.addEventListener('blur', () => {
//             setTimeout(() => this.hideSuggestions(), 150);
//         });
//
//         this.textarea.addEventListener('focus', () => {
//             this.showIndicator();
//             setTimeout(() => this.hideIndicator(), 3000);
//         });
//
//         document.addEventListener('click', (e) => {
//             if (!this.suggestions.contains(e.target) && e.target !== this.textarea) {
//                 this.hideSuggestions();
//             }
//         });
//
//         console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
//     }
//
//     handleInput(e) {
//         if (!this.textarea) return;
//
//         const text = this.textarea.value;
//         const cursorPos = this.textarea.selectionStart;
//
//         const beforeCursor = text.substring(0, cursorPos);
//         const lastAtIndex = beforeCursor.lastIndexOf('@');
//
//         if (lastAtIndex === -1) {
//             this.hideSuggestions();
//             return;
//         }
//
//         const charBeforeAt = lastAtIndex > 0 ? beforeCursor[lastAtIndex - 1] : ' ';
//         if (charBeforeAt !== ' ' && charBeforeAt !== '\n' && lastAtIndex !== 0) {
//             this.hideSuggestions();
//             return;
//         }
//
//         const afterAt = text.substring(lastAtIndex + 1, cursorPos);
//         const spaceCount = (afterAt.match(/ /g) || []).length;
//         if (spaceCount > 1 || afterAt.includes('\n')) {
//             this.hideSuggestions();
//             return;
//         }
//
//         this.mentionStart = lastAtIndex;
//         this.mentionQuery = afterAt;
//         this.isActive = true;
//
//         clearTimeout(this.debounceTimer);
//         this.debounceTimer = setTimeout(() => {
//             this.searchUsers(this.mentionQuery);
//         }, 300);
//     }
//
//     handleKeydown(e) {
//         if (!this.isActive || this.users.length === 0) return;
//
//         switch (e.key) {
//             case 'ArrowDown':
//                 e.preventDefault();
//                 this.selectedIndex = (this.selectedIndex + 1) % this.users.length;
//                 this.updateSelection();
//                 break;
//
//             case 'ArrowUp':
//                 e.preventDefault();
//                 this.selectedIndex = this.selectedIndex > 0 ? this.selectedIndex - 1 : this.users.length - 1;
//                 this.updateSelection();
//                 break;
//
//             case 'Enter':
//             case 'Tab':
//                 if (this.users.length > 0) {
//                     e.preventDefault();
//                     this.selectUser(this.users[this.selectedIndex]);
//                 }
//                 break;
//
//             case 'Escape':
//                 e.preventDefault();
//                 this.hideSuggestions();
//                 break;
//         }
//     }
//
//     async searchUsers(query) {
//         if (query.length < 1) {
//             this.showSuggestions([]);
//             return;
//         }
//
//         try {
//             this.showLoading();
//
//             const response = await fetch(`/api/mentions/search?query=${encodeURIComponent(query)}`);
//
//             if (!response.ok) {
//                 throw new Error(`HTTP ${response.status}: ${response.statusText}`);
//             }
//
//             const users = await response.json();
//             this.users = users;
//             this.selectedIndex = 0;
//             this.showSuggestions(users);
//
//         } catch (error) {
//             console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
//             this.showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
//         }
//     }
//
//     showSuggestions(users) {
//         if (!this.isActive || !this.suggestions) return;
//
//         if (users.length === 0) {
//             this.suggestions.innerHTML = '<div class="mention-no-results">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
//         } else {
//             this.suggestions.innerHTML = users.map((user, index) => {
//                 const fullName = `${user.firstName} ${user.lastName}`;
//                 const initials = user.initials || `${user.firstName.charAt(0)}${user.lastName.charAt(0)}`.toUpperCase();
//
//                 return `
//           <div class="mention-suggestion ${index === this.selectedIndex ? 'selected' : ''}"
//                data-index="${index}" onclick="window.mentionSystemInstance.selectUserByIndex(${index})">
//             <div class="mention-user-avatar">${initials}</div>
//             <div class="mention-user-info">
//               <div class="mention-user-name">${this.highlightQuery(fullName, this.mentionQuery)}</div>
//               <div class="mention-user-email">${user.email || ''}</div>
//             </div>
//           </div>
//         `;
//             }).join('');
//         }
//
//         this.suggestions.style.display = 'block';
//     }
//
//     showLoading() {
//         if (!this.suggestions) return;
//         this.suggestions.innerHTML = '<div class="mention-loading"><i class="fas fa-spinner fa-spin me-2"></i>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>';
//         this.suggestions.style.display = 'block';
//     }
//
//     showError(message) {
//         if (!this.suggestions) return;
//         this.suggestions.innerHTML = `<div class="mention-no-results"><i class="fas fa-exclamation-triangle me-2"></i>${message}</div>`;
//         this.suggestions.style.display = 'block';
//     }
//
//     hideSuggestions() {
//         if (this.suggestions) {
//             this.suggestions.style.display = 'none';
//         }
//         this.isActive = false;
//         this.users = [];
//         this.mentionStart = -1;
//         this.mentionQuery = '';
//     }
//
//     updateSelection() {
//         if (!this.suggestions) return;
//         const items = this.suggestions.querySelectorAll('.mention-suggestion');
//         items.forEach((item, index) => {
//             item.classList.toggle('selected', index === this.selectedIndex);
//         });
//     }
//
//     selectUserByIndex(index) {
//         this.selectedIndex = index;
//         this.selectUser(this.users[index]);
//     }
//
//     selectUser(user) {
//         if (!this.textarea) return;
//
//         const fullName = `${user.firstName} ${user.lastName}`;
//         const textBefore = this.textarea.value.substring(0, this.mentionStart);
//         const textAfter = this.textarea.value.substring(this.textarea.selectionStart);
//
//         let mention;
//         if (fullName.includes(' ')) {
//             mention = `@"${fullName}"`;
//         } else {
//             mention = `@${fullName}`;
//         }
//
//         const newText = textBefore + mention + ' ' + textAfter;
//         const newCursorPos = textBefore.length + mention.length + 1;
//
//         this.textarea.value = newText;
//         this.textarea.setSelectionRange(newCursorPos, newCursorPos);
//
//         // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ input
//         this.textarea.dispatchEvent(new Event('input', { bubbles: true }));
//
//         this.hideSuggestions();
//         this.textarea.focus();
//
//         console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${fullName}`);
//     }
//
//     highlightQuery(text, query) {
//         if (!query) return text;
//
//         const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
//         return text.replace(regex, '<strong>$1</strong>');
//     }
//
//     showIndicator() {
//         if (this.indicator) {
//             this.indicator.classList.add('show');
//         }
//     }
//
//     hideIndicator() {
//         if (this.indicator) {
//             this.indicator.classList.remove('show');
//         }
//     }
//
//     // ‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
//     insertMentionInText(textarea, userName) {
//         const cursorPos = textarea.selectionStart;
//         const textBefore = textarea.value.substring(0, cursorPos);
//         const textAfter = textarea.value.substring(cursorPos);
//
//         let mention = userName.includes(' ') ? `@"${userName}"` : `@${userName}`;
//
//         const newText = textBefore + mention + ' ' + textAfter;
//         const newCursorPos = textBefore.length + mention.length + 1;
//
//         textarea.value = newText;
//         textarea.setSelectionRange(newCursorPos, newCursorPos);
//         textarea.dispatchEvent(new Event('input', { bubbles: true }));
//     }
// }
//
// // ===== –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
//
// let mentionSystemInstance = null;
//
// // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
// function initializeMentionSystem() {
//     // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ textarea —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ ID
//     const possibleIds = ['postContent', 'content', 'createPostTextarea'];
//     let textareaId = null;
//
//     for (const id of possibleIds) {
//         if (document.getElementById(id)) {
//             textareaId = id;
//             break;
//         }
//     }
//
//     if (!textareaId) {
//         console.warn('‚ö†Ô∏è Textarea –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
//         return null;
//     }
//
//     // –°–æ–∑–¥–∞–µ–º suggestions div –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
//     let suggestionsId = 'mentionSuggestions';
//     if (!document.getElementById(suggestionsId)) {
//         const suggestionsDiv = document.createElement('div');
//         suggestionsDiv.id = suggestionsId;
//         suggestionsDiv.className = 'mention-suggestions';
//         suggestionsDiv.style.display = 'none';
//
//         const textarea = document.getElementById(textareaId);
//         const container = textarea.closest('.mention-container') || textarea.parentElement;
//         container.appendChild(suggestionsDiv);
//     }
//
//     // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
//     mentionSystemInstance = new MentionSystem(textareaId, suggestionsId);
//
//     // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
//     window.mentionSystemInstance = mentionSystemInstance;
//
//     return mentionSystemInstance;
// }
//
// // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// function autoInitialize() {
//     if (document.readyState === 'loading') {
//         document.addEventListener('DOMContentLoaded', () => {
//             setTimeout(initializeMentionSystem, 100);
//         });
//     } else {
//         setTimeout(initializeMentionSystem, 100);
//     }
// }
//
// // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
// autoInitialize();
//
// // ===== –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –î–†–£–ì–ò–• –°–ö–†–ò–ü–¢–ê–• =====
//
// window.MentionSystem = MentionSystem;
// window.initializeMentionSystem = initializeMentionSystem;
//
// // ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ =====
//
//
// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
// window.createMentionSystem = function(textareaId, suggestionsId) {
//     return new MentionSystem(textareaId, suggestionsId);
// };
//
// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
// window.getMentionSystem = function() {
//     return mentionSystemInstance;
// };
//
// console.log('üìù mention-indicator.js –∑–∞–≥—Ä—É–∂–µ–Ω');

// ===== –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø mention-indicator.js =====

class MentionSystem {
    constructor(textareaElement, suggestionsElement) {
        this.textarea = textareaElement;
        this.suggestions = suggestionsElement;
        this.indicator = document.getElementById('mentionIndicator');

        this.isActive = false;
        this.mentionStart = -1;
        this.mentionQuery = '';
        this.selectedIndex = 0;
        this.users = [];
        this.debounceTimer = null;

        if (this.textarea && this.suggestions) {
            this.init();
        } else {
            console.error('‚ùå MentionSystem: –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã textarea –∏ suggestions —ç–ª–µ–º–µ–Ω—Ç—ã');
        }
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π...');

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.textarea.addEventListener('input', (e) => this.handleInput(e));
        this.textarea.addEventListener('keydown', (e) => this.handleKeydown(e));
        this.textarea.addEventListener('blur', () => {
            setTimeout(() => this.hideSuggestions(), 150);
        });

        this.textarea.addEventListener('focus', () => {
            this.showIndicator();
            setTimeout(() => this.hideIndicator(), 3000);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        document.addEventListener('click', (e) => {
            if (!this.suggestions.contains(e.target) && e.target !== this.textarea) {
                this.hideSuggestions();
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
        this.textarea.addEventListener('input', () => {
            this.updateMentionCounter();
        });

        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    handleInput(e) {
        if (!this.textarea) return;

        const text = this.textarea.value;
        const cursorPos = this.textarea.selectionStart;

        const beforeCursor = text.substring(0, cursorPos);
        const lastAtIndex = beforeCursor.lastIndexOf('@');

        if (lastAtIndex === -1) {
            this.hideSuggestions();
            return;
        }

        const charBeforeAt = lastAtIndex > 0 ? beforeCursor[lastAtIndex - 1] : ' ';
        if (charBeforeAt !== ' ' && charBeforeAt !== '\n' && lastAtIndex !== 0) {
            this.hideSuggestions();
            return;
        }

        const afterAt = text.substring(lastAtIndex + 1, cursorPos);
        const spaceCount = (afterAt.match(/ /g) || []).length;
        if (spaceCount > 1 || afterAt.includes('\n')) {
            this.hideSuggestions();
            return;
        }

        this.mentionStart = lastAtIndex;
        this.mentionQuery = afterAt;
        this.isActive = true;

        clearTimeout(this.debounceTimer);
        this.debounceTimer = setTimeout(() => {
            this.searchUsers(this.mentionQuery);
        }, 300);
    }

    handleKeydown(e) {
        if (!this.isActive || this.users.length === 0) return;

        switch (e.key) {
            case 'ArrowDown':
                e.preventDefault();
                this.selectedIndex = (this.selectedIndex + 1) % this.users.length;
                this.updateSelection();
                break;

            case 'ArrowUp':
                e.preventDefault();
                this.selectedIndex = this.selectedIndex > 0 ? this.selectedIndex - 1 : this.users.length - 1;
                this.updateSelection();
                break;

            case 'Enter':
            case 'Tab':
                if (this.users.length > 0) {
                    e.preventDefault();
                    this.selectUser(this.users[this.selectedIndex]);
                }
                break;

            case 'Escape':
                e.preventDefault();
                this.hideSuggestions();
                break;
        }
    }

    async searchUsers(query) {
        if (query.length < 1) {
            this.showSuggestions([]);
            return;
        }

        try {
            this.showLoading();

            const response = await fetch(`/api/mentions/search?query=${encodeURIComponent(query)}`);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const users = await response.json();
            this.users = users;
            this.selectedIndex = 0;
            this.showSuggestions(users);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
    }

    showSuggestions(users) {
        if (!this.isActive || !this.suggestions) return;

        if (users.length === 0) {
            this.suggestions.innerHTML = '<div class="mention-no-results">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        } else {
            this.suggestions.innerHTML = users.map((user, index) => {
                const fullName = `${user.firstName} ${user.lastName}`;
                const initials = user.initials || `${user.firstName.charAt(0)}${user.lastName.charAt(0)}`.toUpperCase();

                return `
          <div class="mention-suggestion ${index === this.selectedIndex ? 'selected' : ''}" 
               data-index="${index}" onclick="window.mentionSystemInstance.selectUserByIndex(${index})">
            <div class="mention-user-avatar">${initials}</div>
            <div class="mention-user-info">
              <div class="mention-user-name">${this.highlightQuery(fullName, this.mentionQuery)}</div>
              <div class="mention-user-email">${user.email || ''}</div>
            </div>
          </div>
        `;
            }).join('');
        }

        this.suggestions.style.display = 'block';

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º suggestions –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫—É—Ä—Å–æ—Ä–∞
        this.positionSuggestions();
    }

    positionSuggestions() {
        if (!this.textarea || !this.suggestions) return;

        const textareaRect = this.textarea.getBoundingClientRect();
        const containerRect = this.textarea.closest('.mention-container').getBoundingClientRect();

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥ textarea
        this.suggestions.style.top = (textareaRect.bottom - containerRect.top + 5) + 'px';
        this.suggestions.style.left = '0px';
        this.suggestions.style.width = textareaRect.width + 'px';
    }

    showLoading() {
        if (!this.suggestions) return;
        this.suggestions.innerHTML = '<div class="mention-loading"><i class="fas fa-spinner fa-spin me-2"></i>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>';
        this.suggestions.style.display = 'block';
        this.positionSuggestions();
    }

    showError(message) {
        if (!this.suggestions) return;
        this.suggestions.innerHTML = `<div class="mention-no-results"><i class="fas fa-exclamation-triangle me-2"></i>${message}</div>`;
        this.suggestions.style.display = 'block';
        this.positionSuggestions();
    }

    hideSuggestions() {
        if (this.suggestions) {
            this.suggestions.style.display = 'none';
        }
        this.isActive = false;
        this.users = [];
        this.mentionStart = -1;
        this.mentionQuery = '';
    }

    updateSelection() {
        if (!this.suggestions) return;
        const items = this.suggestions.querySelectorAll('.mention-suggestion');
        items.forEach((item, index) => {
            item.classList.toggle('selected', index === this.selectedIndex);
        });
    }

    selectUserByIndex(index) {
        this.selectedIndex = index;
        this.selectUser(this.users[index]);
    }

    selectUser(user) {
        if (!this.textarea) return;

        const fullName = `${user.firstName} ${user.lastName}`;
        const textBefore = this.textarea.value.substring(0, this.mentionStart);
        const textAfter = this.textarea.value.substring(this.textarea.selectionStart);

        let mention;
        if (fullName.includes(' ')) {
            mention = `@"${fullName}"`;
        } else {
            mention = `@${fullName}`;
        }

        const newText = textBefore + mention + ' ' + textAfter;
        const newCursorPos = textBefore.length + mention.length + 1;

        this.textarea.value = newText;
        this.textarea.setSelectionRange(newCursorPos, newCursorPos);

        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        this.textarea.dispatchEvent(new Event('input', { bubbles: true }));

        this.hideSuggestions();
        this.textarea.focus();

        console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${fullName}`);
    }

    highlightQuery(text, query) {
        if (!query) return text;

        const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        return text.replace(regex, '<strong>$1</strong>');
    }

    showIndicator() {
        if (this.indicator) {
            this.indicator.classList.add('show');
        }
    }

    hideIndicator() {
        if (this.indicator) {
            this.indicator.classList.remove('show');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    updateMentionCounter() {
        const text = this.textarea.value;
        const mentions = text.match(/@"[^"]+"|@\w+/g) || [];
        const mentionCount = mentions.length;

        const counterElement = document.getElementById('mentionCount');
        const counterNumber = document.getElementById('mentionCountNumber');

        if (counterElement && counterNumber) {
            if (mentionCount > 0) {
                counterElement.style.display = 'inline';
                counterNumber.textContent = mentionCount;
            } else {
                counterElement.style.display = 'none';
            }
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    insertMentionInText(textarea, userName) {
        const cursorPos = textarea.selectionStart;
        const textBefore = textarea.value.substring(0, cursorPos);
        const textAfter = textarea.value.substring(cursorPos);

        let mention = userName.includes(' ') ? `@"${userName}"` : `@${userName}`;

        const newText = textBefore + mention + ' ' + textAfter;
        const newCursorPos = textBefore.length + mention.length + 1;

        textarea.value = newText;
        textarea.setSelectionRange(newCursorPos, newCursorPos);
        textarea.dispatchEvent(new Event('input', { bubbles: true }));
    }
}

// ===== –°–ò–°–¢–ï–ú–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò =====

let mentionSystemInstance = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
function findElements() {
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ...');

    // 1. –ò—â–µ–º —Ç–æ—á–Ω–æ –≤–∞—à textarea
    const textarea = document.getElementById('postContent');
    if (!textarea) {
        console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç #postContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return { textarea: null, suggestions: null };
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω textarea #postContent');

    // 2. –ò—â–µ–º —Ç–æ—á–Ω–æ –≤–∞—à –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä suggestions
    const suggestions = document.getElementById('mentionSuggestions');
    if (!suggestions) {
        console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç #mentionSuggestions –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return { textarea, suggestions: null };
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω suggestions #mentionSuggestions');

    return { textarea, suggestions };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initializeMentionSystem() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π...');

    const { textarea, suggestions } = findElements();

    if (!textarea || !suggestions) {
        console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π');
        return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–∏–º—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    const textareaStyle = window.getComputedStyle(textarea);
    if (textareaStyle.display === 'none' || textareaStyle.visibility === 'hidden') {
        console.warn('‚ö†Ô∏è Textarea —Å–∫—Ä—ã—Ç, –æ–∂–∏–¥–∞–µ–º...');
        return null;
    }

    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if (mentionSystemInstance) {
        console.log('üîÑ –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π');
        mentionSystemInstance = null;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    mentionSystemInstance = new MentionSystem(textarea, suggestions);
    window.mentionSystemInstance = mentionSystemInstance;

    console.log('üéâ –°–∏—Å—Ç–µ–º–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    return mentionSystemInstance;
}

// –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function waitForElements() {
    let attempts = 0;
    const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥

    const tryInit = () => {
        attempts++;
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${attempts}/${maxAttempts}`);

        const result = initializeMentionSystem();

        if (result) {
            console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempts}`);
            return;
        }

        if (attempts < maxAttempts) {
            setTimeout(tryInit, 100);
        } else {
            console.warn('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å initializeMentionSystem() –≤—Ä—É—á–Ω—É—é');
        }
    };

    tryInit();
}

// –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM –¥–ª—è SPA
function setupDOMObserver() {
    const observer = new MutationObserver((mutations) => {
        const hasTargetElements = mutations.some(mutation =>
            Array.from(mutation.addedNodes).some(node =>
                    node.nodeType === 1 && (
                        node.id === 'postContent' ||
                        node.id === 'mentionSuggestions' ||
                        (node.querySelector && node.querySelector('#postContent, #mentionSuggestions'))
                    )
            )
        );

        if (hasTargetElements && !mentionSystemInstance) {
            console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
            setTimeout(waitForElements, 100);
        }
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    console.log('üëÅÔ∏è DOM Observer –∞–∫—Ç–∏–≤–µ–Ω');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function autoInitialize() {
    console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è mention-indicator.js');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
    setupDOMObserver();

    // –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(waitForElements, 100);
        });
    } else {
        setTimeout(waitForElements, 100);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
autoInitialize();

// ===== –ü–£–ë–õ–ò–ß–ù–´–ô API =====

window.MentionSystem = MentionSystem;
window.initializeMentionSystem = initializeMentionSystem;

window.getMentionSystem = function() {
    return mentionSystemInstance;
};

window.isMentionSystemReady = function() {
    return mentionSystemInstance !== null;
};

window.reinitializeMentionSystem = function() {
    console.log('üîÑ –†—É—á–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
    return initializeMentionSystem();
};

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –í–ê–®–ò–ú–ò –ö–ù–û–ü–ö–ê–ú–ò =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
window.showMentionHint = function() {
    const textarea = document.getElementById('postContent');
    if (!textarea) return;

    // –í—Å—Ç–∞–≤–ª—è–µ–º @ —Å–∏–º–≤–æ–ª –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    const cursorPos = textarea.selectionStart;
    const textBefore = textarea.value.substring(0, cursorPos);
    const textAfter = textarea.value.substring(cursorPos);

    textarea.value = textBefore + '@' + textAfter;
    textarea.setSelectionRange(cursorPos + 1, cursorPos + 1);

    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ textarea –∏ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ
    textarea.focus();
    textarea.dispatchEvent(new Event('input', { bubbles: true }));

    console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
window.insertMention = function(userName) {
    if (mentionSystemInstance && mentionSystemInstance.textarea) {
        mentionSystemInstance.insertMentionInText(mentionSystemInstance.textarea, userName);
        return true;
    }
    return false;
};

// –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
if (!document.getElementById('mention-system-styles')) {
    const style = document.createElement('style');
    style.id = 'mention-system-styles';
    style.textContent = `
        /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–ø–æ–º–∏–Ω–∞–Ω–∏–π */
        .mention-container {
            position: relative;
        }
        
        /* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–ø–æ–º–∏–Ω–∞–Ω–∏–π */
        .mention-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 123, 255, 0.1);
            color: #007bff;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            opacity: 0;
            transition: opacity 0.3s;
            pointer-events: none;
            z-index: 10;
        }
        
        .mention-indicator.show {
            opacity: 1;
        }
        
        /* Suggestions dropdown */
        .mention-suggestions {
            position: absolute;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            display: none;
        }
        
        .mention-suggestion {
            display: flex;
            align-items: center;
            padding: 10px 12px;
            cursor: pointer;
            border-bottom: 1px solid #f0f0f0;
            transition: background-color 0.2s;
        }
        
        .mention-suggestion:last-child {
            border-bottom: none;
        }
        
        .mention-suggestion:hover,
        .mention-suggestion.selected {
            background-color: #f8f9fa;
        }
        
        .mention-user-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
            margin-right: 12px;
            flex-shrink: 0;
        }
        
        .mention-user-info {
            flex: 1;
            min-width: 0;
        }
        
        .mention-user-name {
            font-weight: 500;
            color: #333;
            margin-bottom: 2px;
        }
        
        .mention-user-email {
            font-size: 12px;
            color: #666;
        }
        
        .mention-no-results,
        .mention-loading {
            padding: 16px;
            text-align: center;
            color: #666;
            font-size: 14px;
        }
        
        .mention-loading {
            color: #007bff;
        }
        
        /* –ö–Ω–æ–ø–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π */
        .mention-tool-btn {
            color: #007bff !important;
        }
        
        .mention-tool-btn:hover {
            background-color: rgba(0, 123, 255, 0.1) !important;
        }
        
        /* –°—á–µ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π */
        .mention-count {
            margin-left: 10px;
            color: #007bff;
            font-size: 12px;
        }
        
        .mention-count i {
            margin-right: 4px;
        }
    `;
    document.head.appendChild(style);
}

console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è mention-indicator.js –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');