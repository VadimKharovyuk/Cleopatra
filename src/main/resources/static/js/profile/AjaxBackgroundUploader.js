// ========================================
// AJAX BACKGROUND UPLOADER MODULE
// –ì–æ—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ REST API
// ========================================

class AjaxBackgroundUploader {
    constructor(options = {}) {
        this.config = {
            // API endpoints
            apiBaseUrl: '/api/profile',

            // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
            formId: 'backgroundUploadForm',
            fileInputId: 'backgroundFile',
            uploadBtnId: 'backgroundUploadBtn',
            previewId: 'backgroundImagePreview',
            placeholderId: 'backgroundPlaceholder',

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            maxFileSize: 10, // MB
            allowedTypes: ['image/jpeg', 'image/jpg', 'image/png'],
            minFileSize: 50, // KB - –º–∏–Ω–∏–º—É–º –¥–ª—è —Ñ–æ–Ω–∞

            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            ...options
        };

        this.isUploading = false;
        console.log('üåÑ AjaxBackgroundUploader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', this.config);
    }

    // ========================================
    // –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –ó–ê–ì–†–£–ó–ö–ò
    // ========================================

    async uploadBackground() {
        if (this.isUploading) {
            console.warn('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
            return;
        }

        const fileInput = document.getElementById(this.config.fileInputId);
        const uploadBtn = document.getElementById(this.config.uploadBtnId);

        if (!fileInput || !fileInput.files || !fileInput.files[0]) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ñ–æ–Ω–∞');
            return;
        }

        const file = fileInput.files[0];
        console.log('üñºÔ∏è –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª —Ñ–æ–Ω–∞:', {
            name: file.name,
            size: `${(file.size / 1024 / 1024).toFixed(2)} MB`,
            type: file.type,
            dimensions: '–±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ'
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if (!this.validateFile(file)) {
            fileInput.value = '';
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        await this.showPreview(file);

        // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        this.setLoadingState(uploadBtn, true);
        this.isUploading = true;

        try {
            const userId = this.getCurrentUserId();
            if (!userId) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

            const result = await this.uploadToServer(userId, file);

            if (result.success) {
                this.handleUploadSuccess(result);
            } else {
                this.handleUploadError(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–∞:', error);
            this.handleUploadError(error.message || '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        } finally {
            this.setLoadingState(uploadBtn, false);
            this.isUploading = false;
        }
    }

    // ========================================
    // –í–ê–õ–ò–î–ê–¶–ò–Ø –§–ê–ô–õ–ê
    // ========================================

    validateFile(file) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º)
        if (file.size > this.config.maxFileSize * 1024 * 1024) {
            const fileSizeMB = (file.size / 1024 / 1024).toFixed(2);
            this.showError(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${fileSizeMB} MB. –ú–∞–∫—Å–∏–º—É–º: ${this.config.maxFileSize} MB`);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∏–Ω–∏–º—É–º) - —Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º
        if (file.size < this.config.minFileSize * 1024) {
            const fileSizeKB = (file.size / 1024).toFixed(0);
            this.showError(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: ${fileSizeKB} KB. –ú–∏–Ω–∏–º—É–º: ${this.config.minFileSize} KB`);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        if (file.size === 0) {
            this.showError('–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
        if (!this.config.allowedTypes.includes(file.type.toLowerCase())) {
            this.showError(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${file.type}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG`);
            return false;
        }

        console.log('‚úÖ –§–∞–π–ª —Ñ–æ–Ω–∞ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
        return true;
    }

    // ========================================
    // –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ê–ó–ú–ï–†–û–í –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
    // ========================================

    async validateImageDimensions(file) {
        return new Promise((resolve) => {
            const img = new Image();
            const url = URL.createObjectURL(file);

            img.onload = () => {
                URL.revokeObjectURL(url);

                const width = img.naturalWidth;
                const height = img.naturalHeight;
                const ratio = width / height;

                console.log('üìè –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', { width, height, ratio: ratio.toFixed(2) });

                // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ñ–æ–Ω–∞
                const minWidth = 800;
                const minHeight = 400;
                const idealRatio = 3; // 3:1 –∫–∞–∫ —É Twitter/X
                const maxRatio = 4; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                const minRatio = 2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ

                // –ü—Ä–æ–≤–µ—Ä–∫–∏
                if (width < minWidth || height < minHeight) {
                    this.showWarning(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${minWidth}x${minHeight}px. –£ –≤–∞—Å: ${width}x${height}px`);
                }

                if (ratio < minRatio || ratio > maxRatio) {
                    this.showWarning(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: 2:1 - 4:1. –£ –≤–∞—Å: ${ratio.toFixed(2)}:1`);
                }

                resolve({
                    width,
                    height,
                    ratio,
                    isOptimal: width >= minWidth && height >= minHeight && ratio >= minRatio && ratio <= maxRatio
                });
            };

            img.onerror = () => {
                URL.revokeObjectURL(url);
                resolve(null);
            };

            img.src = url;
        });
    }

    // ========================================
    // –ó–ê–ì–†–£–ó–ö–ê –ù–ê –°–ï–†–í–ï–†
    // ========================================

    async uploadToServer(userId, file) {
        const formData = new FormData();
        formData.append('background', file);

        const url = `${this.config.apiBaseUrl}/${userId}/background`;
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ–Ω–∞ –Ω–∞:', url);

        const response = await fetch(url, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ñ–æ–Ω):', result);
        return result;
    }

    // ========================================
    // –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    // ========================================

    handleUploadSuccess(result) {
        console.log('‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        if (result.user && result.user.imgBackground) {
            this.updateBackgroundOnPage(result.user.imgBackground);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showSuccess(result.message || '–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');

        // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.config.onSuccess) {
            this.config.onSuccess(result);
        }
    }

    handleUploadError(message) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞:', message);
        this.showError(message);

        // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.config.onError) {
            this.config.onError(message);
        }
    }

    // ========================================
    // –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
    // ========================================

    updateBackgroundOnPage(newImageUrl) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –≤ —Ñ–æ—Ä–º–µ
        const preview = document.getElementById(this.config.previewId);
        const placeholder = document.getElementById(this.config.placeholderId);

        if (preview) {
            preview.src = newImageUrl + '?t=' + Date.now(); // Cache busting
            preview.style.display = 'block';
        }

        if (placeholder) {
            placeholder.style.display = 'none';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        const backgroundSelectors = [
            '.cover-section .cover-image',
            '.profile-cover img',
            '.header-background img',
            '.background-image'
        ];

        backgroundSelectors.forEach(selector => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(el => {
                if (el.tagName === 'IMG') {
                    el.src = newImageUrl + '?t=' + Date.now();
                } else {
                    // –î–ª—è div —Å background-image
                    el.style.backgroundImage = `url("${newImageUrl}?t=${Date.now()}")`;
                }
            });
        });

        console.log('üîÑ –§–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', newImageUrl);
    }

    async showPreview(file) {
        const preview = document.getElementById(this.config.previewId);
        const placeholder = document.getElementById(this.config.placeholderId);

        if (!preview) return;

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const dimensions = await this.validateImageDimensions(file);

        const reader = new FileReader();
        reader.onload = (e) => {
            preview.src = e.target.result;
            preview.style.display = 'block';
            if (placeholder) {
                placeholder.style.display = 'none';
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
            if (dimensions) {
                this.showImageInfo(dimensions);
            }
        };
        reader.readAsDataURL(file);
    }

    showImageInfo(dimensions) {
        const { width, height, ratio, isOptimal } = dimensions;

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ info —Å–æ–æ–±—â–µ–Ω–∏–µ
        const info = document.createElement('div');
        info.className = 'image-info';
        info.style.cssText = `
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            z-index: 100;
        `;

        info.innerHTML = `
            üìè ${width}x${height}px (${ratio.toFixed(2)}:1)
            ${isOptimal ? '‚úÖ' : '‚ö†Ô∏è'} ${isOptimal ? '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä' : '–†–∞–∑–º–µ—Ä –Ω–µ –æ–ø—Ç–∏–º–∞–ª–µ–Ω'}
        `;

        const preview = document.getElementById(this.config.previewId);
        if (preview && preview.parentElement) {
            preview.parentElement.style.position = 'relative';
            preview.parentElement.appendChild(info);

            // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (info.parentNode) {
                    info.remove();
                }
            }, 3000);
        }
    }

    setLoadingState(button, isLoading) {
        if (!button) return;

        if (isLoading) {
            button.disabled = true;
            button.classList.add('loading');
            button.dataset.originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> <span>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω...</span>';
        } else {
            button.disabled = false;
            button.classList.remove('loading');
            if (button.dataset.originalText) {
                button.innerHTML = button.dataset.originalText;
                delete button.dataset.originalText;
            }
        }
    }

    // ========================================
    // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    // ========================================

    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    showError(message) {
        this.showNotification(message, 'error');
    }

    showWarning(message) {
        this.showNotification(message, 'warning');
    }

    showNotification(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
        document.querySelectorAll('.ajax-background-notification').forEach(n => n.remove());

        const notification = document.createElement('div');
        notification.className = `ajax-background-notification alert-luxury alert-${this.getAlertClass(type)}-luxury`;

        const icon = this.getIconForType(type);
        notification.innerHTML = `
            <i class="fas fa-${icon}"></i>
            <span>${message}</span>
            <button type="button" class="alert-close" onclick="this.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 10001;
            min-width: 350px;
            animation: slideInRight 0.3s ease;
        `;

        document.body.appendChild(notification);

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
        const timeout = type === 'warning' ? 7000 : 5000;
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }
        }, timeout);
    }

    getAlertClass(type) {
        const classes = {
            success: 'success',
            error: 'danger',
            warning: 'warning',
            info: 'info'
        };
        return classes[type] || 'info';
    }

    getIconForType(type) {
        const icons = {
            success: 'check-circle',
            error: 'exclamation-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };
        return icons[type] || 'info-circle';
    }

    // ========================================
    // –£–¢–ò–õ–ò–¢–´
    // ========================================

    getCurrentUserId() {
        // –°–ø–æ—Å–æ–± 1: –∏–∑ URL
        const path = window.location.pathname;
        const match = path.match(/\/profile\/(\d+)/);
        if (match) return match[1];

        // –°–ø–æ—Å–æ–± 2: –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if (window.currentUserId) return window.currentUserId;

        // –°–ø–æ—Å–æ–± 3: –∏–∑ meta —Ç–µ–≥–∞
        const meta = document.querySelector('meta[name="user-id"]');
        if (meta) return meta.content;

        // –°–ø–æ—Å–æ–± 4: –∏–∑ data –∞—Ç—Ä–∏–±—É—Ç–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById(this.config.formId);
        if (form && form.dataset.userId) return form.dataset.userId;

        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return null;
    }

    // ========================================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –§–û–ù–ê
    // ========================================

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ñ–æ–Ω–∞
    getOptimalDimensions() {
        return {
            recommended: { width: 1500, height: 500 },
            minimum: { width: 800, height: 400 },
            ratios: { min: 2, max: 4, ideal: 3 }
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    supportsWebP() {
        const canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = 1;
        return canvas.toDataURL('image/webp').indexOf('image/webp') === 5;
    }

    // –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
    async compressImage(file, maxWidth = 1920, quality = 0.8) {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();

            img.onload = () => {
                const { width, height } = img;

                // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                let newWidth = width;
                let newHeight = height;

                if (width > maxWidth) {
                    newWidth = maxWidth;
                    newHeight = (height * maxWidth) / width;
                }

                canvas.width = newWidth;
                canvas.height = newHeight;

                // –†–∏—Å—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                ctx.drawImage(img, 0, 0, newWidth, newHeight);

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
                canvas.toBlob(resolve, 'image/jpeg', quality);
            };

            img.src = URL.createObjectURL(file);
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –≤ Base64 –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    async getPreviewBase64(file, maxWidth = 400) {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();

            img.onload = () => {
                const { width, height } = img;
                const ratio = width / height;

                let newWidth = Math.min(width, maxWidth);
                let newHeight = newWidth / ratio;

                canvas.width = newWidth;
                canvas.height = newHeight;

                ctx.drawImage(img, 0, 0, newWidth, newHeight);
                resolve(canvas.toDataURL('image/jpeg', 0.7));
            };

            img.src = URL.createObjectURL(file);
        });
    }

    // ========================================
    // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
    // ========================================

    async validateAdvanced(file) {
        const dimensions = await this.validateImageDimensions(file);
        const analysis = {
            fileValid: this.validateFile(file),
            dimensions: dimensions,
            recommendations: []
        };

        if (dimensions) {
            const optimal = this.getOptimalDimensions();

            // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
            if (dimensions.width < optimal.minimum.width || dimensions.height < optimal.minimum.height) {
                analysis.recommendations.push({
                    type: 'warning',
                    message: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –ú–∏–Ω–∏–º—É–º: ${optimal.minimum.width}x${optimal.minimum.height}px`
                });
            }

            // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
            if (dimensions.ratio < optimal.ratios.min) {
                analysis.recommendations.push({
                    type: 'info',
                    message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç.'
                });
            } else if (dimensions.ratio > optimal.ratios.max) {
                analysis.recommendations.push({
                    type: 'info',
                    message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Ç—è–Ω—É—Ç–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–µ–Ω–µ–µ —à–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç.'
                });
            }

            // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
            const megapixels = (dimensions.width * dimensions.height) / 1000000;
            if (megapixels < 0.5) {
                analysis.recommendations.push({
                    type: 'warning',
                    message: '–ù–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–∏.'
                });
            }
        }

        return analysis;
    }

    // ========================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // ========================================

    init() {
        const fileInput = document.getElementById(this.config.fileInputId);
        if (fileInput) {
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            fileInput.addEventListener('change', () => {
                if (fileInput.files && fileInput.files[0]) {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞
                    this.uploadBackground();
                }
            });

            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ —Ñ–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã)
        this.addStyles();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≤–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º
        this.showOptimalDimensionsHint();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag & drop –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (this.config.enableDragDrop !== false) {
            this.initDragDrop();
        }
    }

    initDragDrop() {
        const dropZone = document.getElementById(this.config.previewId)?.parentElement;
        if (!dropZone) return;

        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('drag-over');
        });

        dropZone.addEventListener('dragleave', (e) => {
            e.preventDefault();
            dropZone.classList.remove('drag-over');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('drag-over');

            const files = e.dataTransfer.files;
            if (files.length > 0) {
                const fileInput = document.getElementById(this.config.fileInputId);
                if (fileInput) {
                    fileInput.files = files;
                    this.uploadBackground();
                }
            }
        });

        console.log('‚úÖ Drag & Drop –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ñ–æ–Ω–∞');
    }

    showOptimalDimensionsHint() {
        const uploadInfo = document.querySelector('.upload-info .upload-hint');
        if (uploadInfo) {
            const optimal = this.getOptimalDimensions();
            const originalText = uploadInfo.innerHTML;
            uploadInfo.innerHTML = `${originalText}<br>
                <small style="color: var(--text-muted); font-size: 0.8em;">
                    üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: ${optimal.recommended.width}x${optimal.recommended.height}px
                </small>`;
        }
    }

    addStyles() {
        if (document.getElementById('ajax-background-uploader-styles')) return;

        const style = document.createElement('style');
        style.id = 'ajax-background-uploader-styles';
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
            
            .alert-close {
                background: none;
                border: none;
                color: inherit;
                cursor: pointer;
                float: right;
                font-size: 1.2rem;
                opacity: 0.7;
                padding: 0;
                margin-left: 1rem;
                transition: opacity 0.2s ease;
            }
            
            .alert-close:hover {
                opacity: 1;
            }
            
            .image-info {
                font-family: 'Inter', sans-serif;
                transition: opacity 0.3s ease;
                pointer-events: none;
            }
            
            .image-info:hover {
                opacity: 0.9;
            }
            
            /* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π */
            .alert-warning-luxury {
                background: linear-gradient(135deg, rgba(217, 119, 6, 0.1), rgba(245, 158, 11, 0.1));
                color: var(--accent-warning);
                border-left: 4px solid var(--accent-warning);
            }
            
            .alert-info-luxury {
                background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(96, 165, 250, 0.1));
                color: var(--accent-info);
                border-left: 4px solid var(--accent-info);
            }
            
            /* Drag & Drop —Å—Ç–∏–ª–∏ */
            .drag-over {
                border: 2px dashed var(--accent-primary) !important;
                background: rgba(37, 99, 235, 0.1) !important;
                transform: scale(1.02);
                transition: all 0.3s ease;
            }
            
            /* –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ */
            .loading-background {
                position: relative;
                overflow: hidden;
            }
            
            .loading-background::after {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
                animation: shimmer 2s infinite;
            }
            
            @keyframes shimmer {
                0% { left: -100%; }
                100% { left: 100%; }
            }
        `;
        document.head.appendChild(style);
    }

    // ========================================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ========================================

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', this.config);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    getStatus() {
        return {
            isUploading: this.isUploading,
            config: this.config,
            hasPreview: !!document.getElementById(this.config.previewId)?.src,
            userId: this.getCurrentUserId()
        };
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (cleanup)
    destroy() {
        const fileInput = document.getElementById(this.config.fileInputId);
        if (fileInput) {
            fileInput.removeEventListener('change', this.uploadBackground);
        }

        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        document.querySelectorAll('.ajax-background-notification').forEach(n => n.remove());

        console.log('üóëÔ∏è AjaxBackgroundUploader —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// ========================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
// ========================================

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.ajaxBackgroundUploader = new AjaxBackgroundUploader();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä–æ–π uploadBackground()
function uploadBackgroundAjax() {
    return window.ajaxBackgroundUploader.uploadBackground();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.ajaxBackgroundUploader.init();
});

// ========================================
// –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ú–û–î–£–õ–¨–ù–´–• –°–ò–°–¢–ï–ú
// ========================================

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CommonJS
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AjaxBackgroundUploader;
}

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ AMD
if (typeof define === 'function' && define.amd) {
    define([], function() {
        return AjaxBackgroundUploader;
    });
}

// ========================================
// –ü–†–ò–ú–ï–† –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
// ========================================

/*
// 1. –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
// –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª - –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

// 2. –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
const advancedUploader = new AjaxBackgroundUploader({
    maxFileSize: 20, // 20 MB
    minFileSize: 100, // 100 KB
    enableDragDrop: true, // Drag & Drop –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    validateDimensions: true,
    onSuccess: (result) => {
        console.log('‚úÖ –§–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        updatePageTheme(result.user.imgBackground);
        saveToLocalStorage('lastBackground', result.user.imgBackground);
        trackAnalytics('background_uploaded');
    },
    onError: (error) => {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞:', error);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        reportError('background_upload_failed', error);
        showFallbackOptions();
    }
});

// 3. –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
document.getElementById('compressAndUpload').addEventListener('click', async () => {
    const fileInput = document.getElementById('backgroundFile');
    const file = fileInput.files[0];

    if (file) {
        // –°–∂–∏–º–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const compressed = await advancedUploader.compressImage(file, 1920, 0.8);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        advancedUploader.uploadBackground();
    }
});

// 4. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
const validator = new AjaxBackgroundUploader({
    validateAdvanced: true
});

document.getElementById('backgroundFile').addEventListener('change', async (e) => {
    const file = e.target.files[0];
    if (file) {
        const analysis = await validator.validateAdvanced(file);

        if (analysis.recommendations.length > 0) {
            analysis.recommendations.forEach(rec => {
                validator.showNotification(rec.message, rec.type);
            });
        }
    }
});

// 5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–º
const progressUploader = new AjaxBackgroundUploader({
    onProgress: (percent) => {
        document.getElementById('uploadProgress').style.width = percent + '%';
    },
    onSuccess: () => {
        document.getElementById('uploadProgress').style.width = '100%';
        setTimeout(() => {
            document.getElementById('uploadProgress').style.width = '0%';
        }, 1000);
    }
});

// 6. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º
const mainUploader = new AjaxBackgroundUploader({
    formId: 'mainBackgroundForm',
    fileInputId: 'mainBackgroundFile'
});

const modalUploader = new AjaxBackgroundUploader({
    formId: 'modalBackgroundForm',
    fileInputId: 'modalBackgroundFile'
});
*/