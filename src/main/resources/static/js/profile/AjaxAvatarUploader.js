// ========================================
// AJAX AVATAR UPLOADER MODULE
// –ì–æ—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ REST API
// ========================================

class AjaxAvatarUploader {
    constructor(options = {}) {
        this.config = {
            // API endpoints
            apiBaseUrl: '/api/profile',

            // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
            formId: 'avatarUploadForm',
            fileInputId: 'avatarFile',
            uploadBtnId: 'avatarUploadBtn',
            previewId: 'avatarPreview',
            placeholderId: 'avatarPlaceholder',

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            maxFileSize: 10, // MB
            allowedTypes: ['image/jpeg', 'image/jpg', 'image/png'],

            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            ...options
        };

        this.isUploading = false;
        console.log('üöÄ AjaxAvatarUploader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', this.config);
    }

    // ========================================
    // –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –ó–ê–ì–†–£–ó–ö–ò
    // ========================================

    async uploadAvatar() {
        if (this.isUploading) {
            console.warn('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
            return;
        }

        const fileInput = document.getElementById(this.config.fileInputId);
        const uploadBtn = document.getElementById(this.config.uploadBtnId);

        if (!fileInput || !fileInput.files || !fileInput.files[0]) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
            return;
        }

        const file = fileInput.files[0];
        console.log('üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞:', {
            name: file.name,
            size: `${(file.size / 1024 / 1024).toFixed(2)} MB`,
            type: file.type
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if (!this.validateFile(file)) {
            fileInput.value = '';
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        this.showPreview(file);

        // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        this.setLoadingState(uploadBtn, true);
        this.isUploading = true;

        try {
            const userId = this.getCurrentUserId();
            if (!userId) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

            const result = await this.uploadToServer(userId, file);

            if (result.success) {
                this.handleUploadSuccess(result);
            } else {
                this.handleUploadError(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            this.handleUploadError(error.message || '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        } finally {
            this.setLoadingState(uploadBtn, false);
            this.isUploading = false;
        }
    }

    // ========================================
    // –í–ê–õ–ò–î–ê–¶–ò–Ø –§–ê–ô–õ–ê
    // ========================================

    validateFile(file) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if (file.size > this.config.maxFileSize * 1024 * 1024) {
            const fileSizeMB = (file.size / 1024 / 1024).toFixed(2);
            this.showError(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${fileSizeMB} MB. –ú–∞–∫—Å–∏–º—É–º: ${this.config.maxFileSize} MB`);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        if (file.size === 0) {
            this.showError('–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
        if (!this.config.allowedTypes.includes(file.type.toLowerCase())) {
            this.showError(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${file.type}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG`);
            return false;
        }

        console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
        return true;
    }

    // ========================================
    // –ó–ê–ì–†–£–ó–ö–ê –ù–ê –°–ï–†–í–ï–†
    // ========================================

    async uploadToServer(userId, file) {
        const formData = new FormData();
        formData.append('avatar', file);

        const url = `${this.config.apiBaseUrl}/${userId}/avatar`;
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞:', url);

        const response = await fetch(url, {
            method: 'POST',
            body: formData,
            headers: {
                // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
        return result;
    }

    // ========================================
    // –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    // ========================================

    handleUploadSuccess(result) {
        console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        if (result.user && result.user.imageUrl) {
            this.updateAvatarOnPage(result.user.imageUrl);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showSuccess(result.message || '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');

        // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.config.onSuccess) {
            this.config.onSuccess(result);
        }
    }

    handleUploadError(message) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', message);
        this.showError(message);

        // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.config.onError) {
            this.config.onError(message);
        }
    }

    // ========================================
    // –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
    // ========================================

    updateAvatarOnPage(newImageUrl) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –≤ —Ñ–æ—Ä–º–µ
        const preview = document.getElementById(this.config.previewId);
        const placeholder = document.getElementById(this.config.placeholderId);

        if (preview) {
            preview.src = newImageUrl + '?t=' + Date.now(); // Cache busting
            preview.style.display = 'block';
        }

        if (placeholder) {
            placeholder.style.display = 'none';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const avatarSelectors = [
            '.sidebar .user-avatar img',
            '.header .avatar img',
            '.profile-avatar img',
            '.nav-user-avatar img'
        ];

        avatarSelectors.forEach(selector => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(el => {
                el.src = newImageUrl + '?t=' + Date.now();
            });
        });

        console.log('üîÑ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', newImageUrl);
    }

    showPreview(file) {
        const preview = document.getElementById(this.config.previewId);
        const placeholder = document.getElementById(this.config.placeholderId);

        if (!preview) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            preview.src = e.target.result;
            preview.style.display = 'block';
            if (placeholder) {
                placeholder.style.display = 'none';
            }
        };
        reader.readAsDataURL(file);
    }

    setLoadingState(button, isLoading) {
        if (!button) return;

        if (isLoading) {
            button.disabled = true;
            button.classList.add('loading');
            button.dataset.originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> <span>–ó–∞–≥—Ä—É–∂–∞–µ–º...</span>';
        } else {
            button.disabled = false;
            button.classList.remove('loading');
            if (button.dataset.originalText) {
                button.innerHTML = button.dataset.originalText;
                delete button.dataset.originalText;
            }
        }
    }

    // ========================================
    // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    // ========================================

    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    showError(message) {
        this.showNotification(message, 'error');
    }

    showNotification(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        document.querySelectorAll('.ajax-notification').forEach(n => n.remove());

        const notification = document.createElement('div');
        notification.className = `ajax-notification alert-luxury alert-${type === 'success' ? 'success' : 'danger'}-luxury`;
        notification.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
            <span>${message}</span>
            <button type="button" class="alert-close" onclick="this.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            min-width: 300px;
            animation: slideInRight 0.3s ease;
        `;

        document.body.appendChild(notification);

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }
        }, 5000);
    }

    // ========================================
    // –£–¢–ò–õ–ò–¢–´
    // ========================================

    getCurrentUserId() {
        // –°–ø–æ—Å–æ–± 1: –∏–∑ URL
        const path = window.location.pathname;
        const match = path.match(/\/profile\/(\d+)/);
        if (match) return match[1];

        // –°–ø–æ—Å–æ–± 2: –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if (window.currentUserId) return window.currentUserId;

        // –°–ø–æ—Å–æ–± 3: –∏–∑ meta —Ç–µ–≥–∞
        const meta = document.querySelector('meta[name="user-id"]');
        if (meta) return meta.content;

        // –°–ø–æ—Å–æ–± 4: –∏–∑ data –∞—Ç—Ä–∏–±—É—Ç–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById(this.config.formId);
        if (form && form.dataset.userId) return form.dataset.userId;

        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return null;
    }

    // ========================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // ========================================

    init() {
        const fileInput = document.getElementById(this.config.fileInputId);
        if (fileInput) {
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            fileInput.addEventListener('change', () => {
                if (fileInput.files && fileInput.files[0]) {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞
                    this.uploadAvatar();
                }
            });

            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
        this.addStyles();
    }

    addStyles() {
        if (document.getElementById('ajax-uploader-styles')) return;

        const style = document.createElement('style');
        style.id = 'ajax-uploader-styles';
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
            
            .alert-close {
                background: none;
                border: none;
                color: inherit;
                cursor: pointer;
                float: right;
                font-size: 1.2rem;
                opacity: 0.7;
                padding: 0;
                margin-left: 1rem;
                transition: opacity 0.2s ease;
            }
            
            .alert-close:hover {
                opacity: 1;
            }
        `;
        document.head.appendChild(style);
    }
}

// ========================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
// ========================================

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.ajaxAvatarUploader = new AjaxAvatarUploader();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä–æ–π uploadAvatar()
function uploadAvatarAjax() {
    return window.ajaxAvatarUploader.uploadAvatar();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.ajaxAvatarUploader.init();
});

// ========================================
// –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
// ========================================

/*
// 1. –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
// –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª - –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

// 2. –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const customUploader = new AjaxAvatarUploader({
    maxFileSize: 15, // 15 MB
    onSuccess: (result) => {
        console.log('–ö–∞—Å—Ç–æ–º–Ω—ã–π callback —É—Å–ø–µ—Ö–∞:', result);
    },
    onError: (error) => {
        console.log('–ö–∞—Å—Ç–æ–º–Ω—ã–π callback –æ—à–∏–±–∫–∏:', error);
    }
});

// 3. –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
document.getElementById('myUploadBtn').addEventListener('click', () => {
    customUploader.uploadAvatar();
});

// 4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
// –ó–∞–º–µ–Ω–∏—Ç–µ –≤ HTML: onchange="uploadAvatar()" –Ω–∞ onchange="uploadAvatarAjax()"
*/