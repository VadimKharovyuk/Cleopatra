// ===================================================
// subscriptionActions.js - –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫
// ===================================================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'success') {
    const alertClass = type === 'success' ? 'alert-success-luxury' : 'alert-danger-luxury';
    const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';

    const alert = document.createElement('div');
    alert.className = `alert-luxury ${alertClass}`;
    alert.style.opacity = '0';
    alert.style.transform = 'translateY(-20px)';
    alert.style.transition = 'all 0.3s ease';
    alert.innerHTML = `
        <i class="fas ${iconClass} me-2"></i>
        <span>${message}</span>
    `;

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const containers = [
        '.main-content',
        '.container',
        '.content',
        'main',
        'body'
    ];

    let targetContainer = null;
    let insertBefore = null;

    for (const selector of containers) {
        const container = document.querySelector(selector);
        if (container) {
            targetContainer = container;

            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∏–º
            const insertTargets = [
                '.profile-container',
                '.recommendations-container',
                '.content-container',
                '.page-content',
                container.firstElementChild
            ];

            for (const target of insertTargets) {
                const element = typeof target === 'string' ? document.querySelector(target) : target;
                if (element && container.contains(element)) {
                    insertBefore = element;
                    break;
                }
            }
            break;
        }
    }

    if (targetContainer) {
        if (insertBefore) {
            targetContainer.insertBefore(alert, insertBefore);
        } else {
            targetContainer.appendChild(alert);
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            alert.style.opacity = '1';
            alert.style.transform = 'translateY(0)';
        }, 10);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            alert.style.opacity = '0';
            alert.style.transform = 'translateY(-20px)';
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.parentNode.removeChild(alert);
                }
            }, 300);
        }, 3000);
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
async function toggleFollow(buttonElement) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏');

    const currentUserId = document.body.dataset.currentUserId;

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let profileUserId = null;

    if (buttonElement && buttonElement.dataset.userId) {
        profileUserId = buttonElement.dataset.userId;
    } else if (document.body.dataset.profileUserId) {
        profileUserId = document.body.dataset.profileUserId;
    } else if (buttonElement && buttonElement.getAttribute('data-user-id')) {
        profileUserId = buttonElement.getAttribute('data-user-id');
    }

    console.log('Current User ID:', currentUserId);
    console.log('Profile User ID:', profileUserId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ–±–∞ ID
    if (!currentUserId) {
        showNotification('–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç', 'error');
        setTimeout(() => {
            window.location.href = '/login';
        }, 1500);
        return;
    }

    if (!profileUserId) {
        console.error('Profile User ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–µ–±—è
    if (currentUserId === profileUserId) {
        showNotification('–ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è', 'error');
        return;
    }

    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–æ–ø–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ ID, —Ç–∞–∫ –∏ –∫–ª–∞—Å—Å—ã)
    const btn = buttonElement ||
        document.getElementById('follow-btn') ||
        document.querySelector('.follow-btn');

    if (!btn) {
        console.error('–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    const icon = btn.querySelector('[id*="follow-icon"], .follow-icon, i') ||
        document.getElementById('follow-icon');
    const text = btn.querySelector('[id*="follow-text"], .follow-text, span') ||
        document.getElementById('follow-text');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const originalIconClass = icon ? icon.className : '';
    const originalBtnClass = btn.className;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    btn.disabled = true;
    btn.style.opacity = '0.7';
    if (icon) {
        icon.className = 'fas fa-spinner fa-spin';
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        const csrfToken = document.querySelector('meta[name="_csrf"]')?.getAttribute('content');
        const csrfHeader = document.querySelector('meta[name="_csrf_header"]')?.getAttribute('content');

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const requestHeaders = {
            'Content-Type': 'application/json'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (csrfToken && csrfHeader) {
            requestHeaders[csrfHeader] = csrfToken;
        }

        const response = await fetch('/api/subscriptions/toggle', {
            method: 'POST',
            headers: requestHeaders,
            body: JSON.stringify({
                subscribedToId: parseInt(profileUserId)
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        const result = await response.json();
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);

        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            updateFollowButton(btn, icon, text, result.isSubscribed);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            updateFollowersCount(result.followersCount);

            // –ö—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification(result.message, 'success');

            // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            btn.style.transform = 'scale(0.95)';
            setTimeout(() => {
                btn.style.transform = 'scale(1)';
            }, 150);

        } else {
            showNotification('–û—à–∏–±–∫–∞: ' + (result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (icon) icon.className = originalIconClass;
            btn.className = originalBtnClass;
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ:', error);
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 'error');

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (icon) icon.className = originalIconClass;
        btn.className = originalBtnClass;
    } finally {
        // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        btn.disabled = false;
        btn.style.opacity = '1';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
function updateFollowButton(btn, icon, text, isSubscribed) {
    if (isSubscribed) {
        // –ü–æ–¥–ø–∏—Å–∞–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å following
        btn.className = 'btn-luxury btn-secondary-luxury following';

        if (icon) icon.className = 'fas fa-user-check';
        if (text) text.textContent = '–ü–æ–¥–ø–∏—Å–∞–Ω';
    } else {
        // –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω - —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å following
        btn.className = 'btn-luxury btn-primary-luxury';

        if (icon) icon.className = 'fas fa-user-plus';
        if (text) text.textContent = '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
function updateFollowersCount(newCount) {
    if (newCount === undefined) return;

    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const selectors = [
        '.stats-section .stat-item:nth-child(2) .stat-number',
        '.followers-count',
        '[data-followers-count]',
        '.stat-number',
        '.followers .number',
        '.subscriber-count'
    ];

    for (const selector of selectors) {
        const element = document.querySelector(selector);
        if (element) {
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞
            const currentCount = parseInt(element.textContent) || 0;
            animateNumber(element, currentCount, newCount);
            break;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞
function animateNumber(element, from, to) {
    const duration = 500;
    const steps = 20;
    const stepSize = (to - from) / steps;
    const stepDuration = duration / steps;

    let current = from;
    let step = 0;

    const timer = setInterval(() => {
        step++;
        current += stepSize;

        if (step >= steps) {
            element.textContent = to;
            clearInterval(timer);
        } else {
            element.textContent = Math.round(current);
        }
    }, stepDuration);
}

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –∞–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
function simpleToggleFollow() {
    const btn = document.getElementById('follow-btn') ||
        document.querySelector('.follow-btn');
    if (btn) {
        toggleFollow(btn);
    } else {
        console.error('–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    const followButtons = document.querySelectorAll(
        '[data-action="follow"], .follow-btn, #follow-btn, [onclick*="toggleFollow"], [onclick*="simpleToggleFollow"]'
    );

    followButtons.forEach(button => {
        // –ù–ï —É–¥–∞–ª—è–µ–º onclick, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π event listener —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç onclick
        if (!button.hasAttribute('onclick')) {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                toggleFollow(this);
            });
            console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ addEventListener:', button);
        } else {
            console.log('üîó –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –∏–º–µ–µ—Ç onclick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:', button);
        }
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.toggleFollow = toggleFollow;
window.simpleToggleFollow = simpleToggleFollow;
window.showNotification = showNotification;