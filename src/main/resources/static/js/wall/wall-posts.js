/**
 * wall-posts.js
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏ –Ω–∞ —Å—Ç–µ–Ω–µ
 */

class WallPosts {

    constructor(config) {
        this.wallOwnerId = config.wallOwnerId;
        this.currentUserId = config.currentUserId;
        this.pageSize = config.pageSize || 10;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        this.currentPage = 0;
        this.isLoading = false;
        this.hasMorePosts = true;
        this.totalPostsCount = 0;

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.postsContainer = document.getElementById('postsContainer');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
     */
    init() {
        this.loadWallPosts();
        this.setupInfiniteScroll();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å—Ç–µ–Ω—ã
     */
    async loadWallPosts() {
        if (this.isLoading || !this.hasMorePosts) return;

        this.isLoading = true;
        WallUtils.showLoading();

        try {
            const response = await fetch(
                `/wall/api/${this.wallOwnerId}/posts?page=${this.currentPage}&size=${this.pageSize}`
            );

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤');
            }

            const data = await response.json();

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            data.wallPosts.forEach(post => {
                this.postsContainer.appendChild(this.createPostElement(post));
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤
            this.updateTotalPostsCount(data.wallPosts.length);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            this.hasMorePosts = data.hasNext;
            this.currentPage++;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.handleEmptyState(data);

        } catch (error) {
            WallUtils.logError('loadWallPosts', error);
            WallUtils.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤', 'error');
        } finally {
            this.isLoading = false;
            WallUtils.hideLoading();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
     */
    createPostElement(post) {
        const postDiv = document.createElement('div');
        postDiv.className = 'post-item';
        postDiv.setAttribute('data-post-id', post.id);

        const authorInfo = post.author;
        const wallOwnerInfo = post.wallOwner;

        const isOwnPost = authorInfo.id !== wallOwnerInfo.id;
        const authorText = isOwnPost
            ? `${authorInfo.firstName} ${authorInfo.lastName} ‚Üí ${wallOwnerInfo.firstName} ${wallOwnerInfo.lastName}`
            : `${authorInfo.firstName} ${authorInfo.lastName}`;

        postDiv.innerHTML = `
            <div class="post-header">
                <a href="/profile/${authorInfo.id}" class="avatar-link">
                    <img src="${authorInfo.imageUrl || '/default-avatar.png'}"
                         alt="${authorInfo.firstName}"
                         class="post-avatar">
                </a>
                <div class="post-author-info">
                    <h4 class="post-author-name">${WallUtils.escapeHtml(authorText)}</h4>
                    <p class="post-meta">${WallUtils.formatDate(post.createdAt)}</p>
                </div>
                <div class="post-actions-header">
                    ${this.renderPostActions(post)}
                </div>
            </div>

            <div class="post-content">
                ${post.text ? `<div class="post-text">${WallUtils.escapeHtml(post.text)}</div>` : ''}
                ${post.picUrl ? `
                    <div class="post-image">
                        <img src="${post.picUrl}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞">
                    </div>
                ` : ''}
            </div>

            <div class="post-stats">
                <div class="stat-item like-btn" onclick="wallInteractions.toggleLike(${post.id})" data-post-id="${post.id}">
                    <span class="stat-icon like-icon">‚ù§Ô∏è</span>
                    <span class="like-count">${post.likesCount}</span>
                </div>
                <div class="stat-item comment-btn" onclick="wallInteractions.showComments(${post.id})">
                    <span class="stat-icon">üí¨</span>
                    <span>${post.commentsCount}</span>
                </div>
            </div>
        `;

        return postDiv;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ—Å—Ç–∞
     */
    renderPostActions(post) {
        if (!(post.canEdit || post.canDelete)) {
            return '';
        }

        return `
            ${post.canDelete ? `
                <button onclick="wallInteractions.deletePost(${post.id})" class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç">
                    <i class="fas fa-trash"></i>
                    <span>–£–¥–∞–ª–∏—Ç—å</span>
                </button>
            ` : ''}
        `;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
     */
    addNewPost(post) {
        const postElement = this.createPostElement(post);
        this.postsContainer.insertBefore(postElement, this.postsContainer.firstChild);

        // –°–∫—Ä—ã–≤–∞–µ–º empty state –µ—Å–ª–∏ –æ–Ω –ø–æ–∫–∞–∑–∞–Ω
        WallUtils.hideEmptyState();

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        this.totalPostsCount++;
        this.updatePostsCount();
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ DOM
     */
    removePost(postId) {
        const postElement = document.querySelector(`[data-post-id="${postId}"]`);
        if (postElement) {
            postElement.remove();

            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            this.totalPostsCount--;
            this.updatePostsCount();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º empty state –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤
            if (WallUtils.isPostsContainerEmpty()) {
                WallUtils.showEmptyState();
            }
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
     */
    setupInfiniteScroll() {
        const throttledScroll = WallUtils.throttle(() => {
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000) {
                this.loadWallPosts();
            }
        }, 200);

        window.addEventListener('scroll', throttledScroll);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
     */
    updateTotalPostsCount(newPostsCount) {
        if (this.currentPage === 1) {
            // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            this.totalPostsCount = newPostsCount;
        } else {
            // –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–≥—Ä—É–∑–∫–∞—Ö –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—á–µ—Ç—á–∏–∫—É
            this.totalPostsCount += newPostsCount;
        }
        this.updatePostsCount();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
     */
    updatePostsCount() {
        WallUtils.updatePostsCount(this.totalPostsCount);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    handleEmptyState(data) {
        if (data.isEmpty && this.currentPage === 1) {
            WallUtils.showEmptyState();
        } else if (!this.hasMorePosts && this.currentPage > 1) {
            WallUtils.showEndMessage();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID
     */
    getPostElement(postId) {
        return document.querySelector(`[data-post-id="${postId}"]`);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞
     */
    updatePostLikeCount(postId, newCount) {
        const postElement = this.getPostElement(postId);
        if (postElement) {
            const likeCount = postElement.querySelector('.like-count');
            if (likeCount) {
                likeCount.textContent = newCount;
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞
     */
    togglePostLikeState(postId) {
        const postElement = this.getPostElement(postId);
        if (postElement) {
            const likeBtn = postElement.querySelector('.like-btn');
            if (likeBtn) {
                likeBtn.classList.toggle('liked');

                // –ê–Ω–∏–º–∞—Ü–∏—è
                likeBtn.style.transform = 'scale(1.2)';
                setTimeout(() => {
                    likeBtn.style.transform = 'scale(1)';
                }, 200);
            }
        }
    }
}