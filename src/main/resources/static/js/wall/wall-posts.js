// wall-posts.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏ —Å—Ç–µ–Ω—ã

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ —Å—Ç–µ–Ω—ã
 */
class WallPosts {
    constructor(wallOwnerId, currentUserId) {
        this.wallOwnerId = wallOwnerId;
        this.currentUserId = currentUserId;
        this.currentPage = 0;
        this.isLoading = false;
        this.hasMorePosts = true;
        this.pageSize = 10;
        this.totalPostsCount = 0;

        this.postsContainer = document.getElementById('postsContainer');
        this.emptyState = document.getElementById('emptyState');
        this.endMessage = document.getElementById('endMessage');
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å—Ç—ã —Å—Ç–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadWallPosts() {
        if (this.isLoading || !this.hasMorePosts) return;

        this.isLoading = true;
        showLoading();

        try {
            const response = await fetch(`/wall/api/${this.wallOwnerId}/posts?page=${this.currentPage}&size=${this.pageSize}`);

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤');
            }

            const data = await response.json();

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            data.wallPosts.forEach(post => {
                this.postsContainer.appendChild(this.createPostElement(post));
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤
            if (this.currentPage === 0) {
                this.totalPostsCount = data.wallPosts.length;
            } else {
                this.totalPostsCount += data.wallPosts.length;
            }
            updatePostsCount(this.totalPostsCount);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            this.hasMorePosts = data.hasNext;
            this.currentPage++;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º empty state –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤
            if (data.isEmpty && this.currentPage === 1) {
                this.emptyState.style.display = 'block';
            } else if (!this.hasMorePosts && this.currentPage > 1) {
                this.endMessage.style.display = 'block';
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤', 'error');
        } finally {
            this.isLoading = false;
            hideLoading();
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç HTML —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–∞
     * @param {Object} post - –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
     * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–∞
     */
    createPostElement(post) {
        const postDiv = document.createElement('div');
        postDiv.className = 'post-item';
        postDiv.setAttribute('data-post-id', post.id);

        const authorInfo = post.author;
        const wallOwnerInfo = post.wallOwner;

        const isOwnPost = authorInfo.id !== wallOwnerInfo.id;
        const authorText = isOwnPost
            ? `${authorInfo.firstName} ${authorInfo.lastName} ‚Üí ${wallOwnerInfo.firstName} ${wallOwnerInfo.lastName}`
            : `${authorInfo.firstName} ${authorInfo.lastName}`;

        postDiv.innerHTML = `
      <div class="post-header">
        <a href="/profile/${authorInfo.id}" class="avatar-link">
          <img src="${authorInfo.imageUrl || '/default-avatar.png'}"
               alt="${authorInfo.firstName}"
               class="post-avatar">
        </a>
        <div class="post-author-info">
          <h4 class="post-author-name">${escapeHtml(authorText)}</h4>
          <p class="post-meta">${formatDate(post.createdAt)}</p>
        </div>
        <div class="post-actions-header">
          ${(post.canEdit || post.canDelete) ? `
            ${post.canDelete ? `
              <button onclick="deletePost(${post.id})" class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç">
                <i class="fas fa-trash"></i>
                <span>–£–¥–∞–ª–∏—Ç—å</span>
              </button>
            ` : ''}
          ` : ''}
        </div>
      </div>

      <div class="post-content">
        ${post.text ? `<div class="post-text">${escapeHtml(post.text)}</div>` : ''}
        ${post.picUrl ? `
          <div class="post-image">
            <img src="${post.picUrl}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞">
          </div>
        ` : ''}
      </div>

      <div class="post-stats">
        <div class="stat-item like-btn" onclick="wallInteractions.toggleLike(${post.id})" data-post-id="${post.id}">
          <span class="stat-icon like-icon">‚ù§Ô∏è</span>
          <span class="like-count">${post.likesCount}</span>
        </div>
        <div class="stat-item comment-btn" onclick="wallInteractions.showComments(${post.id})">
          <span class="stat-icon">üí¨</span>
          <span>${post.commentsCount}</span>
        </div>
      </div>
    `;

        return postDiv;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
     * @param {Object} post - –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
     */
    addNewPost(post) {
        // –°–∫—Ä—ã–≤–∞–µ–º empty state –µ—Å–ª–∏ –æ–Ω –ø–æ–∫–∞–∑–∞–Ω
        this.emptyState.style.display = 'none';

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        this.postsContainer.insertBefore(this.createPostElement(post), this.postsContainer.firstChild);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤
        this.totalPostsCount++;
        updatePostsCount(this.totalPostsCount);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
     * @param {number} postId - ID –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    async deletePost(postId) {
        const confirmMessage = this.currentUserId == this.wallOwnerId
            ? '–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å —Å–æ —Å–≤–æ–µ–π —Å—Ç–µ–Ω—ã?'
            : '–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç —Å —ç—Ç–æ–π —Å—Ç–µ–Ω—ã?';

        if (!confirm(confirmMessage)) return;

        try {
            const response = await fetch(`/wall/api/posts/${postId}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞');
            }

            // –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ DOM
            const postElement = document.querySelector(`[data-post-id="${postId}"]`);
            if (postElement) {
                postElement.remove();

                // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤
                this.totalPostsCount--;
                updatePostsCount(this.totalPostsCount);
            }

            showNotification('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω', 'success');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å empty state
            if (this.postsContainer.children.length === 0) {
                this.emptyState.style.display = 'block';
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞', 'error');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Å–∫—Ä–æ–ª–ª
     */
    setupInfiniteScroll() {
        window.addEventListener('scroll', () => {
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000) {
                this.loadWallPosts();
            }
        });
    }
}