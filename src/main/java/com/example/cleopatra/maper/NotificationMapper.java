package com.example.cleopatra.maper;

import com.example.cleopatra.dto.Notification.NotificationDto;
import com.example.cleopatra.enums.NotificationType;
import com.example.cleopatra.model.Notification;
import com.example.cleopatra.model.User;
import lombok.extern.slf4j.Slf4j;
import org.hibernate.Hibernate;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Component
@Slf4j
public class NotificationMapper {

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Notification –≤ NotificationDto
     */
    public NotificationDto toDto(Notification notification) {
        if (notification == null) {
            return null;
        }

        try {
            return NotificationDto.builder()
                    .id(notification.getId())
                    .recipientId(notification.getRecipient() != null ? notification.getRecipient().getId() : null)
                    .actorId(notification.getActor() != null ? notification.getActor().getId() : null)
                    .actorName(getActorName(notification))
                    .actorImageUrl(getActorImageUrl(notification))
                    .type(notification.getType())
                    .title(notification.getTitle())
                    .message(notification.getMessage())
                    .data(notification.getData())
                    .relatedEntityId(notification.getRelatedEntityId())
                    .relatedEntityType(notification.getRelatedEntityType())
                    .isRead(notification.getIsRead())
                    .relatedEntityId(notification.getRelatedEntityId())      // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ—Å—Ç–∞
                    .relatedEntityType(notification.getRelatedEntityType())
                    .isSent(notification.getIsSent())
                    .sentAt(notification.getSentAt())
                    .readAt(notification.getReadAt())
                    .createdAt(notification.getCreatedAt())
                    .build();

        } catch (Exception e) {
            log.error("‚ùå Error mapping notification to DTO: {}", notification.getId(), e);
            return createErrorDto(notification);
        }
    }


    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ DTO –¥–ª—è WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     */
    public NotificationDto toWebSocketDto(Notification notification) {
        if (notification == null) {
            return null;
        }

        try {
            return NotificationDto.builder()
                    .id(notification.getId())
                    .actorName(getActorName(notification))
                    .actorImageUrl(getActorImageUrl(notification))
                    .type(notification.getType())
                    .title(notification.getTitle())
                    .message(notification.getMessage())
                    .data(notification.getData())
                    .relatedEntityId(notification.getRelatedEntityId())      // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ—Å—Ç–∞
                    .relatedEntityType(notification.getRelatedEntityType())
                    .relatedEntityId(notification.getRelatedEntityId())
                    .relatedEntityType(notification.getRelatedEntityType())
                    .createdAt(notification.getCreatedAt())
                    .build();

        } catch (Exception e) {
            log.error("‚ùå Error mapping notification for WebSocket: {}", notification.getId(), e);
            return null;
        }
    }


    // ===================== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ =====================

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∞–∫—Ç–æ—Ä–∞
     */
    private String getActorName(Notification notification) {
        if (notification == null || notification.getActor() == null) {
            return "–°–∏—Å—Ç–µ–º–∞"; // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        }

        try {
            User actor = notification.getActor();

            // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
            StringBuilder nameBuilder = new StringBuilder();

            if (actor.getFirstName() != null && !actor.getFirstName().trim().isEmpty()) {
                nameBuilder.append(actor.getFirstName().trim());
            }

            if (actor.getLastName() != null && !actor.getLastName().trim().isEmpty()) {
                if (!nameBuilder.isEmpty()) {
                    nameBuilder.append(" ");
                }
                nameBuilder.append(actor.getLastName().trim());
            }

            // –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º email
            if (nameBuilder.isEmpty()) {
                if (actor.getEmail() != null && !actor.getEmail().trim().isEmpty()) {
                    String email = actor.getEmail().trim();
                    // –ë–µ—Ä–µ–º —á–∞—Å—Ç—å –¥–æ @ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    int atIndex = email.indexOf('@');
                    return atIndex > 0 ? email.substring(0, atIndex) : email;
                } else {
                    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #" + actor.getId();
                }
            }

            return nameBuilder.toString();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error getting actor name for notification: {}", notification.getId(), e);
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–æ—Ä–∞
     */
    private String getActorImageUrl(Notification notification) {
        if (notification == null || notification.getActor() == null) {
            return null;
        }

        try {
            // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø—Ä–æ–∫—Å–∏
            if (!Hibernate.isInitialized(notification.getActor())) {
                log.warn("‚ö†Ô∏è Actor not initialized for notification: {}", notification.getId());
                return null;
            }

            String imageUrl = notification.getActor().getImageUrl();

            if (imageUrl != null && !imageUrl.trim().isEmpty()) {
                return imageUrl.trim();
            }

            return null;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error getting actor image URL for notification: {}", notification.getId(), e);
            return null;
        }
    }

    /**
     * –û–±—Ä–µ–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
     */
    private String truncateMessage(String message, int maxLength) {
        if (message == null) {
            return "";
        }

        if (message.length() <= maxLength) {
            return message;
        }

        return message.substring(0, maxLength).trim() + "...";
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ DTO —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
     */
    private NotificationDto createErrorDto(Notification notification) {
        try {
            return NotificationDto.builder()
                    .id(notification.getId())
                    .type(notification.getType())
                    .title("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                    .message("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                    .isRead(notification.getIsRead())
                    .createdAt(notification.getCreatedAt())
                    .build();

        } catch (Exception e) {
            log.error("‚ùå Critical error creating error DTO for notification", e);

            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
            return NotificationDto.builder()
                    .id(notification != null ? notification.getId() : -1L)
                    .title("–û—à–∏–±–∫–∞")
                    .message("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                    .isRead(false)
                    .createdAt(LocalDateTime.now())
                    .build();
        }
    }
}