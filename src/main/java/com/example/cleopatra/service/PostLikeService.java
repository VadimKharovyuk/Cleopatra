package com.example.cleopatra.service;

import com.example.cleopatra.EVENT.PostLikedEvent;
import com.example.cleopatra.dto.Post.PostCardDto;
import com.example.cleopatra.dto.Post.PostLikeResponseDto;
import com.example.cleopatra.dto.Post.PostResponseDto;
import com.example.cleopatra.maper.PostMapper;
import com.example.cleopatra.model.Post;
import com.example.cleopatra.model.User;
import com.example.cleopatra.repository.PostRepository;
import com.example.cleopatra.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional(readOnly = true)
public class PostLikeService {

    private final PostRepository postRepository;
    private final UserRepository userRepository;
    private final PostMapper postMapper;
    private final ApplicationEventPublisher eventPublisher;



    /**
     * –õ–∞–π–∫–Ω—É—Ç—å/—É–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å –ø–æ—Å—Ç–∞
     */

    /**
     * –õ–∞–π–∫–Ω—É—Ç—å/—É–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å –ø–æ—Å—Ç–∞
     */
    @Transactional
    public PostLikeResponseDto toggleLike(Long postId, Long userId) {
        Post post = postRepository.findById(postId)
                .orElseThrow(() -> new RuntimeException("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        boolean isLiked = post.getLikedBy().contains(user);

        if (isLiked) {
            // –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫
            post.getLikedBy().remove(user);
            user.getLikedPosts().remove(post);
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–±—Ä–∞–ª –ª–∞–π–∫ —Å –ø–æ—Å—Ç–∞ {}", userId, postId);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
            post.getLikedBy().add(user);
            user.getLikedPosts().add(post);
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ª–∞–π–∫–Ω—É–ª –ø–æ—Å—Ç {}", userId, postId);

            // üî• –ü–£–ë–õ–ò–ö–£–ï–ú –°–û–ë–´–¢–ò–ï –¢–û–õ–¨–ö–û –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò –õ–ê–ô–ö–ê
            eventPublisher.publishEvent(new PostLikedEvent(
                    postId,
                    post.getAuthor().getId(), // postAuthorId
                    userId,                   // likerUserId
                    post.getContent() != null ? post.getContent() : "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            ));
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
        post.setLikesCount((long) post.getLikedBy().size());
        postRepository.save(post);

        return PostLikeResponseDto.builder()
                .postId(postId)
                .isLiked(!isLiked)
                .likesCount(post.getLikesCount())
                .build();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç
     */
    public Boolean isPostLikedByUser(Post post, Long currentUserId) {
        if (currentUserId == null) return false;

        return post.getLikedBy().stream()
                .anyMatch(user -> user.getId().equals(currentUserId));
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ –ø–æ—Å—Ç (–¥–ª—è PostResponseDto)
     */
    public List<PostResponseDto.LikeUserDto> getRecentLikes(Post post, int limit) {
        return post.getLikedBy().stream()
                .limit(limit)
                .map(postMapper::toLikeUserDto)
                .collect(Collectors.toList());
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ –ø–æ—Å—Ç (–¥–ª—è PostCardDto)
     */
    public List<PostCardDto.LikeUserDto> getRecentLikesForCard(Post post, int limit) {
        return post.getLikedBy().stream()
                .limit(limit)
                .map(postMapper::toCardLikeUserDto)
                .collect(Collectors.toList());
    }

}