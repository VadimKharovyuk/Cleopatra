package com.example.cleopatra.service;

import com.example.cleopatra.model.User;
import com.example.cleopatra.model.UserOnlineStatus;
import com.example.cleopatra.repository.UserOnlineStatusRepository;
import com.example.cleopatra.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class UserOnlineStatusService {

    private final UserOnlineStatusRepository onlineStatusRepository;
    private final UserRepository userRepository;

    // ====================== –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –ú–ï–¢–û–î–´ ======================

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –ë–ï–ó clientInfo
     */
    @Transactional
    public void updateOnlineStatus(Long userId, boolean isOnline) {
        updateOnlineStatus(userId, isOnline, null); // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    }



    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï - —Ç–æ–ª—å–∫–æ SQL –∑–∞–ø—Ä–æ—Å—ã
     */
    @Transactional
    public void updateOnlineStatusFinal(Long userId, boolean isOnline) {
        log.info("üîÑ –§–ò–ù–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: userId={}, isOnline={}", userId, isOnline);

        LocalDateTime now = LocalDateTime.now(); // –û–±—ä—è–≤–ª—è–µ–º –∑–¥–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–∑–¥–µ

        try {
            // 1. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQL
            int updated = onlineStatusRepository.updateOnlineStatus(userId, isOnline, now);
            log.debug("üìä SQL UPDATE: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {} —Å—Ç—Ä–æ–∫", updated);

            if (updated > 0) {
                log.info("‚úÖ –£–°–ü–ï–®–ù–û –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ SQL: userId={}, isOnline={}", userId, isOnline);
                return;
            }

            // 2. –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º UPSERT —á–µ—Ä–µ–∑ native SQL
            log.debug("‚ûï –ü–æ–ø—ã—Ç–∫–∞ UPSERT —á–µ—Ä–µ–∑ native SQL...");

            int result = onlineStatusRepository.upsertOnlineStatus(
                    userId, isOnline, now, "WEB", now, now
            );

            if (result > 0) {
                log.info("‚úÖ –£–°–ü–ï–®–ù–û —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ UPSERT: userId={}", userId);
            } else {
                log.error("‚ùå UPSERT –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è userId={}", userId);
            }

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è userId={}: {}", userId, e.getMessage());
            log.error("üìä –°—Ç–µ–∫-—Ç—Ä–µ–π—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:", e);

            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä—è–º–æ–π SQL
            try {
                log.debug("üÜò –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê - –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ...");
                onlineStatusRepository.createOrIgnoreStatus(userId, isOnline, now, "WEB", now, now);
                log.info("üÜò –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è userId={}", userId);
            } catch (Exception e2) {
                log.error("üíÄ –í–°–ï –ü–û–ü–´–¢–ö–ò –ù–ï–£–î–ê–ß–ù–´ –¥–ª—è userId={}: {}", userId, e2.getMessage());
            }
        }
    }

    /**
     * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    @Transactional
    public void updateOnlineStatusUltraSimple(Long userId, boolean isOnline) {
        log.info("üîÑ –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: userId={}, isOnline={}", userId, isOnline);

        LocalDateTime now = LocalDateTime.now();

        try {
            // –ü–æ–ø—ã—Ç–∫–∞ 1: –û–±—ã—á–Ω—ã–π UPDATE
            int updated = onlineStatusRepository.updateOnlineStatus(userId, isOnline, now);

            if (updated > 0) {
                log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: userId={}", userId);
                return;
            }

            // –ü–æ–ø—ã—Ç–∫–∞ 2: –ü—Ä—è–º–æ–π INSERT
            onlineStatusRepository.insertNewStatus(userId, isOnline, now, "WEB", now, now);
            log.info("‚úÖ –°–æ–∑–¥–∞–Ω: userId={}", userId);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞: {}", e.getMessage());

            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: DELETE + INSERT
            try {
                onlineStatusRepository.deleteAllByUserId(userId);
                onlineStatusRepository.insertNewStatus(userId, isOnline, now, "WEB", now, now);
                log.info("‚úÖ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω: userId={}", userId);
            } catch (Exception e2) {
                log.error("üíÄ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {}", e2.getMessage());
            }
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
     */
    @Transactional
    public void recreateUserStatus(Long userId, boolean isOnline) {
        log.info("üîÑ –ü–û–õ–ù–û–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï —Å—Ç–∞—Ç—É—Å–∞: userId={}, isOnline={}", userId, isOnline);

        LocalDateTime now = LocalDateTime.now(); // –û–±—ä—è–≤–ª—è–µ–º –∑–¥–µ—Å—å

        try {
            // 1. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            log.debug("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è userId={}", userId);
            onlineStatusRepository.deleteAllByUserId(userId);
            onlineStatusRepository.flush();

            // 2. –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            Thread.sleep(100);

            // 3. –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π SQL INSERT
            log.debug("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π SQL...");

            int created = onlineStatusRepository.insertNewStatus(userId, isOnline, now, "WEB", now, now);

            if (created > 0) {
                log.info("‚úÖ –£–°–ü–ï–®–ù–û –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å: userId={}, isOnline={}", userId, isOnline);
            } else {
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è userId={}", userId);
            }

        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.warn("‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–∞ –ø–∞—É–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
        } catch (Exception e) {
            log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è userId={}: {}", userId, e.getMessage(), e);
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –º–µ—Ç–æ–¥ - —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
     */
    @Transactional
    public void setUserOnline(Long userId) {
        LocalDateTime now = LocalDateTime.now();

        try {
            // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω
            int result = onlineStatusRepository.updateOnlineStatus(userId, true, now);

            if (result == 0) {
                // –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                onlineStatusRepository.insertNewStatus(userId, true, now, "WEB", now, now);
            }

            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ–Ω–ª–∞–π–Ω", userId);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞: {}", e.getMessage());
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ñ–ª–∞–π–Ω
     */
    @Transactional
    public void setUserOffline(Long userId) {
        LocalDateTime now = LocalDateTime.now();

        try {
            // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ñ–ª–∞–π–Ω
            int result = onlineStatusRepository.updateOnlineStatus(userId, false, now);

            if (result == 0) {
                // –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                onlineStatusRepository.insertNewStatus(userId, false, now, "WEB", now, now);
            }

            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω", userId);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞: {}", e.getMessage());
        }
    }



    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    @Transactional(readOnly = true)
    public void diagnoseUserStatus(Long userId) {
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: userId={}", userId);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            boolean userExists = userRepository.existsById(userId);
            log.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", userExists);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            boolean statusExists = onlineStatusRepository.existsByUserId(userId);
            log.info("üìä –°—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", statusExists);

            if (statusExists) {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                Optional<UserOnlineStatus> current = onlineStatusRepository.findByUserId(userId);
                if (current.isPresent()) {
                    UserOnlineStatus status = current.get();
                    log.info("üìã –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:");
                    log.info("  - userId: {}", status.getUserId());
                    log.info("  - isOnline: {}", status.getIsOnline());
                    log.info("  - lastSeen: {}", status.getLastSeen());
                    log.info("  - deviceType: {}", status.getDeviceType());
                    log.info("  - createdAt: {}", status.getCreatedAt());
                    log.info("  - updatedAt: {}", status.getUpdatedAt());
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            int count = onlineStatusRepository.countByUserId(userId);
            log.info("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è userId={}: {}", userId, count);

            if (count > 1) {
                log.error("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï! –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –µ—Å—Ç—å {} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç—É—Å–∞", userId, count);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è userId={}: {}", userId, e.getMessage(), e);
        }
    }



    /**
     * –ú–µ—Ç–æ–¥ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
     */
    @Transactional
    public void forceResyncUserStatus(Long userId, boolean isOnline) {
        log.info("üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: userId={}, isOnline={}", userId, isOnline);

        try {
            // 1. –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            log.debug("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏...");
            onlineStatusRepository.deleteByUserId(userId);
            onlineStatusRepository.flush(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º DELETE

            // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            log.debug("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...");
            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new UsernameNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + userId));

            UserOnlineStatus newStatus = UserOnlineStatus.builder()
                    .userId(userId)
                    .user(user)
                    .isOnline(isOnline)
                    .lastSeen(LocalDateTime.now())
                    .deviceType("WEB")
                    .build();

            UserOnlineStatus saved = onlineStatusRepository.saveAndFlush(newStatus);
            log.info("‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å: userId={}, isOnline={}", saved.getUserId(), saved.getIsOnline());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è userId={}: {}", userId, e.getMessage());
            log.error("üìä –°—Ç–µ–∫-—Ç—Ä–µ–π—Å:", e);
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void updateOnlineStatusNewTransaction(Long userId, boolean isOnline) {
        log.info("üîÑ –ù–û–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: userId={}, isOnline={}", userId, isOnline);

        try {
            LocalDateTime now = LocalDateTime.now();

            // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ SQL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            int updated = onlineStatusRepository.forceUpdateOnlineStatus(userId, isOnline, now);

            if (updated > 0) {
                log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≤ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: userId={}", userId);
            } else {
                log.debug("‚ùå SQL –Ω–µ –æ–±–Ω–æ–≤–∏–ª, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å...");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å
                boolean exists = onlineStatusRepository.existsByUserId(userId);
                if (!exists) {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    User user = userRepository.findById(userId)
                            .orElseThrow(() -> new UsernameNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + userId));

                    UserOnlineStatus newStatus = UserOnlineStatus.builder()
                            .userId(userId)
                            .user(user)
                            .isOnline(isOnline)
                            .lastSeen(now)
                            .deviceType("WEB")
                            .build();

                    onlineStatusRepository.save(newStatus);
                    log.info("‚úÖ –°–æ–∑–¥–∞–Ω –≤ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: userId={}", userId);
                } else {
                    log.warn("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.");
                }
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è userId={}: {}", userId, e.getMessage());
            log.error("üìä –°—Ç–µ–∫-—Ç—Ä–µ–π—Å:", e);
        }
    }



    // ====================== –í–ê–® –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î ======================

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
     */
    @Transactional
    public void updateOnlineStatus(Long userId, boolean isOnline, String clientInfo) {
        try {
            LocalDateTime now = LocalDateTime.now();

            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            int updatedRows = onlineStatusRepository.updateOnlineStatus(userId, isOnline, now);

            if (updatedRows == 0) {
                // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                User user = userRepository.findById(userId)
                        .orElseThrow(() -> new UsernameNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + userId));

                UserOnlineStatus status = UserOnlineStatus.builder()
                        .userId(userId)
                        .user(user)
                        .isOnline(isOnline)
                        .lastSeen(now)
                        .deviceType(parseDeviceType(clientInfo))
                        .lastIp(parseIpFromClientInfo(clientInfo))
                        .userAgent(parseUserAgentFromClientInfo(clientInfo))
                        .build();

                onlineStatusRepository.save(status);
                log.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, isOnline);
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                if (clientInfo != null) {
                    onlineStatusRepository.updateDeviceInfo(
                            userId,
                            parseDeviceType(clientInfo),
                            parseIpFromClientInfo(clientInfo),
                            parseUserAgentFromClientInfo(clientInfo)
                    );
                }
                log.debug("–û–±–Ω–æ–≤–ª–µ–Ω –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, isOnline);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
     */
    @Transactional
    public void updateLastSeen(Long userId) {
        try {
            LocalDateTime now = LocalDateTime.now();
            int updatedRows = onlineStatusRepository.updateLastSeen(userId, now);

            if (updatedRows > 0) {
                log.debug("–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    userId, e.getMessage());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    @Transactional(readOnly = true)
    public boolean isUserOnline(Long userId) {
        return onlineStatusRepository.findByUserId(userId)
                .map(status -> Boolean.TRUE.equals(status.getIsOnline()))
                .orElse(false);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
     */
    @Transactional(readOnly = true)
    public LocalDateTime getLastSeen(Long userId) {
        return onlineStatusRepository.findByUserId(userId)
                .map(UserOnlineStatus::getLastSeen)
                .orElse(null);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @Transactional(readOnly = true)
    public Long getOnlineUsersCount() {
        return onlineStatusRepository.countOnlineUsers();
    }

    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω
     */
    @Transactional
    public int markInactiveUsersOffline(int minutesInactive) {
        LocalDateTime cutoffTime = LocalDateTime.now().minusMinutes(minutesInactive);
        int updatedCount = onlineStatusRepository.markInactiveUsersOffline(cutoffTime);

        if (updatedCount > 0) {
            log.info("–û—Ç–º–µ—á–µ–Ω–æ {} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω", updatedCount);
        }

        return updatedCount;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö ID
     */
    @Transactional(readOnly = true)
    public List<UserOnlineStatus> getUsersOnlineStatus(List<Long> userIds) {
        return onlineStatusRepository.findByUserIds(userIds);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @Transactional(readOnly = true)
    public Long getRecentlyActiveUsersCount(int minutesAgo) {
        LocalDateTime cutoffTime = LocalDateTime.now().minusMinutes(minutesAgo);
        return onlineStatusRepository.countRecentlyActiveUsers(cutoffTime);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    @Transactional
    public int cleanupOldStatusRecords(int daysOld) {
        LocalDateTime cutoffTime = LocalDateTime.now().minusDays(daysOld);
        int deletedCount = onlineStatusRepository.deleteOldStatusRecords(cutoffTime);

        if (deletedCount > 0) {
            log.info("–£–¥–∞–ª–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç—É—Å–∞ (—Å—Ç–∞—Ä—à–µ {} –¥–Ω–µ–π)", deletedCount, daysOld);
        }

        return deletedCount;
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    @Transactional
    public int fixInconsistentStatuses() {
        int fixedCount = 0;

        try {
            LocalDateTime inconsistencyThreshold = LocalDateTime.now().minusHours(1);
            int inconsistentCount = onlineStatusRepository.fixInconsistentOnlineStatuses(inconsistencyThreshold);
            fixedCount += inconsistentCount;

            if (inconsistentCount > 0) {
                log.warn("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–º", inconsistentCount);
            }

            int nullFixCount = onlineStatusRepository.fixNullStatuses();
            fixedCount += nullFixCount;

            if (nullFixCount > 0) {
                log.warn("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π —Å null –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", nullFixCount);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: {}", e.getMessage(), e);
        }

        return fixedCount;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω
     */
    @Transactional
    public int forceAllUsersOffline() {
        try {
            LocalDateTime now = LocalDateTime.now();
            int updatedCount = onlineStatusRepository.forceAllUsersOffline(now);

            if (updatedCount > 0) {
                log.info("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({}) –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ", updatedCount);
            }

            return updatedCount;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ñ–ª–∞–π–Ω: {}", e.getMessage(), e);
            return 0;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
     */
    @Transactional(readOnly = true)
    public List<Object[]> getDeviceTypeStatistics() {
        return onlineStatusRepository.getDeviceTypeStatistics();
    }

    // ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ======================

    private String parseDeviceType(String clientInfo) {
        if (clientInfo == null) return "WEB";

        String lowerInfo = clientInfo.toLowerCase();
        if (lowerInfo.contains("mobile") || lowerInfo.contains("android") || lowerInfo.contains("iphone")) {
            return "MOBILE";
        } else if (lowerInfo.contains("desktop") || lowerInfo.contains("electron")) {
            return "DESKTOP";
        }
        return "WEB";
    }

    private String parseIpFromClientInfo(String clientInfo) {
        if (clientInfo == null) return null;

        if (clientInfo.contains("IP: ")) {
            String ip = clientInfo.substring(clientInfo.indexOf("IP: ") + 4);
            if (ip.contains(",")) {
                ip = ip.substring(0, ip.indexOf(","));
            }
            return ip.length() > 45 ? ip.substring(0, 45) : ip;
        }
        return null;
    }

    private String parseUserAgentFromClientInfo(String clientInfo) {
        if (clientInfo == null) return null;

        if (clientInfo.contains("UserAgent: ")) {
            String userAgent = clientInfo.substring(clientInfo.indexOf("UserAgent: ") + 11);
            if (userAgent.contains(",")) {
                userAgent = userAgent.substring(0, userAgent.indexOf(","));
            }
            return userAgent.length() > 500 ? userAgent.substring(0, 500) : userAgent;
        }
        return null;
    }
}