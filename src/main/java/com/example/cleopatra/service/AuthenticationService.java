
package com.example.cleopatra.service;
import com.example.cleopatra.model.User;
import com.example.cleopatra.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Optional;
//
//@Service
//@Slf4j
//@RequiredArgsConstructor
//public class AuthenticationService implements UserDetailsService {
//
//    private final UserRepository userRepository;
//    private final PasswordEncoder passwordEncoder;
//
//    @Override
//    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
//        User user = userRepository.findByEmail(email)
//                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + email));
//
//        if (user.getPassword() == null || user.getPassword().isEmpty()) {
//            log.error("User {} has empty password", email);
//            throw new IllegalStateException("User has no password set");
//        }
//
//        return org.springframework.security.core.userdetails.User.builder()
//                .username(user.getEmail())
//                .password(user.getPassword())
//                .authorities("ROLE_" + user.getRole().name())
//                .build();
//    }
//
//    public Optional<User> authenticate(String email, String password) {
//        log.info("üîç === AuthenticationService.authenticate() ===");
//        log.info("üîç Email: {}", email);
//
//        try {
//            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//            log.info("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î");
//            Optional<User> userOpt = userRepository.findByEmail(email);
//
//            if (userOpt.isEmpty()) {
//
//                return Optional.empty();
//            }
//
//            User user = userOpt.get();
//
//            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
//            log.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è");
//            if (passwordEncoder.matches(password, user.getPassword())) {
//                log.info("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π");
//                return Optional.of(user);
//            } else {
//                log.warn("üîí –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è email: {}", email);
//                return Optional.empty();
//            }
//
//        } catch (Exception e) {
//            log.error("‚ùå –û–®–ò–ë–ö–ê –≤ authenticate(): {}", e.getMessage(), e);
//            throw new RuntimeException("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + e.getMessage(), e);
//        }
//    }
//}


@Service
@Slf4j
@RequiredArgsConstructor
public class AuthenticationService implements UserDetailsService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + email));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (Boolean.TRUE.equals(user.isBlocked())) {
            log.warn("üö´ Blocked user {} attempted to login", email);
            throw new UsernameNotFoundException("User account is blocked");
        }

        if (user.getPassword() == null || user.getPassword().isEmpty()) {
            log.error("User {} has empty password", email);
            throw new IllegalStateException("User has no password set");
        }

        return org.springframework.security.core.userdetails.User.builder()
                .username(user.getEmail())
                .password(user.getPassword())
                .authorities("ROLE_" + user.getRole().name())
                .build();
    }
    public Optional<User> authenticate(String email, String password) {
        log.info("üîç === AuthenticationService.authenticate() ===");
        log.info("üîç Email: {}", email);

        try {
            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            log.info("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î");
            Optional<User> userOpt = userRepository.findByEmail(email);

            if (userOpt.isEmpty()) {
                log.info("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {} –Ω–µ –Ω–∞–π–¥–µ–Ω", email);
                return Optional.empty();
            }

            User user = userOpt.get();
            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={}, Email={}", user.getId(), user.getEmail());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (user.isBlocked()) {  // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å boolean, –Ω–µ Boolean
                log.warn("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏", email);
                return Optional.empty();
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
            log.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è");
            if (passwordEncoder.matches(password, user.getPassword())) {
                log.info("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", email);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                updateLastActivity(user);

                return Optional.of(user);
            } else {
                log.warn("üîí –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è email: {}", email);
                return Optional.empty();
            }

        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –≤ authenticate(): {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + e.getMessage(), e);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
     */
    private void updateLastActivity(User user) {
        try {
            LocalDateTime now = LocalDateTime.now();
            user.setLastActivity(now);
            user.setIsOnline(true);
            userRepository.save(user);
            log.info("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user.getEmail());
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {}", e.getMessage());
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑-–∑–∞ —ç—Ç–æ–π –æ—à–∏–±–∫–∏
        }
    }
}