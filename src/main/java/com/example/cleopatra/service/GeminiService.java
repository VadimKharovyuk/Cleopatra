package com.example.cleopatra.service;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.google.gson.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class GeminiService {

    private static final Logger logger = LoggerFactory.getLogger(GeminiService.class);

    @Value("${gemini.api.key}")
    private String apiKey;

    @Value("${gemini.api.base-url}")
    private String baseUrl;

    @Value("${gemini.api.model}")
    private String model;

    @Value("${gemini.api.action}")
    private String action;

    private boolean isApiKeyValid = false;
    private String fullEndpoint;

    @PostConstruct
    public void init() {
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GeminiService...");
        buildEndpoint();
        validateApiKey();
        testApiConnection();
    }

    private void buildEndpoint() {
        fullEndpoint = String.format("%s/%s:%s", baseUrl, model, action);
        logger.info("üîß –ü–æ—Å—Ç—Ä–æ–µ–Ω endpoint: {}", fullEndpoint);
    }

    private void validateApiKey() {
        if (apiKey == null || apiKey.trim().isEmpty()) {
            logger.error("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
            return;
        }

        if (apiKey.equals("${gemini.api.key}") || apiKey.equals("${GEMINI_API_KEY}")) {
            logger.error("‚ùå API –∫–ª—é—á –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏! –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {}", apiKey);
            return;
        }

        if (apiKey.length() < 30) {
            logger.warn("‚ö†Ô∏è API –∫–ª—é—á –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º. –î–ª–∏–Ω–∞: {} —Å–∏–º–≤–æ–ª–æ–≤", apiKey.length());
        }

        if (!apiKey.startsWith("AIza")) {
            logger.warn("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É Google API (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'AIza')");
        }

        logger.info("‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ. –î–ª–∏–Ω–∞: {} —Å–∏–º–≤–æ–ª–æ–≤", apiKey.length());
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å: {}", model);
        logger.info("‚úÖ Endpoint: {}", fullEndpoint);
        isApiKeyValid = true;
    }

    private void testApiConnection() {
        if (!isApiKeyValid) {
            logger.error("‚ùå –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
            return;
        }

        try {
            logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Gemini API ({})...", model);
            String testResponse = generateContent("–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.");

            if (testResponse != null && !testResponse.contains("–û—à–∏–±–∫–∞")) {
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API —É—Å–ø–µ—à–Ω–æ! –ú–æ–¥–µ–ª—å: {} | –û—Ç–≤–µ—Ç: {}",
                        model, testResponse.length() > 50 ? testResponse.substring(0, 50) + "..." : testResponse);
            } else {
                logger.error("‚ùå –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª. –û—Ç–≤–µ—Ç: {}", testResponse);
            }

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", e.getMessage());

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if (e.getMessage().contains("401")) {
                logger.error("üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞");
            } else if (e.getMessage().contains("403")) {
                logger.error("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ API –∫–ª—é—á –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞");
            } else if (e.getMessage().contains("404")) {
                logger.error("üîç Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–¥–µ–ª—å: {}", model);
            } else if (e.getMessage().contains("timeout")) {
                logger.error("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
            }
        }
    }

    public boolean isServiceReady() {
        return isApiKeyValid;
    }

    public String getServiceStatus() {
        if (!isApiKeyValid) {
            return "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤ - –ø—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º";
        }
        return String.format("‚úÖ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–º–æ–¥–µ–ª—å: %s)", model);
    }

    public String getModelInfo() {
        return String.format("–ú–æ–¥–µ–ª—å: %s | Endpoint: %s", model, fullEndpoint);
    }

    public String generateContent(String prompt) throws Exception {
        if (!isApiKeyValid) {
            throw new IllegalStateException("API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.");
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL —Å API –∫–ª—é—á–æ–º
        String requestUrl = fullEndpoint + "?key=" + apiKey;

        logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API —Å –ø—Ä–æ–º–ø—Ç–æ–º: {}",
                prompt.length() > 100 ? prompt.substring(0, 100) + "..." : prompt);

        // –°–æ–∑–¥–∞–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞
        JsonObject content = new JsonObject();
        JsonObject parts = new JsonObject();
        parts.addProperty("text", prompt);
        JsonArray partsArray = new JsonArray();
        partsArray.add(parts);

        JsonObject contents = new JsonObject();
        contents.add("parts", partsArray);

        JsonArray contentsArray = new JsonArray();
        contentsArray.add(contents);

        JsonObject requestBody = new JsonObject();
        requestBody.add("contents", contentsArray);

        // –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(requestUrl))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                .build();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        HttpClient client = HttpClient.newHttpClient();
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        logger.debug("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {}", response.statusCode());

        if (response.statusCode() == 200) {
            String result = parseResponse(response.body());
            logger.debug("–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–≤–µ—Ç. –î–ª–∏–Ω–∞: {} —Å–∏–º–≤–æ–ª–æ–≤", result.length());
            return result;
        } else {
            String errorMsg = String.format("API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è. –°—Ç–∞—Ç—É—Å: %d, –û—Ç–≤–µ—Ç: %s",
                    response.statusCode(), response.body());
            logger.error(errorMsg);
            throw new RuntimeException(errorMsg);
        }
    }

    private String parseResponse(String jsonResponse) {
        try {
            Gson gson = new Gson();
            JsonObject responseObj = gson.fromJson(jsonResponse, JsonObject.class);

            JsonArray candidates = responseObj.getAsJsonArray("candidates");
            if (candidates != null && candidates.size() > 0) {
                JsonObject candidate = candidates.get(0).getAsJsonObject();
                JsonObject content = candidate.getAsJsonObject("content");
                JsonArray parts = content.getAsJsonArray("parts");
                if (parts != null && parts.size() > 0) {
                    JsonObject part = parts.get(0).getAsJsonObject();
                    return part.get("text").getAsString();
                }
            }

            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini API";
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: {}", e.getMessage());
            return "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: " + e.getMessage();
        }
    }
}