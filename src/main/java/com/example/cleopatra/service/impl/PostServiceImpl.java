package com.example.cleopatra.service.impl;

import com.example.cleopatra.ExistsException.PostNotFoundException;
import com.example.cleopatra.dto.Post.PostCreateDto;
import com.example.cleopatra.dto.Post.PostListDto;
import com.example.cleopatra.dto.Post.PostResponseDto;
import com.example.cleopatra.dto.user.UserResponse;
import com.example.cleopatra.maper.PostMapper;
import com.example.cleopatra.model.Post;
import com.example.cleopatra.model.User;
import com.example.cleopatra.repository.PostRepository;
import com.example.cleopatra.repository.UserRepository;
import com.example.cleopatra.service.*;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;


@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class PostServiceImpl implements PostService {

    private final PostRepository postRepository;
    private final UserService userService;
    private final StorageService storageService;
    private final ImageValidator imageValidator;
    private final PostMapper postMapper;
    private final UserRepository userRepository;
    private final SubscriptionService subscriptionService;

    @Override
    public PostResponseDto createPost(PostCreateDto postCreateDto) {
        log.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞");

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User currentUser = getCurrentUser();

        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ –º–∞–ø–ø–µ—Ä
        Post post = postMapper.toEntity(postCreateDto, currentUser);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (postCreateDto.getImage() != null && !postCreateDto.getImage().isEmpty()) {
            try {
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                ImageConverterService.ProcessedImage processedImage =
                        imageValidator.validateAndProcess(postCreateDto.getImage());

                // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                StorageService.StorageResult storageResult =
                        storageService.uploadProcessedImage(processedImage);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –∏ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                post.setImageUrl(storageResult.getUrl());
                post.setImgId(storageResult.getImageId());

                log.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {}", storageResult.getImageId());

            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage());
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + e.getMessage());
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
        Post savedPost = postRepository.save(post);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userRepository.save(currentUser);

        log.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {}", savedPost.getId());

        return postMapper.toResponseDto(savedPost);
    }

    @Override
    public PostResponseDto getPostById(Long id) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å ID: {}", id);

        Post post = postRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("–ü–æ—Å—Ç —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        post.setViewsCount(post.getViewsCount() + 1);
        postRepository.save(post);

        log.info("–ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω: {}", post.getContent().substring(0, Math.min(50, post.getContent().length())));

        return postMapper.toResponseDto(post);
    }

    @Override
    public PostListDto getUserPosts(Long userId, int page, int size) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}, —Ä–∞–∑–º–µ—Ä: {}", userId, page, size);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!userService.userExists(userId)) {
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        // –°–æ–∑–¥–∞–µ–º Pageable –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã–µ)
        Slice<Post> postSlice = postRepository.findByAuthor_IdAndIsDeletedFalse(userId, pageable);

        log.info("–ù–∞–π–¥–µ–Ω–æ {} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", postSlice.getNumberOfElements(), userId);

        return postMapper.toListDtoFromSlice(postSlice);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Override
    public PostListDto getMyPosts(int page, int size) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}, —Ä–∞–∑–º–µ—Ä: {}", page, size);
        User currentUser = getCurrentUser();
        return getUserPosts(currentUser.getId(), page, size);
    }

    @Override
    public PostListDto getFeedPosts(Long userId, int page, int size) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}, —Ä–∞–∑–º–µ—Ä: {}", userId, page, size);

        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        List<Long> subscriptionIds = subscriptionService.getSubscriptionIds(userId);

        if (subscriptionIds.isEmpty()) {
            log.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", userId);
            return getRecommendedPosts(userId, page, size);
        }

        // –°–æ–∑–¥–∞–µ–º Pageable —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
        Slice<Post> postSlice = postRepository.findByAuthor_IdInAndIsDeletedFalse(subscriptionIds, pageable);

        log.info("–ù–∞–π–¥–µ–Ω–æ {} –ø–æ—Å—Ç–æ–≤ –≤ –ª–µ–Ω—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", postSlice.getNumberOfElements(), userId);

        return postMapper.toListDtoFromSlice(postSlice);
    }

    @Override
    public PostListDto getRecommendedPosts(Long userId, int page, int size) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);

        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É)
        Slice<Post> postSlice = postRepository.findByIsDeletedFalseOrderByLikesCountDescCreatedAtDesc(pageable);

        return postMapper.toListDtoFromSlice(postSlice);
    }

    @Override
    @Transactional
    public void deletePost(Long postId) {
        Post post = findById(postId);
        Long userId = post.getAuthor().getId();

        log.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", postId, userId);

        // –õ–æ–≥–∏—Ä—É–µ–º –î–û —É–¥–∞–ª–µ–Ω–∏—è
        Long countBefore = postRepository.countByAuthorId(userId);
        log.info("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –î–û —É–¥–∞–ª–µ–Ω–∏—è: {}", countBefore);

        postRepository.deleteById(postId);

        // –õ–æ–≥–∏—Ä—É–µ–º –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è
        Long countAfter = postRepository.countByAuthorId(userId);
        log.info("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è: {}", countAfter);
    }

    @Override
    public Post findById(Long postId) {
        return postRepository.findById(postId)
                .orElseThrow(() -> new PostNotFoundException("–ü–æ—Å—Ç —Å ID " + postId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    private User getCurrentUser() {
        return userService.getCurrentUserEntity();
    }
}
