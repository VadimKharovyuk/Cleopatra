package com.example.cleopatra.service.impl;

import com.example.cleopatra.ExistsException.PostNotFoundException;
import com.example.cleopatra.dto.Post.*;
import com.example.cleopatra.dto.user.UserResponse;
import com.example.cleopatra.maper.PostMapper;
import com.example.cleopatra.model.Post;
import com.example.cleopatra.model.User;
import com.example.cleopatra.repository.CommentRepository;
import com.example.cleopatra.repository.PostRepository;
import com.example.cleopatra.repository.UserRepository;
import com.example.cleopatra.service.*;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class PostServiceImpl implements PostService {

    private final PostRepository postRepository;
    private final UserService userService;
    private final StorageService storageService;
    private final ImageValidator imageValidator;
    private final PostMapper postMapper;
    private final UserRepository userRepository;
    private final SubscriptionService subscriptionService;
    private final PostLikeService postLikeService;
    private final CommentService commentService;

    @Override
    public PostResponseDto createPost(PostCreateDto postCreateDto) {
        log.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞");

        User currentUser = getCurrentUser();
        Post post = postMapper.toEntity(postCreateDto, currentUser);

        if (postCreateDto.getImage() != null && !postCreateDto.getImage().isEmpty()) {
            try {
                ImageConverterService.ProcessedImage processedImage =
                        imageValidator.validateAndProcess(postCreateDto.getImage());

                StorageService.StorageResult storageResult =
                        storageService.uploadProcessedImage(processedImage);

                post.setImageUrl(storageResult.getUrl());
                post.setImgId(storageResult.getImageId());

                log.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {}", storageResult.getImageId());

            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage());
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + e.getMessage());
            }
        }

        Post savedPost = postRepository.save(post);
        userRepository.save(currentUser);

        log.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {}", savedPost.getId());

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í —Å –ª–æ–≥–∏–∫–æ–π –ª–∞–π–∫–æ–≤
        Boolean isLiked = postLikeService.isPostLikedByUser(savedPost, currentUser.getId());
        List<PostResponseDto.LikeUserDto> recentLikes =
                postLikeService.getRecentLikes(savedPost, 5);

        return postMapper.toResponseDto(savedPost, isLiked, recentLikes);
    }

    @Override
    public PostResponseDto getPostById(Long id) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å ID: {}", id);

        Post post = postRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("–ü–æ—Å—Ç —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        post.setViewsCount(post.getViewsCount() + 1);
        postRepository.save(post);

        Long commentsCount = commentService.getCommentsCount(post.getId());
        post.setCommentsCount(commentsCount);

        User currentUser = getCurrentUser();

        log.info("–ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω: {}", post.getContent().substring(0, Math.min(50, post.getContent().length())));

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í —Å –ª–æ–≥–∏–∫–æ–π –ª–∞–π–∫–æ–≤
        Boolean isLiked = postLikeService.isPostLikedByUser(post, currentUser.getId());
        List<PostResponseDto.LikeUserDto> recentLikes =
                postLikeService.getRecentLikes(post, 5);

        return postMapper.toResponseDto(post, isLiked, recentLikes);
    }

    @Override
    public PostListDto getUserPosts(Long userId, int page, int size) {
//        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}, —Ä–∞–∑–º–µ—Ä: {}", userId, page, size);

        if (!userService.userExists(userId)) {
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        Slice<Post> postSlice = postRepository.findByAuthor_IdAndIsDeletedFalse(userId, pageable);

//        log.info("–ù–∞–π–¥–µ–Ω–æ {} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", postSlice.getNumberOfElements(), userId);

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î —Å –ª–æ–≥–∏–∫–æ–π –ª–∞–π–∫–æ–≤
        return convertPostSliceToListDto(postSlice, page);
    }

    @Override
    public PostListDto getMyPosts(int page, int size) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}, —Ä–∞–∑–º–µ—Ä: {}", page, size);
        User currentUser = getCurrentUser();
        return getUserPosts(currentUser.getId(), page, size);
    }

    @Override
    public PostListDto getFeedPosts(Long userId, int page, int size) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}, —Ä–∞–∑–º–µ—Ä: {}", userId, page, size);

        List<Long> subscriptionIds = subscriptionService.getSubscriptionIds(userId);

        if (subscriptionIds.isEmpty()) {
            log.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", userId);
            return getRecommendedPosts(userId, page, size);
        }

        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        Slice<Post> postSlice = postRepository.findByAuthor_IdInAndIsDeletedFalse(subscriptionIds, pageable);

        log.info("–ù–∞–π–¥–µ–Ω–æ {} –ø–æ—Å—Ç–æ–≤ –≤ –ª–µ–Ω—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", postSlice.getNumberOfElements(), userId);

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î —Å –ª–æ–≥–∏–∫–æ–π –ª–∞–π–∫–æ–≤
        return convertPostSliceToListDto(postSlice, page);
    }

    @Override
    public PostListDto getRecommendedPosts(Long userId, int page, int size) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);

        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        Slice<Post> postSlice = postRepository.findByIsDeletedFalseOrderByLikesCountDescCreatedAtDesc(pageable);

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î —Å –ª–æ–≥–∏–∫–æ–π –ª–∞–π–∫–æ–≤
        return convertPostSliceToListDto(postSlice, page);
    }

    // ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∞–π–∫–∞–º–∏

    /**
     * –õ–∞–π–∫–Ω—É—Ç—å/—É–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å –ø–æ—Å—Ç–∞
     */
    @Override
    public PostLikeResponseDto toggleLike(Long postId) {
        User currentUser = getCurrentUser();
        return postLikeService.toggleLike(postId, currentUser.getId());
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–π–∫–∞—Ö –ø–æ—Å—Ç–∞
     */
    @Override
    public PostLikeInfoDto getLikeInfo(Long postId) {
        User currentUser = getCurrentUser();
        Post post = findById(postId);

        Boolean isLiked = postLikeService.isPostLikedByUser(post, currentUser.getId());
        List<PostResponseDto.LikeUserDto> recentLikes =
                postLikeService.getRecentLikes(post, 10);

        return PostLikeInfoDto.builder()
                .postId(postId)
                .likesCount(post.getLikesCount())
                .isLikedByCurrentUser(isLiked)
                .recentLikes(recentLikes)
                .build();
    }

    // ‚úÖ –ü–†–ò–í–ê–¢–ù–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Slice<Post> –≤ PostListDto —Å –ª–æ–≥–∏–∫–æ–π –ª–∞–π–∫–æ–≤
     */
    private PostListDto convertPostSliceToListDto(Slice<Post> postSlice, int page) {
        User currentUser = getCurrentUser();

        List<PostCardDto> postCards = postSlice.getContent().stream()
                .map(post -> {
                    Boolean isLiked = postLikeService.isPostLikedByUser(post, currentUser.getId());
                    List<PostCardDto.LikeUserDto> recentLikes =
                            postLikeService.getRecentLikesForCard(post, 3);

                    return postMapper.toCardDto(post, isLiked, recentLikes);
                })
                .collect(Collectors.toList());

        return postMapper.toListDto(
                postCards,
                page,
                postSlice.hasNext(),
                postSlice.getSize()
        );
    }

    @Override
    @Transactional
    public void deletePost(Long postId) {
        Post post = findById(postId);
        Long userId = post.getAuthor().getId();

        log.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", postId, userId);

        Long countBefore = postRepository.countByAuthorId(userId);
        log.info("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –î–û —É–¥–∞–ª–µ–Ω–∏—è: {}", countBefore);

        postRepository.deleteById(postId);


        Long countAfter = postRepository.countByAuthorId(userId);
        log.info("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è: {}", countAfter);
    }

    @Override
    public Post findById(Long postId) {
        return postRepository.findById(postId)
                .orElseThrow(() -> new PostNotFoundException("–ü–æ—Å—Ç —Å ID " + postId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    private User getCurrentUser() {
        return userService.getCurrentUserEntity();
    }
}