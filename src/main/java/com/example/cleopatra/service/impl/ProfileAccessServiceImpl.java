package com.example.cleopatra.service.impl;

import com.example.cleopatra.enums.ProfileAccessLevel;
import com.example.cleopatra.enums.Role;
import com.example.cleopatra.model.User;
import com.example.cleopatra.repository.UserRepository;
import com.example.cleopatra.service.ProfileAccessService;
import com.example.cleopatra.service.SubscriptionService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
@Slf4j
@RequiredArgsConstructor
public class ProfileAccessServiceImpl implements ProfileAccessService {

    private final UserRepository userRepository;
    private final SubscriptionService subscriptionService;
    @Override
    public boolean canViewProfile(Long viewerId, Long profileOwnerId) {
        log.info("üîí canViewProfile: viewerId={}, profileOwnerId={}", viewerId, profileOwnerId);

        ProfileAccessLevel accessLevel = getProfileAccessLevel(profileOwnerId);
        log.info("üîí –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è: {}", accessLevel);

        boolean result = checkAccess(viewerId, profileOwnerId, accessLevel);
        log.info("üîí –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {}", result);

        return result;
    }

    @Override
    public boolean canViewProfileSection(Long viewerId, Long profileOwnerId, String section) {
        // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
        if (!canViewProfile(viewerId, profileOwnerId)) {
            return false;
        }

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        return switch (section.toLowerCase()) {
            case "photos" -> canViewProfile(viewerId, profileOwnerId);
            case "posts" -> canViewProfile(viewerId, profileOwnerId);
            case "personal_info" -> canViewProfile(viewerId, profileOwnerId);
            default -> canViewProfile(viewerId, profileOwnerId);
        };
    }

    @Override
    public String getAccessDeniedMessage(Long viewerId, Long profileOwnerId) {
        Optional<User> profileOwnerOpt = userRepository.findById(profileOwnerId);
        if (profileOwnerOpt.isEmpty()) {
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        }

        User profileOwner = profileOwnerOpt.get();

        if (profileOwner.getBlockedAt() == null) {
            return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        }

        ProfileAccessLevel accessLevel = profileOwner.getProfileAccessLevel();

        return switch (accessLevel) {
            case SUBSCRIBERS_ONLY -> "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å";
            case MUTUAL_SUBSCRIPTIONS -> "–≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ";
            case PRIVATE -> "–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞";
            default -> "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω";
        };
    }

    @Override
    public boolean canChangeAccessLevel(Long userId, Long profileOwnerId) {
        return userId != null &&
                (userId.equals(profileOwnerId) || isAdmin(userId));
    }

    @Override
    @Transactional
    public boolean updateProfileAccessLevel(Long userId, Long profileOwnerId, ProfileAccessLevel newAccessLevel) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if (!canChangeAccessLevel(userId, profileOwnerId)) {
            log.warn("User {} tried to change access level for profile {}, but has no permission",
                    userId, profileOwnerId);
            return false;
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Optional<User> userOpt = userRepository.findById(profileOwnerId);
        if (userOpt.isEmpty()) {
            log.error("Profile owner {} not found", profileOwnerId);
            return false;
        }

        User user = userOpt.get();
        ProfileAccessLevel oldLevel = user.getProfileAccessLevel();

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        user.setProfileAccessLevel(newAccessLevel);
        userRepository.save(user);

        log.info("Profile access level changed for user {}: {} -> {} by user {}",
                profileOwnerId, oldLevel, newAccessLevel, userId);

        return true;
    }

    @Override
    public ProfileAccessLevel getProfileAccessLevel(Long profileOwnerId) {
        return userRepository.findById(profileOwnerId)
                .map(User::getProfileAccessLevel)
                .orElse(ProfileAccessLevel.PUBLIC); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É–±–ª–∏—á–Ω—ã–π
    }

    @Override
    public boolean isSubscribedTo(Long subscriberId, Long subscribedToId) {
        return subscriptionService.isSubscribed(subscriberId, subscribedToId);
    }

    @Override
    public void logAccessAttempt(Long viewerId, Long profileOwnerId, boolean accessGranted) {
        if (!accessGranted) {
            log.info("Access denied: User {} tried to access profile of user {}",
                    viewerId != null ? viewerId : "anonymous",
                    profileOwnerId);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     */
    private boolean isAdmin(Long userId) {
        return userRepository.findById(userId)
                .map(user -> user.getRole() == Role.ADMIN)
                .orElse(false);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    private boolean isBlocked(Long userId) {
        return userRepository.findById(userId)
                .map(User::isBlocked)  // –ë—ã–ª–æ User::getIsBlocked
                .orElse(false);
    }

    private boolean checkAccess(Long viewerId, Long profileOwnerId, ProfileAccessLevel accessLevel) {
        log.info("üîç checkAccess: viewerId={}, profileOwnerId={}, accessLevel={}",
                viewerId, profileOwnerId, accessLevel);

        // –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è
        Optional<User> profileOwnerOpt = userRepository.findById(profileOwnerId);
        if (profileOwnerOpt.isEmpty()) {
            log.warn("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω", profileOwnerId);
            return false;
        }

        User profileOwner = profileOwnerOpt.get();

        // –ü—Ä–æ—Ñ–∏–ª—å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–∞–º–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
        if (viewerId != null && viewerId.equals(profileOwnerId)) {
            log.info("üîç –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å");
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if (profileOwner.isBlocked()) {
            log.warn("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π", profileOwnerId);
            boolean isAdminAccess = viewerId != null && isAdmin(viewerId);
            log.info("üîç –î–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∞: {}", isAdminAccess);
            return isAdminAccess;
        }

        // Admin –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–æ—Ñ–∏–ª—è–º
        if (viewerId != null && isAdmin(viewerId)) {
            log.info("üîç –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä");
            return true;
        }

        // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏
        if (viewerId != null && isBlocked(viewerId)) {
            log.warn("üîç –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", viewerId);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        boolean result = switch (accessLevel) {
            case PUBLIC -> {
                log.info("üîç PUBLIC –ø—Ä–æ—Ñ–∏–ª—å - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω");
                yield true;
            }

            case SUBSCRIBERS_ONLY -> {
                boolean isSubscribed = viewerId != null &&
                        subscriptionService.isSubscribed(viewerId, profileOwnerId);
                log.info("üîç SUBSCRIBERS_ONLY: –ø–æ–¥–ø–∏—Å–∫–∞ {}={}", viewerId, isSubscribed);
                yield isSubscribed;
            }

            case MUTUAL_SUBSCRIPTIONS -> {
                boolean isSubscribed = viewerId != null &&
                        subscriptionService.isSubscribed(viewerId, profileOwnerId);
                boolean isMutual = viewerId != null &&
                        subscriptionService.isSubscribed(profileOwnerId, viewerId);
                log.info("üîç MUTUAL_SUBSCRIPTIONS: –ø–æ–¥–ø–∏—Å–∫–∞ {}={}, –≤–∑–∞–∏–º–Ω–∞—è {}",
                        viewerId, isSubscribed, isMutual);
                yield isSubscribed && isMutual;
            }

            case PRIVATE -> {
                log.info("üîç PRIVATE –ø—Ä–æ—Ñ–∏–ª—å - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");
                yield false;
            }
        };

        log.info("üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç checkAccess: {}", result);
        return result;
    }

    @Override
    @Transactional
    public boolean updatePhotosAccessLevel(Long userId, Long profileOwnerId, ProfileAccessLevel newAccessLevel) {
        if (!canChangeAccessLevel(userId, profileOwnerId)) {
            return false;
        }

        Optional<User> userOpt = userRepository.findById(profileOwnerId);
        if (userOpt.isEmpty()) {
            return false;
        }

        User user = userOpt.get();
        user.setPhotosAccessLevel(newAccessLevel);
        userRepository.save(user);

        log.info("Photos access level changed for user {}: {} by user {}",
                profileOwnerId, newAccessLevel, userId);
        return true;
    }

    @Override
    @Transactional
    public boolean updatePostsAccessLevel(Long userId, Long profileOwnerId, ProfileAccessLevel newAccessLevel) {
        if (!canChangeAccessLevel(userId, profileOwnerId)) {
            return false;
        }

        Optional<User> userOpt = userRepository.findById(profileOwnerId);
        if (userOpt.isEmpty()) {
            return false;
        }

        User user = userOpt.get();
        user.setPostsAccessLevel(newAccessLevel);
        userRepository.save(user);

        log.info("Posts access level changed for user {}: {} by user {}",
                profileOwnerId, newAccessLevel, userId);
        return true;
    }

    @Override
    public ProfileAccessLevel getPhotosAccessLevel(Long profileOwnerId) {
        return userRepository.findById(profileOwnerId)
                .map(User::getPhotosAccessLevel)
                .orElse(ProfileAccessLevel.PUBLIC);
    }

    @Override
    public ProfileAccessLevel getPostsAccessLevel(Long profileOwnerId) {
        return userRepository.findById(profileOwnerId)
                .map(User::getPostsAccessLevel)
                .orElse(ProfileAccessLevel.PUBLIC);
    }
}