package com.example.cleopatra.service.impl;

import com.example.cleopatra.EVENT.PostCommentEvent;
import com.example.cleopatra.ExistsException.CommentNotFoundException;
import com.example.cleopatra.ExistsException.PostNotFoundException;
import com.example.cleopatra.ExistsException.UnauthorizedException;
import com.example.cleopatra.dto.AICommentResponse;
import com.example.cleopatra.dto.Comment.*;
import com.example.cleopatra.dto.CreateCommentWithAIRequest;
import com.example.cleopatra.dto.ImproveCommentRequest;
import com.example.cleopatra.maper.CommentMapper;
import com.example.cleopatra.model.Comment;
import com.example.cleopatra.model.Post;
import com.example.cleopatra.model.User;
import com.example.cleopatra.repository.CommentRepository;
import com.example.cleopatra.repository.PostRepository;
import com.example.cleopatra.repository.UserRepository;
import com.example.cleopatra.service.CommentAIService;
import com.example.cleopatra.service.CommentService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class CommentServiceImpl implements CommentService {

    private final CommentRepository commentRepository;
    private final PostRepository postRepository;
    private final UserRepository userRepository;
    private final CommentMapper commentMapper;
    private final ApplicationEventPublisher eventPublisher;
    private final CommentAIService commentAIService;

    @Override
    public CommentPageResponse getCommentsByPost(Long postId, Pageable pageable) {
        log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ —Å ID: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}", postId, pageable.getPageNumber());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        if (!postRepository.existsById(postId)) {
            throw new PostNotFoundException("–ü–æ—Å—Ç —Å ID " + postId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        Slice<Comment> commentSlice = commentRepository.findByPostIdWithAuthor(postId, pageable);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        long totalComments = commentRepository.countByPostIdAndIsDeletedFalse(postId);

        return commentMapper.toCommentPageResponse(commentSlice, totalComments);
    }






    /**
     * ü§ñ –ù–û–í–´–ô: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é AI
     */
    @Override
    @Transactional
    public CommentResponse createCommentWithAI(Long postId, CreateCommentWithAIRequest request, String userEmail) {
        log.debug("–°–æ–∑–¥–∞–Ω–∏–µ AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {} —Å –ø—Ä–æ–º–ø—Ç–æ–º: {}",
                postId, userEmail, request.getPrompt());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–∞
        if (!commentAIService.isAIServiceAvailable()) {
            throw new RuntimeException("AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—Ä—É—á–Ω—É—é.");
        }

        long startTime = System.currentTimeMillis();

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç
        Post post = postRepository.findById(postId)
                .orElseThrow(() -> new PostNotFoundException("–ü–æ—Å—Ç —Å ID " + postId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User author = userRepository.findByEmail(userEmail)
                .orElseThrow(() -> new UsernameNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email " + userEmail + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø–æ–º–æ—â—å—é AI
            String generatedComment = commentAIService.generateComment(
                    buildPromptWithType(request), post);

            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            Comment comment = Comment.builder()
                    .content(generatedComment)
                    .post(post)
                    .author(author)
                    .isDeleted(false)
                    .build();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            Comment savedComment = commentRepository.save(comment);

            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            eventPublisher.publishEvent(new PostCommentEvent(
                    post.getId(),
                    post.getAuthor().getId(),
                    author.getId(),
                    savedComment.getId(),
                    generatedComment
            ));

            long endTime = System.currentTimeMillis();
            log.info("AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID {} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {} –∑–∞ {} –º—Å",
                    savedComment.getId(), userEmail, endTime - startTime);

            return commentMapper.toCommentResponse(savedComment);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {}", e.getMessage());
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø–æ–º–æ—â—å—é AI: " + e.getMessage());
        }
    }

    /**
     * ü§ñ –ù–û–í–´–ô: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
     */
    @Override
    public AICommentResponse generateCommentPreview(Long postId, CreateCommentWithAIRequest request) {
        log.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {} —Å –ø—Ä–æ–º–ø—Ç–æ–º: {}", postId, request.getPrompt());

        if (!commentAIService.isAIServiceAvailable()) {
            return AICommentResponse.builder()
                    .success(false)
                    .errorMessage("AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    .build();
        }

        long startTime = System.currentTimeMillis();

        try {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç
            Post post = postRepository.findById(postId)
                    .orElseThrow(() -> new PostNotFoundException("–ü–æ—Å—Ç —Å ID " + postId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            String generatedComment = commentAIService.generateComment(
                    buildPromptWithType(request), post);

            long endTime = System.currentTimeMillis();

            return AICommentResponse.builder()
                    .generatedComment(generatedComment)
                    .usedPrompt(request.getPrompt())
                    .generationTimeMs(endTime - startTime)
                    .success(true)
                    .additionalInfo("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–µ–≤—å—é. –ù–∞–∂–º–∏—Ç–µ '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
                    .build();

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {}", e.getMessage());
            return AICommentResponse.builder()
                    .success(false)
                    .errorMessage("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + e.getMessage())
                    .usedPrompt(request.getPrompt())
                    .build();
        }
    }

    /**
     * ü§ñ –ù–û–í–´–ô: –£–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
     */
    @Override
    public AICommentResponse improveComment(Long postId, ImproveCommentRequest request) {
        log.debug("–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {}", postId);

        if (!commentAIService.isAIServiceAvailable()) {
            return AICommentResponse.builder()
                    .success(false)
                    .errorMessage("AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    .build();
        }

        long startTime = System.currentTimeMillis();

        try {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç
            Post post = postRepository.findById(postId)
                    .orElseThrow(() -> new PostNotFoundException("–ü–æ—Å—Ç —Å ID " + postId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

            // –£–ª—É—á—à–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            String improvedComment = commentAIService.improveComment(
                    request.getOriginalComment(), post);

            long endTime = System.currentTimeMillis();

            return AICommentResponse.builder()
                    .generatedComment(improvedComment)
                    .usedPrompt("–£–ª—É—á—à–µ–Ω–∏–µ: " + request.getImprovementType().getDescription())
                    .generationTimeMs(endTime - startTime)
                    .success(true)
                    .additionalInfo("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–ª—É—á—à–µ–Ω —Å –ø–æ–º–æ—â—å—é AI")
                    .build();

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {}", e.getMessage());
            return AICommentResponse.builder()
                    .success(false)
                    .errorMessage("–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è: " + e.getMessage())
                    .generatedComment(request.getOriginalComment()) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                    .build();
        }
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
     */
    private String buildPromptWithType(CreateCommentWithAIRequest request) {
        StringBuilder prompt = new StringBuilder();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø—Ä–æ–º–ø—Ç—É
        switch (request.getCommentType()) {
            case QUESTION:
                prompt.append("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä—É –ø–æ—Å—Ç–∞: ");
                break;
            case POSITIVE:
                prompt.append("–ù–∞–ø–∏—à–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ");
                break;
            case CONSTRUCTIVE:
                prompt.append("–ù–∞–ø–∏—à–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∫—Ä–∏—Ç–∏–∫—É: ");
                break;
            case TECHNICAL:
                prompt.append("–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ");
                break;
            case CREATIVE:
                prompt.append("–ù–∞–ø–∏—à–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ");
                break;
            default:
                // –î–ª—è GENERAL –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                break;
        }

        prompt.append(request.getPrompt());

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (request.getAdditionalContext() != null && !request.getAdditionalContext().trim().isEmpty()) {
            prompt.append(". –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ").append(request.getAdditionalContext().trim());
        }

        return prompt.toString();
    }
    @Override
    @Transactional
    public CommentResponse createComment(Long postId, CreateCommentRequest request, String userEmail) {
        log.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", postId, userEmail);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç
        Post post = postRepository.findById(postId)
                .orElseThrow(() -> new PostNotFoundException("–ü–æ—Å—Ç —Å ID " + postId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User author = userRepository.findByEmail(userEmail)
                .orElseThrow(() -> new UsernameNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email " + userEmail + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        Comment comment = Comment.builder()
                .content(request.getContent().trim())
                .post(post)
                .author(author)
                .isDeleted(false)
                .build();



        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        Comment savedComment = commentRepository.save(comment);

        // ‚úÖ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        eventPublisher.publishEvent(new PostCommentEvent(
                post.getId(),                    // postId
                post.getAuthor().getId(),        // postAuthorId (–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
                author.getId(),                  // commenterUserId (–∫—Ç–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª)
                savedComment.getId(),            // commentId
                request.getContent().trim()      // commentText (–¥–ª—è –ø—Ä–µ–≤—å—é)
        ));

        log.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID {} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", savedComment.getId(), userEmail);

        return commentMapper.toCommentResponse(savedComment);
    }

    @Override
    @Transactional
    public CommentResponse updateComment(Long commentId, UpdateCommentRequest request, String userEmail) {
        log.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", commentId, userEmail);

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        Comment comment = commentRepository.findByIdAndIsDeletedFalse(commentId)
                .orElseThrow(() -> new CommentNotFoundException("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID " + commentId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!comment.getAuthor().getEmail().equals(userEmail)) {
            throw new UnauthorizedException("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        comment.setContent(request.getContent().trim());
        comment.setUpdatedAt(LocalDateTime.now());

        Comment updatedComment = commentRepository.save(comment);

        log.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID {} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", commentId);

        return commentMapper.toCommentResponse(updatedComment);
    }

    @Override
    @Transactional
    public CommentActionResponse deleteComment(Long commentId, String userEmail) {
        log.debug("–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", commentId, userEmail);

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        Comment comment = commentRepository.findByIdAndIsDeletedFalse(commentId)
                .orElseThrow(() -> new CommentNotFoundException("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID " + commentId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!comment.getAuthor().getEmail().equals(userEmail)) {
            throw new UnauthorizedException("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è");
        }

        // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        comment.setIsDeleted(true);
        comment.setUpdatedAt(LocalDateTime.now());

        commentRepository.save(comment);

        log.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", commentId);

        return CommentActionResponse.builder()
                .success(true)
                .message("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                .build();
    }

    @Override
    public CommentResponse getCommentById(Long commentId) {
        log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID: {}", commentId);

        Comment comment = commentRepository.findByIdAndIsDeletedFalse(commentId)
                .orElseThrow(() -> new CommentNotFoundException("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID " + commentId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        return commentMapper.toCommentResponse(comment);
    }

    @Override
    public CommentPageResponse getUserComments(Long userId, Pageable pageable) {
        log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", userId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!userRepository.existsById(userId)) {
            throw new UsernameNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        Slice<Comment> commentSlice = commentRepository.findByAuthorIdAndIsDeletedFalse(userId, pageable);

        // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–æ–∂–µ–º –Ω–µ —Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        long totalComments = 0L; // –ò–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥—Å—á–µ—Ç–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

        return commentMapper.toCommentPageResponse(commentSlice, totalComments);
    }

    @Override
    public List<CommentResponse> getLatestComments(Long postId, int limit) {
        log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ {} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {}", limit, postId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        if (!postRepository.existsById(postId)) {
            throw new PostNotFoundException("–ü–æ—Å—Ç —Å ID " + postId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        Pageable pageable = PageRequest.of(0, limit);
        List<Comment> comments = commentRepository.findTop3ByPostIdAndIsDeletedFalse(postId, pageable);

        return commentMapper.toCommentResponseList(comments);
    }

    @Override
    public long getCommentsCount(Long postId) {
        log.debug("–ü–æ–¥—Å—á–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {}", postId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        if (!postRepository.existsById(postId)) {
            throw new PostNotFoundException("–ü–æ—Å—Ç —Å ID " + postId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        return commentRepository.countByPostIdAndIsDeletedFalse(postId);
    }
}
