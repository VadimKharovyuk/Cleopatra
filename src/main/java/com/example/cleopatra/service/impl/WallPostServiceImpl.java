package com.example.cleopatra.service.impl;

import com.example.cleopatra.dto.WallPost.WallPostCardResponse;
import com.example.cleopatra.dto.WallPost.WallPostCreateRequest;
import com.example.cleopatra.dto.WallPost.WallPostPageResponse;
import com.example.cleopatra.maper.WallPostMapper;
import com.example.cleopatra.model.User;
import com.example.cleopatra.model.WallPost;
import com.example.cleopatra.repository.UserRepository;
import com.example.cleopatra.repository.WallPostRepository;
import com.example.cleopatra.service.ImageValidator;
import com.example.cleopatra.service.StorageService;
import com.example.cleopatra.service.SubscriptionService;
import com.example.cleopatra.service.WallPostService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.Sort;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.time.LocalDateTime;

@Service
@Transactional
@RequiredArgsConstructor
@Slf4j
public class WallPostServiceImpl implements WallPostService {

    private final WallPostRepository wallPostRepository;
    private final UserRepository userRepository;
    private final SubscriptionService subscriptionService;
    private final ImageValidator imageValidator;
    private final StorageService storageService;
    private final WallPostMapper wallPostMapper;

    @Override
    public WallPostCardResponse create(WallPostCreateRequest request, Long currentUserId) throws IOException {
        // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–µ–Ω–µ
        if (!canAccessWall(request.getWallOwnerId(), currentUserId)) {
            throw new AccessDeniedException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç–µ–Ω–µ");
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        User author = userRepository.findById(currentUserId)
                .orElseThrow(() -> new UsernameNotFoundException("–ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        User wallOwner = userRepository.findById(request.getWallOwnerId())
                .orElseThrow(() -> new UsernameNotFoundException("–í–ª–∞–¥–µ–ª–µ—Ü —Å—Ç–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        String imageUrl = null;
        String imageId = null;

        try {
            // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (request.getImage() != null && !request.getImage().isEmpty()) {
                var processedImage = imageValidator.validateAndProcess(request.getImage());
                var storageResult = storageService.uploadProcessedImage(processedImage);
                imageUrl = storageResult.getUrl();
                imageId = storageResult.getImageId();
            }

            WallPost wallPost = WallPost.builder()
                    .text(request.getText())
                    .picUrl(imageUrl)
                    .picId(imageId)
                    .author(author)
                    .wallOwner(wallOwner)
                    .likesCount(0L)
                    .commentsCount(0L)
                    .isEdited(false)
                    .build();

            WallPost savedPost = wallPostRepository.save(wallPost);
            log.info("–°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω–µ: ID={}, –∞–≤—Ç–æ—Ä={}, –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Ç–µ–Ω—ã={}",
                    savedPost.getId(), author.getId(), wallOwner.getId());

            return wallPostMapper.toCardResponse(savedPost, currentUserId);

        } catch (Exception e) {
            // 5. –û—Ç–∫–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (imageId != null) {
                try {
                    storageService.deleteImage(imageId);
                    log.info("–û—Ç–∫–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏", imageId);
                } catch (Exception deleteEx) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {}: {}",
                            imageId, deleteEx.getMessage());
                }
            }
            throw e;
        }
    }


    @Override
    @Transactional(readOnly = true)
    public WallPostPageResponse getWallPosts(Long wallOwnerId, Long currentUserId, int page, int size) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–µ–Ω–µ
        if (!canAccessWall(wallOwnerId, currentUserId)) {
            throw new AccessDeniedException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —ç—Ç–æ–π —Å—Ç–µ–Ω—ã");
        }

        // 2. –°–æ–∑–¥–∞–µ–º Pageable —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
        Pageable pageable = PageRequest.of(page, size,
                Sort.by(Sort.Direction.DESC, "createdAt"));

        // 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å—Ç–µ–Ω—ã
        Slice<WallPost> wallPostsSlice = wallPostRepository
                .findByWallOwnerId(wallOwnerId, pageable);

        // 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DTO
        var wallPostCards = wallPostsSlice.getContent()
                .stream()
                .map(post -> wallPostMapper.toCardResponse(post, currentUserId))
                .toList();

        return WallPostPageResponse.builder()
                .wallPosts(wallPostCards)
                .hasNext(wallPostsSlice.hasNext())
                .currentPage(page)
                .size(size)
                .isEmpty(wallPostCards.isEmpty())
                .numberOfElements(wallPostCards.size())
                .build();
    }

    @Override
    @Transactional(readOnly = true)
    public WallPostCardResponse getById(Long id, Long currentUserId) {
        WallPost wallPost = wallPostRepository.findByIdAndIsDeletedFalse(id)
                .orElseThrow(() -> new RuntimeException("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–µ–Ω–µ
        if (!canAccessWall(wallPost.getWallOwner().getId(), currentUserId)) {
            throw new AccessDeniedException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞");
        }

        return wallPostMapper.toCardResponse(wallPost, currentUserId);
    }

    // –í —Å–µ—Ä–≤–∏—Å–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥—ã:
    @Override
    public void delete(Long postId, Long currentUserId) {
        WallPost wallPost = wallPostRepository.findById(postId)
                .orElseThrow(() -> new RuntimeException("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        if (!canDeletePost(wallPost, currentUserId)) {
            throw new AccessDeniedException("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞");
        }

        wallPostRepository.delete(wallPost);


    }


    @Override
    public boolean canAccessWall(Long wallOwnerId, Long visitorId) {
        if (wallOwnerId.equals(visitorId)) {
            return true;
        }

        User wallOwner = userRepository.findById(wallOwnerId)
                .orElseThrow(() -> new UsernameNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // üîç –î–û–ë–ê–í–¨ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        log.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–µ–Ω–µ: wallOwnerId={}, visitorId={}", wallOwnerId, visitorId);
        log.info("Wall access level: {}", wallOwner.getWallAccessLevel());

        boolean isSubscribed = subscriptionService.isSubscribed(visitorId, wallOwnerId);
        log.info("Is subscribed: {}", isSubscribed);

        return switch (wallOwner.getWallAccessLevel()) {
            case PUBLIC -> {
                log.info("Wall is PUBLIC - access granted");
                yield true;
            }
            case FRIENDS -> {
                log.info("Wall is FRIENDS - checking subscription: {}", isSubscribed);
                yield isSubscribed;
            }
            case PRIVATE -> {
                log.info("Wall is PRIVATE - access denied");
                yield false;
            }
            default -> {
                log.info("Unknown wall access level - access denied");
                yield false;
            }
        };
    }


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private boolean canDeletePost(WallPost wallPost, Long currentUserId) {
        // –ú–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Ç–µ–Ω—ã
        return wallPost.getAuthor().getId().equals(currentUserId) ||
                wallPost.getWallOwner().getId().equals(currentUserId);
    }

}