package com.example.cleopatra.service.impl;

import com.example.cleopatra.EVENT.SubscriptionCreatedEvent;
import com.example.cleopatra.EVENT.UnsubscribeEvent;
import com.example.cleopatra.dto.SubscriptionDto.UserSubscriptionCard;
import com.example.cleopatra.dto.SubscriptionDto.UserSubscriptionDto;
import com.example.cleopatra.dto.SubscriptionDto.UserSubscriptionListDto;
import com.example.cleopatra.maper.UserSubscriptionMapper;
import com.example.cleopatra.model.Subscription;
import com.example.cleopatra.model.User;
import com.example.cleopatra.repository.SubscriptionRepository;
import com.example.cleopatra.repository.UserRepository;
import com.example.cleopatra.service.SubscriptionService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class SubscriptionServiceImpl implements SubscriptionService {


    private final SubscriptionRepository subscriptionRepository;
    private final UserRepository userRepository;
    private final UserSubscriptionMapper subscriptionMapper;
    private final ApplicationEventPublisher eventPublisher;





    @Override
    @Transactional
    public boolean subscribe(Long subscriberId, Long subscribedToId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã–µ
            if (subscriberId.equals(subscribedToId)) {
                log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–±—è", subscriberId);
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
            if (subscriptionRepository.existsBySubscriberIdAndSubscribedToId(subscriberId, subscribedToId)) {
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {}", subscriberId, subscribedToId);
                return false;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            User subscriber = userRepository.findById(subscriberId)
                    .orElseThrow(() -> new RuntimeException("Subscriber not found: " + subscriberId));
            User subscribedTo = userRepository.findById(subscribedToId)
                    .orElseThrow(() -> new RuntimeException("User to subscribe not found: " + subscribedToId));

            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            Subscription subscription = new Subscription(subscriber, subscribedTo);
            subscriptionRepository.save(subscription);

            // üî• –ü–£–ë–õ–ò–ö–£–ï–ú –°–û–ë–´–¢–ò–ï –û –ü–û–î–ü–ò–°–ö–ï
            String subscriberName = getFullName(subscriber);
            eventPublisher.publishEvent(new SubscriptionCreatedEvent(
                    subscriberId,
                    subscribedToId,
                    subscriberName
            ));
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            updateSubscriptionCounts(subscriberId, subscribedToId);

            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {}", subscriberId, subscribedToId);
            return true;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ {} –Ω–∞ {}: {}", subscriberId, subscribedToId, e.getMessage(), e);
            return false;
        }
    }
    private String getFullName(User user) {
        if (user.getFirstName() != null && user.getLastName() != null) {
            return user.getFirstName() + " " + user.getLastName();
        } else if (user.getFirstName() != null) {
            return user.getFirstName();
        } else if (user.getLastName() != null) {
            return user.getLastName();
        }
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    }


    @Override
    @Transactional
    public boolean unsubscribe(Long subscriberId, Long subscribedToId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            if (!subscriptionRepository.existsBySubscriberIdAndSubscribedToId(subscriberId, subscribedToId)) {
                log.info("–ü–æ–¥–ø–∏—Å–∫–∞ {} -> {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", subscriberId, subscribedToId);
                return false;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –î–û —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏)
            User subscriber = userRepository.findById(subscriberId)
                    .orElseThrow(() -> new RuntimeException("Subscriber not found: " + subscriberId));

            // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscriptionRepository.deleteBySubscriberIdAndSubscribedToId(subscriberId, subscribedToId);

            // üî• –ü–£–ë–õ–ò–ö–£–ï–ú –°–û–ë–´–¢–ò–ï –û –û–¢–ü–ò–°–ö–ï
            String subscriberName = getFullName(subscriber); // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç User
            eventPublisher.publishEvent(new UnsubscribeEvent(
                    subscriberId,      // –∫—Ç–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è
                    subscribedToId,    // –æ—Ç –∫–æ–≥–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å
                    subscriberName     // –∏–º—è —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è
            ));

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            updateSubscriptionCounts(subscriberId, subscribedToId);

            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {}", subscriberId, subscribedToId);
            return true;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ {} –æ—Ç {}: {}", subscriberId, subscribedToId, e.getMessage(), e);
            return false;
        }
    }

    @Override
    public boolean toggleSubscription(Long subscriberId, Long subscribedToId) {
        if (isSubscribed(subscriberId, subscribedToId)) {
            return unsubscribe(subscriberId, subscribedToId);
        } else {
            return subscribe(subscriberId, subscribedToId);
        }
    }

    @Override
    public boolean isSubscribed(Long subscriberId, Long subscribedToId) {
        return subscriptionRepository.existsBySubscriberIdAndSubscribedToId(subscriberId, subscribedToId);
    }


    @Override
    public UserSubscriptionListDto getSubscribers(Long userId, Pageable pageable) {
        try {
            log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}",
                    userId, pageable.getPageNumber());

            Slice<Subscription> subscriptionsSlice = subscriptionRepository.findBySubscribedToId(userId, pageable);


            List<UserSubscriptionCard> cards = subscriptionsSlice.getContent()
                    .stream()
                    .map(subscription -> subscriptionMapper.mapToSubscriptionCard(
                            subscription.getSubscriber(), // –¢–æ—Ç –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
                            subscription
                    ))
                    .collect(Collectors.toList());

            log.debug("–ù–∞–π–¥–µ–Ω–æ {} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                    cards.size(), pageable.getPageNumber(), userId);

            // –°—Ç—Ä–æ–∏–º –∏—Ç–æ–≥–æ–≤—ã–π DTO —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Slice
            return UserSubscriptionListDto.builder()
                    .subscriptions(cards)
                    .currentPage(pageable.getPageNumber())
                    .itemsPerPage(pageable.getPageSize())

                    .totalPages(null)
                    .totalItems(null)

                    // Slice –¥–∞–Ω–Ω—ã–µ
                    .hasNext(subscriptionsSlice.hasNext())
                    .hasPrevious(subscriptionsSlice.hasPrevious())
                    .nextPage(subscriptionsSlice.hasNext() ? pageable.getPageNumber() + 1 : null)
                    .previousPage(subscriptionsSlice.hasPrevious() ? pageable.getPageNumber() - 1 : null)
                    .build();

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}: {}",
                    userId, pageable.getPageNumber(), e.getMessage(), e);
            return createEmptySubscriptionsSlice(pageable.getPageNumber(), pageable.getPageSize());
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π DTO –¥–ª—è Slice –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
     */
    private UserSubscriptionListDto createEmptySubscriptionsSlice(int page, int size) {
        return UserSubscriptionListDto.builder()
                .subscriptions(Collections.emptyList())
                .currentPage(page)
                .itemsPerPage(size)
                .totalPages(null)     // Slice –Ω–µ –∑–Ω–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                .totalItems(null)     // Slice –Ω–µ –∑–Ω–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                .hasNext(false)
                .hasPrevious(page > 0)
                .nextPage(null)
                .previousPage(page > 0 ? page - 1 : null)
                .build();
    }


    @Override
    public UserSubscriptionListDto getSubscriptions(Long userId, Pageable pageable) {
        try {
            log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}",
                    userId, pageable.getPageNumber());

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Slice –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –∫–æ–≥–æ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω)
            Slice<Subscription> subscriptionsSlice = subscriptionRepository.findBySubscriberId(userId, pageable);


            // –ú–∞–ø–ø–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–∏
            List<UserSubscriptionCard> cards = subscriptionsSlice.getContent()
                    .stream()
                    .map(subscription -> subscriptionMapper.mapToSubscriptionCard(
                            subscription.getSubscribedTo(), // –ù–∞ –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω
                            subscription
                    ))
                    .collect(Collectors.toList());

            log.debug("–ù–∞–π–¥–µ–Ω–æ {} –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                    cards.size(), pageable.getPageNumber(), userId);


            // –°—Ç—Ä–æ–∏–º –∏—Ç–æ–≥–æ–≤—ã–π DTO —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Slice
            return UserSubscriptionListDto.builder()
                    .subscriptions(cards)
                    .currentPage(pageable.getPageNumber())
                    .itemsPerPage(pageable.getPageSize())

                    // –î–ª—è Slice –ù–ï–¢ totalPages –∏ totalItems (–∏–∑–±–µ–≥–∞–µ–º COUNT –∑–∞–ø—Ä–æ—Å)
                    .totalPages(null)
                    .totalItems(null)

                    // Slice –¥–∞–Ω–Ω—ã–µ
                    .hasNext(subscriptionsSlice.hasNext())
                    .hasPrevious(subscriptionsSlice.hasPrevious())
                    .nextPage(subscriptionsSlice.hasNext() ? pageable.getPageNumber() + 1 : null)
                    .previousPage(subscriptionsSlice.hasPrevious() ? pageable.getPageNumber() - 1 : null)
                    .build();

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}: {}",
                    userId, pageable.getPageNumber(), e.getMessage(), e);
            return createEmptySubscriptionsSlice(pageable.getPageNumber(), pageable.getPageSize());
        }
    }

    @Override
    public List<Long> getSubscriptionIds(Long subscriberId) {
        try {
            log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", subscriberId);

            List<Long> subscriptionIds = subscriptionRepository.findSubscribedToIdsBySubscriberId(subscriberId);

            log.debug("–ù–∞–π–¥–µ–Ω–æ {} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", subscriptionIds.size(), subscriberId);
            return subscriptionIds;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", subscriberId, e.getMessage());
            return Collections.emptyList();
        }
    }

    @Override
    public boolean hasAnySubscriptions(Long subscriberId) {
        return subscriptionRepository.countBySubscriberId(subscriberId) > 0;
    }


    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
     */
    private void updateSubscriptionCounts(Long subscriberId, Long subscribedToId) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ —É subscriber
            long subscriptionsCount = subscriptionRepository.countBySubscriberId(subscriberId);
            User subscriber = userRepository.findById(subscriberId).orElse(null);
            if (subscriber != null) {
                subscriber.setFollowingCount(subscriptionsCount);
                userRepository.save(subscriber);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É subscribedTo
            long subscribersCount = subscriptionRepository.countBySubscribedToId(subscribedToId);
            User subscribedTo = userRepository.findById(subscribedToId).orElse(null);
            if (subscribedTo != null) {
                subscribedTo.setFollowersCount(subscribersCount);
                userRepository.save(subscribedTo);
            }

            log.debug("–°—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: subscriber {} -> {}, subscribedTo {} -> {}",
                    subscriberId, subscriptionsCount, subscribedToId, subscribersCount);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤: {}", e.getMessage(), e);
        }
    }
}
