package com.example.cleopatra.Scheduling;

import com.example.cleopatra.repository.StoryRepository;
import com.example.cleopatra.repository.StoryViewRepository;
import com.example.cleopatra.service.StoryService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;

@Slf4j
@Component
@RequiredArgsConstructor
public class StoryScheduler {

    private final StoryService storyService;
    private final StoryRepository storyRepository;
    private final StoryViewRepository storyViewRepository;

    /**
     * –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç batch –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * Cron: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (0 —Å–µ–∫—É–Ω–¥, 0 –∏ 30 –º–∏–Ω—É—Ç, –∫–∞–∂–¥—ã–π —á–∞—Å)
     */
    @Scheduled(cron = "0 0,30 * * * *")
    public void deleteExpiredStories() {
        log.info("üóëÔ∏è –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –∏—Å—Ç–æ—Ä–∏–π...");

        try {
            int totalDeleted = 0;
            int batchSize = 100;
            boolean hasMore = true;

            while (hasMore) {
                int deletedInBatch = storyService.deleteExpiredStoriesBatch(batchSize);
                totalDeleted += deletedInBatch;

                if (deletedInBatch < batchSize) {
                    // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º —Ä–∞–∑–º–µ—Ä batch - –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
                    hasMore = false;
                } else {
                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É batch'–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î
                    Thread.sleep(100); // 100ms –ø–∞—É–∑–∞
                }

                log.debug("üì¶ Batch –æ–±—Ä–∞–±–æ—Ç–∞–Ω: —É–¥–∞–ª–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏–π", deletedInBatch);
            }

            if (totalDeleted > 0) {
                log.info("‚úÖ –û–±—â–∏–π –∏—Ç–æ–≥: —É–¥–∞–ª–µ–Ω–æ {} –∏—Å—Ç–µ–∫—à–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –∑–∞ {} batch'–µ–π",
                        totalDeleted, (totalDeleted + batchSize - 1) / batchSize);
            } else {
                log.debug("üì≠ –ò—Å—Ç–µ–∫—à–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }

        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.error("‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞", e);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∏—Å—Ç–æ—Ä–∏–π", e);
        }
    }

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ - –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 02:00
     * –î–ª—è –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤ –ë–î
     */
    @Scheduled(cron = "0 0 2 * * *")
    public void nightlyCleanup() {
        log.info("üåô –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–π...");

        try {
            int deletedCount = storyService.deleteExpiredStories();
            log.info("üåô –ù–æ—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏–π", deletedCount);

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É:
            // - VACUUM –¥–ª—è PostgreSQL
            // - –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            // - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ", e);
        }
    }


    @Scheduled(fixedRate = 7200000)
//@Scheduled(fixedRate = 120000) // 2 –º–∏–Ω—É—Ç—ã = 120000 –º—Å
    public void logStoriesStatistics() {
        try {
            long activeStoriesCount = storyRepository.count();
            log.info("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π: {}", activeStoriesCount);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∏—Å—Ç–æ—Ä–∏–π", e);
        }
    }
}