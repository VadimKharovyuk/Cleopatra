package com.example.cleopatra.EVENT;

import com.example.cleopatra.config.NotificationWebSocketHandler;
import com.example.cleopatra.model.Notification;
import com.example.cleopatra.model.User;
import com.example.cleopatra.repository.NotificationRepository;
import com.example.cleopatra.dto.Notification.NotificationDto;
import com.example.cleopatra.maper.NotificationMapper;
import com.example.cleopatra.service.NotificationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.hibernate.Hibernate;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

@Component
@RequiredArgsConstructor
@Slf4j
public class NotificationEventListener {

    private final NotificationRepository notificationRepository;
    private final NotificationMapper notificationMapper;
     private final NotificationWebSocketHandler notificationWebSocketHandler;
    private final NotificationService notificationService;


    @EventListener
    @Async
    @Transactional(readOnly = true)
    public void handleNotificationCreated(NotificationCreatedEvent event) {
        log.info("üéâ EVENT RECEIVED: NotificationCreatedEvent for ID: {} to recipient: {}",
                event.getNotificationId(), event.getRecipientId());

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å eager loading
            Notification notification = notificationRepository.findByIdWithUsers(event.getNotificationId())
                    .orElse(null);

            if (notification == null) {
                log.warn("‚ö†Ô∏è Notification not found: {}", event.getNotificationId());
                return;
            }

            log.info("üìã Found notification: title={}", notification.getTitle());

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DTO
            NotificationDto dto = notificationMapper.toWebSocketDto(notification);


            // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –í–°–ï –°–í–Ø–ó–ò
            Hibernate.initialize(notification.getRecipient());
            if (notification.getActor() != null) {
                Hibernate.initialize(notification.getActor());
            }


            // üîß –ü–û–ü–´–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò –ß–ï–†–ï–ó WEBSOCKET
            boolean sentViaWebSocket = notificationWebSocketHandler.sendNotificationToUser(
                    event.getRecipientId(),
                    dto
            );

            if (sentViaWebSocket) {
                // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket
                log.info("üì§ Notification sent via WebSocket to user: {}", event.getRecipientId());
                updateNotificationAsSent(event.getNotificationId());
            } else {
                // üîï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                log.info("üîï User {} not connected to WebSocket, checking online status", event.getRecipientId());

                User recipient = notification.getRecipient();
                if (Boolean.TRUE.equals(recipient.getIsOnline())) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω –≤ –ë–î, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket
                    log.info("üë§ User {} is online but not connected to WebSocket, will retry later", event.getRecipientId());

                    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                    scheduleRetryNotification(event.getNotificationId(), event.getRecipientId(), dto);
                } else {
                    log.info("üí§ User {} is offline, notification will be delivered when online", event.getRecipientId());

                }
            }

            log.info("‚úÖ Notification processing completed for user: {}", event.getRecipientId());

        } catch (Exception e) {
            log.error("‚ùå Error in event listener for notification: {}", event.getNotificationId(), e);
            e.printStackTrace();
        }
    }


    @EventListener
    @Async
    public void handleSubscriptionCreated(SubscriptionCreatedEvent event) {
        log.info("üéâ EVENT RECEIVED: SubscriptionCreatedEvent - {} subscribed to {}",
                event.getSubscriberId(), event.getSubscribedToId());

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            notificationService.createFollowNotification(
                    event.getSubscribedToId(), // –∫–æ–º—É (–Ω–∞ –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å)
                    event.getSubscriberId()    // –∫—Ç–æ (–∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è)
            );

            log.info("‚úÖ Follow notification created successfully: {} ‚Üí {}",
                    event.getSubscriberId(), event.getSubscribedToId());
        } catch (Exception e) {
            log.error("‚ùå Error creating follow notification: {} ‚Üí {}",
                    event.getSubscriberId(), event.getSubscribedToId(), e);
        }
    }


    @EventListener
    @Async
    public void handlePostLiked(PostLikedEvent event) {
        log.info("üéâ EVENT RECEIVED: PostLikedEvent for post: {} by user: {}",
                event.getPostId(), event.getLikerUserId());

        try {
            notificationService.createLikeNotification(
                    event.getPostAuthorId(), // –∫–æ–º—É
                    event.getLikerUserId(),   // –∫—Ç–æ
                    event.getPostId(),        // –∫–∞–∫–æ–π –ø–æ—Å—Ç
                    event.getPostTitle()      // –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            );

            log.info("‚úÖ Like notification created successfully for post: {}", event.getPostId());
        } catch (Exception e) {
            log.error("‚ùå Error creating like notification for post: {}", event.getPostId(), e);
        }
    }


    @EventListener
    @Async
    public void handlePostComment(PostCommentEvent event) {
        // –ú–µ—Ç–æ–¥ createCommentNotification —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        try {
            if (!event.getPostAuthorId().equals(event.getCommenterUserId())) {
                notificationService.createCommentNotification(
                        event.getPostAuthorId(),
                        event.getCommenterUserId(),
                        event.getPostId(),
                        event.getCommentText()
                );

                log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ—Å—Ç {}, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}",
                        event.getPostId(), event.getCommenterUserId(), event.getPostAuthorId());
            } else {
                log.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è");
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {}: {}",
                    event.getPostId(), e.getMessage(), e);
        }
    }



    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */

    private void scheduleRetryNotification(Long notificationId, Long recipientId, NotificationDto dto) {
        log.info("‚è∞ Scheduling retry for notification {} to user {} in 30 seconds", notificationId, recipientId);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º CompletableFuture –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        CompletableFuture.delayedExecutor(30, TimeUnit.SECONDS).execute(() -> {
            try {
                log.info("üîÑ Retrying notification delivery for user: {}", recipientId);

                boolean sentViaWebSocket = notificationWebSocketHandler.sendNotificationToUser(recipientId, dto);

                if (sentViaWebSocket) {
                    log.info("‚úÖ Notification delivered on retry to user: {}", recipientId);
                    updateNotificationAsSent(notificationId);
                } else {
                    log.info("üîï Retry failed - user {} still not connected", recipientId);
                    // –ú–æ–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                }

            } catch (Exception e) {
                log.error("‚ùå Error during notification retry for user: {}", recipientId, e);
            }
        });
    }


    @EventListener
    @Async
    public void handlePostMentionsBatch(PostMentionsBatchEvent event) {
        log.info("üéâ EVENT RECEIVED: PostMentionsBatchEvent - user {} mentioned {} users in post {}",
                event.getMentionerUserId(), event.getMentions().size(), event.getPostId());

        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            for (PostMentionsBatchEvent.MentionInfo mentionInfo : event.getMentions()) {
                try {
                    // ‚úÖ –ü–ï–†–ï–î–ê–ï–ú POST ID –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    notificationService.createMentionNotificationWithPost(
                            mentionInfo.getMentionedUserId(), // –∫–æ–º—É (–∫–æ–≥–æ —É–ø–æ–º—è–Ω—É–ª–∏)
                            event.getMentionerUserId(),        // –∫—Ç–æ (–∫—Ç–æ —É–ø–æ–º—è–Ω—É–ª)
                            event.getPostId()                  // ‚úÖ ID –ø–æ—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                    );

                    log.info("‚úÖ Mention notification created: {} mentioned {} in post {}",
                            event.getMentionerUserId(), mentionInfo.getMentionedUserId(), event.getPostId());

                } catch (Exception e) {
                    log.error("‚ùå Error creating mention notification for user {}: {}",
                            mentionInfo.getMentionedUserId(), e.getMessage());
                }
            }

            log.info("‚úÖ Batch mention notifications processing completed for post {}", event.getPostId());

        } catch (Exception e) {
            log.error("‚ùå Error processing batch mention event for post {}: {}", event.getPostId(), e.getMessage());
        }
    }



    @Transactional
    public void updateNotificationAsSent(Long notificationId) {
        notificationRepository.findById(notificationId).ifPresent(notification -> {
            notification.setIsSent(true);
            notification.setSentAt(LocalDateTime.now());
            notificationRepository.save(notification);
            log.debug("‚úÖ Marked notification {} as sent", notificationId);
        });
    }
}
