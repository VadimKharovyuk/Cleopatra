package com.example.cleopatra.controller;

import com.example.cleopatra.ExistsException.ImageValidationException;
import com.example.cleopatra.dto.user.UpdateProfileDto;
import com.example.cleopatra.dto.user.UserRecommendationDto;
import com.example.cleopatra.dto.user.UserResponse;
import com.example.cleopatra.service.ImageValidator;
import com.example.cleopatra.service.RecommendationService;
import com.example.cleopatra.service.SubscriptionService;
import com.example.cleopatra.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import jakarta.validation.Valid;

import java.util.Collections;
import java.util.List;

@Controller
@RequestMapping("/profile")
@RequiredArgsConstructor
@Slf4j
public class UserProfileController {

    private final UserService userService;
    private final RecommendationService recommendationService;
    private final ImageValidator imageValidator;
    private final SubscriptionService subscriptionService;

    @GetMapping("/{userId}")
    public String showProfile(@PathVariable Long userId,
                              Model model,
                              Authentication authentication) {
        try {
            log.debug("=== –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} ===", userId);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            UserResponse user = userService.getUserById(userId);
            model.addAttribute("user", user);
            log.debug("User –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ–ª—å: ID={}, Email={}", user.getId(), user.getEmail());

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (authentication != null && authentication.isAuthenticated()) {
                UserResponse currentUser = userService.getUserByEmail(authentication.getName());
                model.addAttribute("currentUserId", currentUser.getId());
                log.debug("Current User –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ–ª—å: ID={}, Email={}", currentUser.getId(), currentUser.getEmail());
                // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –û–¢–õ–ê–î–ö–£
                log.debug("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID: currentUserId={}, profileUserId={}, —Ä–∞–≤–Ω—ã={}",
                        currentUser.getId(), userId, currentUser.getId().equals(userId));

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —á—É–∂–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
                if (!currentUser.getId().equals(userId)) {

                    boolean isSubscribed = subscriptionService.isSubscribed(currentUser.getId(), userId);
                    model.addAttribute("isSubscribed", isSubscribed);
                    log.debug("–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ {} -> {}: {}", currentUser.getId(), userId, isSubscribed);
                } else {
                    model.addAttribute("isSubscribed", false);
                    log.debug("–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è");
                }
                List<UserRecommendationDto> recommendations = recommendationService.getTopRecommendations(currentUser.getId());
                model.addAttribute("recommendations", recommendations);
            } else {
                log.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
                model.addAttribute("currentUserId", null);
                model.addAttribute("isSubscribed", false);
            }

            log.debug("=== –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ===");
            log.debug("user.id: {}", user.getId());
            log.debug("currentUserId: {}", model.getAttribute("currentUserId"));
            log.debug("isSubscribed: {}", model.getAttribute("isSubscribed"));

            // –ü–†–û–í–ï–†–ò–¢–¨ –ß–¢–û –ü–ï–†–ï–î–ê–ï–¢–°–Ø –í –®–ê–ë–õ–û–ù
            log.debug("=== –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ===");
            log.debug("user.id: {}", user.getId());
            log.debug("currentUserId: {}", model.getAttribute("currentUserId"));
            log.debug("isSubscribed: {}", model.getAttribute("isSubscribed"));
            log.debug("–£—Å–ª–æ–≤–∏–µ (currentUserId != null and currentUserId != user.id): {}",
                    model.getAttribute("currentUserId") != null &&
                            !model.getAttribute("currentUserId").equals(user.getId()));

            return "profile/profile";

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è {}: {}", userId, e.getMessage(), e);
            model.addAttribute("errorMessage", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return "error/404";
        }
    }

    @GetMapping("/{userId}/edit")
    public String showEditProfile(@PathVariable Long userId, Model model) {
        try {
            UserResponse user = userService.getUserById(userId);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º DTO —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            UpdateProfileDto dto = new UpdateProfileDto();
            dto.setFirstName(user.getFirstName());
            dto.setLastName(user.getLastName());

            model.addAttribute("user", user);
            model.addAttribute("updateProfileDto", dto);

            model.addAttribute("maxFileSize", imageValidator.getMaxFileSizeMB());
            model.addAttribute("allowedFormats", imageValidator.getAllowedExtensions());
            model.addAttribute("validationRules", imageValidator.getValidationRulesDescription());

            return "profile/edit";
        } catch (RuntimeException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {}: {}", userId, e.getMessage());
            model.addAttribute("error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return "error/404";
        }
    }

    @PostMapping("/{userId}/edit")
    public String updateProfile(@PathVariable Long userId,
                                @Valid @ModelAttribute UpdateProfileDto updateDto,
                                BindingResult bindingResult,
                                Model model,
                                Authentication authentication,
                                RedirectAttributes redirectAttributes) {
        try {
            if (authentication == null || !authentication.isAuthenticated()) {
                return "redirect:/login";
            }

            UserResponse currentUser = userService.getUserByEmail(authentication.getName());

            if (!currentUser.getId().equals(userId)) {
                redirectAttributes.addFlashAttribute("errorMessage", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                return "redirect:/profile/" + userId;
            }

            if (bindingResult.hasErrors()) {
                UserResponse user = userService.getUserById(userId);
                model.addAttribute("user", user);
                model.addAttribute("currentUserId", currentUser.getId());
                return "profile/edit";
            }

            userService.updateProfile(userId, updateDto);
            redirectAttributes.addFlashAttribute("successMessage", "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");

            return "redirect:/profile/" + userId;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
            return "redirect:/profile/" + userId + "/edit";
        }
    }

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
     * URL: /profile/{userId}/avatar (–ë–ï–ó /upload)
     * –ü–∞—Ä–∞–º–µ—Ç—Ä: avatar (–ù–ï avatarFile)
     */
    @PostMapping("/{userId}/avatar")
    public String uploadAvatar(
            @PathVariable Long userId,
            @RequestParam("avatar") MultipartFile file,
            RedirectAttributes redirectAttributes) {

        log.info("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, file.getOriginalFilename());

        // ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
        if (file.isEmpty()) {
            log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("errorMessage", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª");
            return "redirect:/profile/" + userId + "/edit";
        }

        try {
            // ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –í –°–ï–†–í–ò–°–ï
            UserResponse updatedUser = userService.uploadAvatar(userId, file);

            log.info("‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("successMessage", "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
            return "redirect:/profile/" + userId;

        } catch (ImageValidationException e) {
            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            log.warn("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
            return "redirect:/profile/" + userId + "/edit";

        } catch (RuntimeException e) {
            // –û–±—â–∏–µ –æ—à–∏–±–∫–∏
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return "redirect:/profile/" + userId + "/edit";
        }
    }

    /**
     * ‚úÖ –ö–û–†–†–ï–ö–¢–ù–´–ô –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞
     * URL: /profile/{userId}/background/upload (–ö–ê–ö –í HTML)
     * –ü–∞—Ä–∞–º–µ—Ç—Ä: backgroundFile (–ö–ê–ö –í HTML)
     */
    @PostMapping("/{userId}/background/upload")
    public String uploadBackgroundImage(
            @PathVariable Long userId,
            @RequestParam("backgroundFile") MultipartFile file,
            RedirectAttributes redirectAttributes) {

        log.info("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, file.getOriginalFilename());

        if (file.isEmpty()) {
            log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("errorMessage", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏");
            return "redirect:/profile/" + userId + "/edit";
        }

        try {
            userService.uploadBackgroundImage(userId, file);

            log.info("‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("successMessage", "–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");
            return "redirect:/profile/" + userId;

        } catch (ImageValidationException e) {
            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            log.warn("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
            return "redirect:/profile/" + userId + "/edit";

        } catch (RuntimeException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + e.getMessage());
            return "redirect:/profile/" + userId + "/edit";
        }
    }

    /**
     * ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
     */
    @PostMapping("/{userId}/avatar/delete")
    public String deleteAvatar(
            @PathVariable Long userId,
            RedirectAttributes redirectAttributes) {

        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);

        try {
            userService.deleteAvatar(userId);

            log.info("‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("successMessage", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–∞!");
            return "redirect:/profile/" + userId;

        } catch (RuntimeException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");
            return "redirect:/profile/" + userId + "/edit";
        }
    }

    /**
     * ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
     */
    @PostMapping("/{userId}/background/delete")
    public String deleteBackground(
            @PathVariable Long userId,
            RedirectAttributes redirectAttributes) {

        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);

        try {
            userService.deleteBackgroundImage(userId);

            log.info("‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("successMessage", "–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!");
            return "redirect:/profile/" + userId;

        } catch (RuntimeException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
            return "redirect:/profile/" + userId + "/edit";
        }
    }

    // ========================================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´
    // ========================================



    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –º–æ–¥–µ–ª—å
     */
    private void addValidationAttributesToModel(Model model) {
        model.addAttribute("maxFileSize", imageValidator.getMaxFileSizeMB());
        model.addAttribute("allowedFormats", imageValidator.getAllowedExtensions());
        model.addAttribute("validationRules", imageValidator.getValidationRulesDescription());
    }

}