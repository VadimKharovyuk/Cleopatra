package com.example.cleopatra.controller;

import com.example.cleopatra.ExistsException.ImageValidationException;
import com.example.cleopatra.dto.Post.PostCardDto;
import com.example.cleopatra.dto.Post.PostListDto;
import com.example.cleopatra.dto.user.UpdateProfileDto;
import com.example.cleopatra.dto.user.UserRecommendationDto;
import com.example.cleopatra.dto.user.UserResponse;
import com.example.cleopatra.enums.ProfileAccessLevel;
import com.example.cleopatra.service.*;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import jakarta.validation.Valid;

import java.util.*;

@Controller
@RequestMapping("/profile")
@RequiredArgsConstructor
@Slf4j
public class UserProfileController {

    private final UserService userService;
    private final RecommendationService recommendationService;
    private final ImageValidator imageValidator;
    private final SubscriptionService subscriptionService;
    private final IpAddressService ipAddressService;
    private final PostService postService;
    private final UserBlockService userBlockService;
    private final UserOnlineStatusService userOnlineStatusService;
    private final ProfileAccessService profileAccessService;




    @GetMapping("/{userId}")
    public String showProfile(@PathVariable Long userId,
                              @RequestParam(defaultValue = "0") int page,
                              @RequestParam(defaultValue = "6") int size,
                              Model model,
                              HttpServletRequest request,
                              Authentication authentication) {
        try {

            // –î–æ–±–∞–≤–ª—è–µ–º debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            model.addAttribute("debugUserId", userId);
            model.addAttribute("debugAuthenticated", authentication != null);

            if (authentication != null) {
                UserResponse currentUser = userService.getUserByEmail(authentication.getName());

                model.addAttribute("currentUserId", currentUser.getId());
                model.addAttribute("debugCurrentUserId", currentUser.getId());


                boolean canView = profileAccessService.canViewProfile(currentUser.getId(), userId);

                // 1. –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
                if (currentUser != null && currentUser.equals(userId)) {
                    userOnlineStatusService.setUserOnline(currentUser.getId());
                    log.debug("–û–±–Ω–æ–≤–ª–µ–Ω –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", currentUser);
                }


                if (!canView) {
                    log.warn("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");

                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    ProfileAccessLevel userAccessLevel = profileAccessService.getProfileAccessLevel(userId);
                    boolean isSubscribed = subscriptionService.isSubscribed(currentUser.getId(), userId);
                    boolean isMutualSubscription = subscriptionService.isSubscribed(userId, currentUser.getId());

                    // –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    UserResponse blockedUser = userService.getUserById(userId);
                    String accessDeniedMessage = profileAccessService.getAccessDeniedMessage(currentUser.getId(), userId);

                    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    model.addAttribute("blockedUser", blockedUser);
                    model.addAttribute("accessDeniedMessage", accessDeniedMessage);
                    model.addAttribute("currentUser", currentUser);

                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                    model.addAttribute("userAccessLevel", userAccessLevel);
                    model.addAttribute("isSubscribed", isSubscribed);
                    model.addAttribute("canSubscribe", !isSubscribed);

                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
                    boolean needsSubscription = (userAccessLevel == ProfileAccessLevel.SUBSCRIBERS_ONLY);
                    boolean needsMutualSubscription = (userAccessLevel == ProfileAccessLevel.MUTUAL_SUBSCRIPTIONS);
                    boolean isPrivateProfile = (userAccessLevel == ProfileAccessLevel.PRIVATE);

                    model.addAttribute("needsSubscription", needsSubscription);
                    model.addAttribute("needsMutualSubscription", needsMutualSubscription);
                    model.addAttribute("isPrivateProfile", isPrivateProfile);

                    // Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    model.addAttribute("debugAccessLevel", userAccessLevel.name());
                    model.addAttribute("debugCanView", false);
                    model.addAttribute("debugIsSubscribed", isSubscribed);
                    model.addAttribute("debugIsMutualSubscription", isMutualSubscription);


                    return "profile/CanViev-profile";
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ
                boolean iBlockedUser = userBlockService.isBlocked(currentUser.getId(), userId);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–∫—É—â–µ–≥–æ
                boolean userBlockedMe = userBlockService.isBlocked(userId, currentUser.getId());

                model.addAttribute("iBlockedUser", iBlockedUser);
                model.addAttribute("userBlockedMe", userBlockedMe);
                model.addAttribute("canInteract", !iBlockedUser && !userBlockedMe);

                // –ï—Å–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Ç–µ–∫—É—â–µ–≥–æ
                if (userBlockedMe) {
                    log.warn("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º profile-blocked", userId);
                    return "profile/profile-blocked";
                }

                // Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                model.addAttribute("debugCanView", true);
                model.addAttribute("debugAccessLevel", profileAccessService.getProfileAccessLevel(userId).name());

            } else {
                log.info("üîç –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å {}", userId);

                // === –ù–ï–ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ===
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                boolean canView = profileAccessService.canViewProfile(null, userId);

                if (!canView) {
                    log.warn("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

                    UserResponse blockedUser = userService.getUserById(userId);
                    String accessDeniedMessage = profileAccessService.getAccessDeniedMessage(null, userId);
                    ProfileAccessLevel userAccessLevel = profileAccessService.getProfileAccessLevel(userId);


                    model.addAttribute("blockedUser", blockedUser);
                    model.addAttribute("accessDeniedMessage", accessDeniedMessage);
                    model.addAttribute("currentUser", null);
                    model.addAttribute("debugCanView", false);
                    model.addAttribute("debugCurrentUserId", "anonymous");
                    model.addAttribute("debugAccessLevel", userAccessLevel.name());

                    return "profile/CanViev-profile";
                }
            }

            // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–†–û–§–ò–õ–Ø (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω) ===
            UserResponse user = userService.getUserById(userId);
            model.addAttribute("user", user);



            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            PostListDto userPosts = postService.getUserPosts(userId, page, size);

            model.addAttribute("posts", userPosts);
            model.addAttribute("currentPage", page);
            model.addAttribute("pageSize", size);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (authentication != null && authentication.isAuthenticated()) {
                UserResponse currentUser = userService.getUserByEmail(authentication.getName());
                model.addAttribute("currentUserId", currentUser.getId());
                model.addAttribute("isOwnProfile", currentUser.getId().equals(userId));


                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∏–∑–∏—Ç
                try {
                    ipAddressService.recordUserVisit(userId, currentUser.getId(), request);
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–∑–∏—Ç–∞: {}", e.getMessage());
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —á—É–∂–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
                if (!currentUser.getId().equals(userId)) {
                    boolean isSubscribed = subscriptionService.isSubscribed(currentUser.getId(), userId);
                    model.addAttribute("isSubscribed", isSubscribed);
                    model.addAttribute("debugIsSubscribed", isSubscribed);
                } else {
                    model.addAttribute("isSubscribed", false);
                    model.addAttribute("debugIsSubscribed", "own_profile");
                }

                try {
                    List<UserRecommendationDto> recommendations = recommendationService.getTopRecommendations(currentUser.getId());
                    model.addAttribute("recommendations", recommendations);

                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {}", e.getMessage());
                }

            } else {
                model.addAttribute("currentUserId", null);
                model.addAttribute("isSubscribed", false);
                model.addAttribute("isOwnProfile", false);
                model.addAttribute("debugIsSubscribed", "not_authenticated");
            }


            return "profile/profile";

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è {}: {}", userId, e.getMessage(), e);
            model.addAttribute("errorMessage", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            model.addAttribute("debugError", e.getMessage());
            return "error";
        }
    }


    /**
     * AJAX –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
     */
    @GetMapping("/{userId}/posts/api")
    @ResponseBody
    public ResponseEntity<?> getUserPostsApi(@PathVariable Long userId,
                                             @RequestParam(defaultValue = "0") int page,
                                             @RequestParam(defaultValue = "6") int size,
                                             Authentication authentication) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!userService.userExists(userId)) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(Map.of("error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é
            if (authentication != null && authentication.isAuthenticated()) {
                UserResponse currentUser = userService.getUserByEmail(authentication.getName());


                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                boolean userBlockedMe = userBlockService.isBlocked(userId, currentUser.getId());
                if (userBlockedMe) {
                    return ResponseEntity.status(HttpStatus.FORBIDDEN)
                            .body(Map.of("error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å"));
                }
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (page < 0) page = 0;
            if (size <= 0 || size > 20) size = 6;

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
            PostListDto userPosts = postService.getUserPosts(userId, page, size);

            if (userPosts == null) {
                userPosts = PostListDto.builder()
                        .posts(new ArrayList<>())
                        .hasNext(false)
                        .hasPrevious(false)
                        .currentPage(page)
                        .pageSize(size)
                        .isEmpty(true)
                        .numberOfElements(0)
                        .build();
            }

            if (userPosts.getPosts() == null) {
                userPosts.setPosts(new ArrayList<>());
            }

            log.info("–í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}",
                    userPosts.getPosts().size(), userId, page);

            return ResponseEntity.ok(userPosts);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ API –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);

            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            errorResponse.put("message", e.getMessage());
            errorResponse.put("userId", userId);
            errorResponse.put("page", page);
            errorResponse.put("size", size);

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(errorResponse);
        }
    }



    /**
     * –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getUserPostsApi
     */
    @GetMapping("/{userId}/posts")
    @ResponseBody
    public ResponseEntity<PostListDto> getUserPostsAjax(@PathVariable Long userId,
                                                        @RequestParam(defaultValue = "0") int page,
                                                        @RequestParam(defaultValue = "6") int size) {
        try {
            PostListDto userPosts = postService.getUserPosts(userId, page, size);
            return ResponseEntity.ok(userPosts);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ AJAX –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }


    @GetMapping("/{userId}/edit")
    public String showEditProfile(@PathVariable Long userId, Model model) {
        try {
            UserResponse user = userService.getUserById(userId);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º DTO —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            UpdateProfileDto dto = new UpdateProfileDto();
            dto.setFirstName(user.getFirstName());
            dto.setLastName(user.getLastName());
            dto.setCity(user.getCity());

            //—Å—Ç–∞—Ç—É—Å
            dto.setStatusPage(user.getStatusPage());

            dto.setBirthDate(user.getBirthDate());
            dto.setShowBirthday(user.getShowBirthday());


            model.addAttribute("user", user);
            model.addAttribute("updateProfileDto", dto);


            model.addAttribute("maxFileSize", imageValidator.getMaxFileSizeMB());
            model.addAttribute("allowedFormats", imageValidator.getAllowedExtensions());
            model.addAttribute("validationRules", imageValidator.getValidationRulesDescription());

            return "profile/edit";
        } catch (RuntimeException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {}: {}", userId, e.getMessage());
            model.addAttribute("error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return "error/404";
        }
    }

    @PostMapping("/{userId}/edit")
    public String updateProfile(@PathVariable Long userId,
                                @Valid @ModelAttribute UpdateProfileDto updateDto,
                                BindingResult bindingResult,
                                Model model,
                                Authentication authentication,
                                RedirectAttributes redirectAttributes) {
        try {
            if (authentication == null || !authentication.isAuthenticated()) {
                return "redirect:/login";
            }

            UserResponse currentUser = userService.getUserByEmail(authentication.getName());

            if (!currentUser.getId().equals(userId)) {
                redirectAttributes.addFlashAttribute("errorMessage", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                return "redirect:/profile/" + userId;
            }

            if (bindingResult.hasErrors()) {
                UserResponse user = userService.getUserById(userId);
                model.addAttribute("user", user);
                model.addAttribute("currentUserId", currentUser.getId());


                model.addAttribute("maxFileSize", imageValidator.getMaxFileSizeMB());
                model.addAttribute("allowedFormats", imageValidator.getAllowedExtensions());
                model.addAttribute("validationRules", imageValidator.getValidationRulesDescription());

                return "profile/edit";
            }

            userService.updateProfile(userId, updateDto);
            redirectAttributes.addFlashAttribute("successMessage", "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");

            return "redirect:/profile/" + userId;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
            return "redirect:/profile/" + userId + "/edit";
        }
    }


    @PostMapping("/{userId}/avatar")
    public String uploadAvatar(
            @PathVariable Long userId,
            @RequestParam("avatar") MultipartFile file,
            RedirectAttributes redirectAttributes) {


        // ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
        if (file.isEmpty()) {
            log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("errorMessage", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª");
            return "redirect:/profile/" + userId + "/edit";
        }

        try {
            // ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –í –°–ï–†–í–ò–°–ï
            UserResponse updatedUser = userService.uploadAvatar(userId, file);

            redirectAttributes.addFlashAttribute("successMessage", "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
            return "redirect:/profile/" + userId;

        } catch (ImageValidationException e) {
            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            log.warn("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
            return "redirect:/profile/" + userId + "/edit";

        } catch (RuntimeException e) {
            // –û–±—â–∏–µ –æ—à–∏–±–∫–∏
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return "redirect:/profile/" + userId + "/edit";
        }
    }


    @PostMapping("/{userId}/background/upload")
    public String uploadBackgroundImage(
            @PathVariable Long userId,
            @RequestParam("backgroundFile") MultipartFile file,
            RedirectAttributes redirectAttributes) {

        log.info("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, file.getOriginalFilename());

        if (file.isEmpty()) {
            log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("errorMessage", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏");
            return "redirect:/profile/" + userId + "/edit";
        }

        try {
            userService.uploadBackgroundImage(userId, file);

            log.info("‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("successMessage", "–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");
            return "redirect:/profile/" + userId;

        } catch (ImageValidationException e) {
            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            log.warn("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
            return "redirect:/profile/" + userId + "/edit";

        } catch (RuntimeException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + e.getMessage());
            return "redirect:/profile/" + userId + "/edit";
        }
    }

    /**
     * ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
     */
    @PostMapping("/{userId}/avatar/delete")
    public String deleteAvatar(
            @PathVariable Long userId,
            RedirectAttributes redirectAttributes) {

        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);

        try {
            userService.deleteAvatar(userId);

            log.info("‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("successMessage", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–∞!");
            return "redirect:/profile/" + userId;

        } catch (RuntimeException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");
            return "redirect:/profile/" + userId + "/edit";
        }
    }

    /**
     * ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
     */
    @PostMapping("/{userId}/background/delete")
    public String deleteBackground(
            @PathVariable Long userId,
            RedirectAttributes redirectAttributes) {

        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);

        try {
            userService.deleteBackgroundImage(userId);

            log.info("‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            redirectAttributes.addFlashAttribute("successMessage", "–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!");
            return "redirect:/profile/" + userId;

        } catch (RuntimeException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
            return "redirect:/profile/" + userId + "/edit";
        }
    }







}