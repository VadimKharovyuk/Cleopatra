package com.example.cleopatra.controller.restControler;// ====================== –î–û–ë–ê–í–¨–¢–ï –í –í–ê–® –ö–û–ù–¢–†–û–õ–õ–ï–† ======================

import com.example.cleopatra.service.UserOnlineStatusService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequiredArgsConstructor
@Slf4j
public class UserActivityController {

    private final UserOnlineStatusService userOnlineStatusService;

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è JavaScript heartbeat)
     */
    @PostMapping("/api/user/activity")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> updateActivity(HttpServletRequest request) {
        Map<String, Object> response = new HashMap<>();

        try {
            Long currentUserId = getCurrentUserId(request);

            if (currentUserId != null) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                userOnlineStatusService.updateLastSeen(currentUserId);

                response.put("success", true);
                response.put("message", "Activity updated");
                response.put("userId", currentUserId);
                response.put("timestamp", LocalDateTime.now());

                log.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", currentUserId);
                return ResponseEntity.ok(response);

            } else {
                response.put("success", false);
                response.put("message", "User not authenticated");

                log.warn("–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {}", e.getMessage(), e);

            response.put("success", false);
            response.put("message", "Server error");
            response.put("error", e.getMessage());

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ñ–ª–∞–π–Ω (–¥–ª—è beforeunload)
     */
    @PostMapping("/api/user/offline")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> setUserOffline(HttpServletRequest request) {
        Map<String, Object> response = new HashMap<>();

        try {
            Long currentUserId = getCurrentUserId(request);

            if (currentUserId != null) {
                userOnlineStatusService.setUserOffline(currentUserId);

                response.put("success", true);
                response.put("message", "User set offline");
                response.put("userId", currentUserId);

                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω", currentUserId);
                return ResponseEntity.ok(response);

            } else {
                response.put("success", false);
                response.put("message", "User not authenticated");

                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞: {}", e.getMessage(), e);

            response.put("success", false);
            response.put("message", "Server error");

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/api/user/status")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> getCurrentUserStatus(HttpServletRequest request) {
        Map<String, Object> response = new HashMap<>();

        try {
            Long currentUserId = getCurrentUserId(request);

            if (currentUserId != null) {
                boolean isOnline = userOnlineStatusService.isUserOnline(currentUserId);
                LocalDateTime lastSeen = userOnlineStatusService.getLastSeen(currentUserId);

                response.put("success", true);
                response.put("userId", currentUserId);
                response.put("isOnline", isOnline);
                response.put("lastSeen", lastSeen);

                return ResponseEntity.ok(response);

            } else {
                response.put("success", false);
                response.put("message", "User not authenticated");

                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {}", e.getMessage(), e);

            response.put("success", false);
            response.put("message", "Server error");

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/api/user/{userId}/status")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> getUserStatus(@PathVariable Long userId) {
        Map<String, Object> response = new HashMap<>();

        try {
            boolean isOnline = userOnlineStatusService.isUserOnline(userId);
            LocalDateTime lastSeen = userOnlineStatusService.getLastSeen(userId);

            response.put("success", true);
            response.put("userId", userId);
            response.put("isOnline", isOnline);
            response.put("lastSeen", lastSeen);
            response.put("statusText", isOnline ? "–≤ —Å–µ—Ç–∏" : "–Ω–µ –≤ —Å–µ—Ç–∏");

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);

            response.put("success", false);
            response.put("message", "Server error");

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    // ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ======================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
     */
    private Long getCurrentUserId(HttpServletRequest request) {
        try {
            // –°–ø–æ—Å–æ–± 1: –ò–∑ —Å–µ—Å—Å–∏–∏
            Object userId = request.getSession().getAttribute("currentUserId");
            if (userId instanceof Long) {
                return (Long) userId;
            }

            // –°–ø–æ—Å–æ–± 2: –ò–∑ Spring Security (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ)
            /*
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            if (auth != null && auth.isAuthenticated() && !"anonymousUser".equals(auth.getPrincipal())) {
                if (auth.getPrincipal() instanceof UserDetails) {
                    UserDetails userDetails = (UserDetails) auth.getPrincipal();
                    return Long.valueOf(userDetails.getUsername()); // –µ—Å–ª–∏ username —Å–æ–¥–µ—Ä–∂–∏—Ç ID
                }
                // –ò–ª–∏ –µ—Å–ª–∏ principal —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID:
                return Long.valueOf(auth.getName());
            }
            */

            // –°–ø–æ—Å–æ–± 3: –ò–∑ JWT —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ)
            /*
            String token = extractTokenFromRequest(request);
            if (token != null) {
                return jwtService.getUserIdFromToken(token);
            }
            */

            return null;

        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());
            return null;
        }
    }
}

// ====================== JAVASCRIPT –ö–û–î –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê ======================

/*
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç JavaScript –∫–æ–¥ –≤ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π layout –∏–ª–∏ –≤ head —Å–µ–∫—Ü–∏—é:

<script>
class UserActivityTracker {
    constructor() {
        this.heartbeatInterval = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã
        this.heartbeatTimer = null;
        this.isActive = true;
        this.init();
    }

    init() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
        this.startHeartbeat();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏
        this.handlePageUnload();

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.trackUserActivity();

        console.log('üë• User Activity Tracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    startHeartbeat() {
        this.heartbeatTimer = setInterval(() => {
            this.sendHeartbeat();
        }, this.heartbeatInterval);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π heartbeat —Å—Ä–∞–∑—É
        this.sendHeartbeat();
    }

    sendHeartbeat() {
        if (!this.isActive) return;

        fetch('/api/user/activity', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            credentials: 'include' // –í–∞–∂–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–π
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('üíì Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.userId);
            } else {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ heartbeat:', data.message);
                if (data.message === 'User not authenticated') {
                    this.stopHeartbeat();
                }
            }
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ heartbeat:', error);
        });
    }

    handlePageUnload() {
        // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±
        window.addEventListener('beforeunload', () => {
            this.setUserOffline();
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        window.addEventListener('pagehide', () => {
            this.setUserOffline();
        });

        // –î–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.isActive = false;
                setTimeout(() => {
                    if (document.hidden) {
                        this.setUserOffline();
                    }
                }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            } else {
                this.isActive = true;
                this.sendHeartbeat(); // –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
            }
        });
    }

    setUserOffline() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        if (navigator.sendBeacon) {
            const formData = new FormData();
            navigator.sendBeacon('/api/user/offline', formData);
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            fetch('/api/user/offline', {
                method: 'POST',
                keepalive: true,
                credentials: 'include'
            }).catch(error => {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å offline —Å–∏–≥–Ω–∞–ª:', error);
            });
        }
    }

    trackUserActivity() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞
        const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];

        let lastActivity = Date.now();

        activityEvents.forEach(event => {
            document.addEventListener(event, () => {
                lastActivity = Date.now();
                this.isActive = true;
            }, { passive: true });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        setInterval(() => {
            const timeSinceLastActivity = Date.now() - lastActivity;
            if (timeSinceLastActivity > 10 * 60 * 1000) { // 10 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                this.isActive = false;
            }
        }, 60 * 1000);
    }

    stopHeartbeat() {
        if (this.heartbeatTimer) {
            clearInterval(this.heartbeatTimer);
            this.heartbeatTimer = null;
            console.log('üíî Heartbeat –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    forceHeartbeat() {
        this.sendHeartbeat();
    }

    getStatus() {
        return fetch('/api/user/status', {
            method: 'GET',
            credentials: 'include'
        }).then(response => response.json());
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    window.userActivityTracker = new UserActivityTracker();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.UserActivityTracker = UserActivityTracker;
</script>
*/