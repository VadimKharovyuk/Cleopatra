package com.example.cleopatra.controller.restControler;

import com.example.cleopatra.dto.user.UserResponse;
import com.example.cleopatra.service.UserService;
import com.example.cleopatra.service.UserOnlineStatusService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;


@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
public class UserStatusController {

    private final UserService userService;
    private final UserOnlineStatusService userOnlineStatusService;

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    @PostMapping("/me/online")
    public ResponseEntity<String> setMeOnline(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String email = authentication.getName();
            if ("anonymousUser".equals(email)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Anonymous user");
            }

            Long userId = userService.getUserIdByEmail(email);

            // –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î
            userOnlineStatusService.setUserOnline(userId);

            log.debug("‚úÖ User {} set to ONLINE", userId);
            return ResponseEntity.ok("ONLINE");

        } catch (Exception e) {
            log.error("‚ùå Error setting user online", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error");
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    @PostMapping("/me/offline")
    public ResponseEntity<String> setMeOffline(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String email = authentication.getName();
            if ("anonymousUser".equals(email)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Anonymous user");
            }

            Long userId = userService.getUserIdByEmail(email);

            // –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î
            userOnlineStatusService.setUserOffline(userId);

            log.debug("üì¥ User {} set to OFFLINE", userId);
            return ResponseEntity.ok("OFFLINE");

        } catch (Exception e) {
            log.error("‚ùå Error setting user offline", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error");
        }
    }

    /**
     * Ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @PostMapping("/me/ping")
    public ResponseEntity<String> ping(Authentication authentication, HttpServletRequest request) {
        if (authentication == null || !authentication.isAuthenticated()) {
            log.warn("‚ùå Not authenticated");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String email = authentication.getName();

            if ("anonymousUser".equals(email)) {
                log.warn("‚ùå Anonymous user");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Anonymous user");
            }

            Long userId = userService.getUserIdByEmail(email);

            // –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î + –û–ë–ù–û–í–õ–Ø–ï–ú –í–†–ï–ú–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò
            userOnlineStatusService.setUserOnline(userId);
            userOnlineStatusService.updateLastSeen(userId);

            return ResponseEntity.ok("PING");

        } catch (Exception e) {
            log.error("‚ùå Error processing ping", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error: " + e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    @GetMapping("/me/status")
    public ResponseEntity<Map<String, Object>> getMyStatus(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "Not authenticated"));
        }

        try {
            String email = authentication.getName();
            if ("anonymousUser".equals(email)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "Anonymous user"));
            }

            Long userId = userService.getUserIdByEmail(email);

            // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–ï–¢–û–î–´ –ò–ó UserOnlineStatusService
            boolean isOnline = userOnlineStatusService.isUserOnline(userId);
            java.time.LocalDateTime lastSeen = userOnlineStatusService.getLastSeen(userId);

            UserResponse user = userService.getUserById(userId);

            Map<String, Object> response = Map.of(
                    "userId", userId,
                    "email", email,
                    "isOnline", isOnline,
                    "lastSeen", lastSeen != null ? lastSeen : "unknown",
                    "timestamp", System.currentTimeMillis()
            );

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå Error getting user status", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Error getting status"));
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    @GetMapping("/online")
    public ResponseEntity<List<UserResponse>> getOnlineUsers() {
        try {
            List<UserResponse> onlineUsers = userService.getOnlineUsers();
            return ResponseEntity.ok(onlineUsers);
        } catch (Exception e) {
            log.error("‚ùå Error getting online users", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(List.of());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/{userId}/status")
    public ResponseEntity<Map<String, Object>> getUserStatus(@PathVariable Long userId) {
        try {
            // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–ï–¢–û–î–´ –ò–ó UserOnlineStatusService
            boolean isOnline = userOnlineStatusService.isUserOnline(userId);
            java.time.LocalDateTime lastSeen = userOnlineStatusService.getLastSeen(userId);

            Map<String, Object> response = Map.of(
                    "userId", userId,
                    "isOnline", isOnline,
                    "lastSeen", lastSeen != null ? lastSeen : "unknown"
            );

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå Error getting user status for userId: {}", userId, e);
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("error", "User not found"));
        }
    }

    // ====================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ======================

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/me/diagnose")
    public ResponseEntity<String> diagnoseMyStatus(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String email = authentication.getName();
            if ("anonymousUser".equals(email)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Anonymous user");
            }

            Long userId = userService.getUserIdByEmail(email);

            // –í–´–ó–´–í–ê–ï–ú –î–ò–ê–ì–ù–û–°–¢–ò–ö–£
            userOnlineStatusService.diagnoseUserStatus(userId);


            return ResponseEntity.ok("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId + ". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.");

        } catch (Exception e) {
            log.error("‚ùå Error diagnosing user status", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/me/force-resync")
    public ResponseEntity<String> forceResyncMyStatus(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String email = authentication.getName();
            if ("anonymousUser".equals(email)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Anonymous user");
            }

            Long userId = userService.getUserIdByEmail(email);

            // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
            userOnlineStatusService.forceResyncUserStatus(userId, true);

            return ResponseEntity.ok("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);

        } catch (Exception e) {
            log.error("‚ùå Error force resyncing user status", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    /**
     * –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/me/recreate")
    public ResponseEntity<String> recreateMyStatus(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String email = authentication.getName();
            if ("anonymousUser".equals(email)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Anonymous user");
            }

            Long userId = userService.getUserIdByEmail(email);

            // –ü–û–õ–ù–û–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê
            userOnlineStatusService.recreateUserStatus(userId, true);

            return ResponseEntity.ok("‚úÖ –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);

        } catch (Exception e) {
            log.error("‚ùå Error recreating user status", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    /**
     * –£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/me/ultra-simple")
    public ResponseEntity<String> ultraSimpleUpdate(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String email = authentication.getName();
            if ("anonymousUser".equals(email)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Anonymous user");
            }

            Long userId = userService.getUserIdByEmail(email);

            // –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
            userOnlineStatusService.updateOnlineStatusUltraSimple(userId, true);

            return ResponseEntity.ok("‚úÖ –£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);

        } catch (Exception e) {
            log.error("‚ùå Error ultra simple update", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    /**
     * –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/me/final-update")
    public ResponseEntity<String> finalUpdate(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String email = authentication.getName();
            if ("anonymousUser".equals(email)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Anonymous user");
            }

            Long userId = userService.getUserIdByEmail(email);

            // –§–ò–ù–ê–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
            userOnlineStatusService.updateOnlineStatusFinal(userId, true);

            return ResponseEntity.ok("‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);

        } catch (Exception e) {
            log.error("‚ùå Error final update", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
     */
    @PostMapping("/me/new-transaction")
    public ResponseEntity<String> newTransactionUpdate(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String email = authentication.getName();
            if ("anonymousUser".equals(email)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Anonymous user");
            }

            Long userId = userService.getUserIdByEmail(email);

            // –û–ë–ù–û–í–õ–ï–ù–ò–ï –í –ù–û–í–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
            userOnlineStatusService.updateOnlineStatusNewTransaction(userId, true);

            return ResponseEntity.ok("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);

        } catch (Exception e) {
            log.error("‚ùå Error new transaction update", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @GetMapping("/online/count")
    public ResponseEntity<Map<String, Object>> getOnlineCount() {
        try {
            Long onlineCount = userOnlineStatusService.getOnlineUsersCount();

            Map<String, Object> response = Map.of(
                    "onlineCount", onlineCount,
                    "timestamp", System.currentTimeMillis()
            );

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå Error getting online count", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Error getting online count"));
        }
    }
}