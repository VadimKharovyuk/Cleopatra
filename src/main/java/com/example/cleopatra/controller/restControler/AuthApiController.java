package com.example.cleopatra.controller.restControler;

import com.example.cleopatra.model.User;
import com.example.cleopatra.repository.UserRepository;
import com.example.cleopatra.service.AuthenticationService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@Slf4j
public class AuthApiController {

    private final AuthenticationService authenticationService;
    private final UserRepository userRepository;

    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/login")
    public ResponseEntity<Map<String, Object>> login(@Valid @RequestBody LoginRequest request,
                                                     HttpServletRequest httpRequest) {

        try {
            // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            log.info("üîç –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
            if (request.getEmail() == null || request.getEmail().trim().isEmpty()) {
                log.error("‚ùå Email –ø—É—Å—Ç–æ–π –∏–ª–∏ null");
                return createErrorResponse("Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", HttpStatus.BAD_REQUEST);
            }

            if (request.getPassword() == null || request.getPassword().trim().isEmpty()) {
                log.error("‚ùå –ü–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π –∏–ª–∏ null");
                return createErrorResponse("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", HttpStatus.BAD_REQUEST);
            }

            // –î–û–ë–ê–í–õ–Ø–ï–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –î–û –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try {
                Optional<User> blockedUserOpt = userRepository.findByEmail(request.getEmail());
                if (blockedUserOpt.isPresent() && Boolean.TRUE.equals(blockedUserOpt.get().getIsBlocked())) {
                    User blockedUser = blockedUserOpt.get();
                    log.warn("üö´ User {} is blocked, sending blocked response", request.getEmail());

                    Map<String, Object> blockedResponse = new HashMap<>();
                    blockedResponse.put("success", false);
                    blockedResponse.put("blocked", true);
                    blockedResponse.put("message", "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.");
                    blockedResponse.put("redirectUrl", "/blocked-account");

                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                    blockedResponse.put("blockInfo", Map.of(
                            "blockedAt", blockedUser.getBlockedAt() != null ? blockedUser.getBlockedAt().toString() : null,
                            "reason", blockedUser.getBlockReason() != null ? blockedUser.getBlockReason() : "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                            "supportEmail", "support@cleopatra.com"
                    ));

                    return ResponseEntity.status(HttpStatus.FORBIDDEN).body(blockedResponse);
                }
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {}", e.getMessage());
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å
            }

            log.info("‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã");

            // –®–∞–≥ 2: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            Optional<User> userOpt;

            try {
                userOpt = authenticationService.authenticate(request.getEmail(), request.getPassword());
                log.info("‚úÖ authenticationService.authenticate() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            } catch (Exception e) {
                log.error("‚ùå –û–®–ò–ë–ö–ê –≤ authenticationService.authenticate(): {}", e.getMessage(), e);
                log.error("‚ùå Exception class: {}", e.getClass().getName());
                return createErrorResponse("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
            }

            // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (userOpt.isEmpty()) {
                log.warn("üîí –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –¥–ª—è email: {}", request.getEmail());

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                try {
                    Optional<User> userCheckOpt = userRepository.findByEmail(request.getEmail());
                    if (userCheckOpt.isPresent() && Boolean.TRUE.equals(userCheckOpt.get().getIsBlocked())) {
                        log.warn("üö´ User {} is blocked (detected in step 3)", request.getEmail());

                        Map<String, Object> blockedResponse = new HashMap<>();
                        blockedResponse.put("success", false);
                        blockedResponse.put("blocked", true);
                        blockedResponse.put("message", "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.");
                        blockedResponse.put("redirectUrl", "/blocked-account");

                        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(blockedResponse);
                    }
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {}", e.getMessage());
                }

                return createErrorResponse("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å", HttpStatus.UNAUTHORIZED);
            }

            User user = userOpt.get();

            // –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ UserDetails
            UserDetails userDetails;

            try {
                userDetails = authenticationService.loadUserByUsername(user.getEmail());
                log.info("‚úÖ UserDetails –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {}", userDetails.getUsername());
            } catch (UsernameNotFoundException e) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω–æ –ª–∏ —ç—Ç–æ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                if (e.getMessage().contains("blocked")) {
                    log.warn("üö´ User {} blocked during UserDetails loading", user.getEmail());

                    Map<String, Object> blockedResponse = new HashMap<>();
                    blockedResponse.put("success", false);
                    blockedResponse.put("blocked", true);
                    blockedResponse.put("message", "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
                    blockedResponse.put("redirectUrl", "/blocked-account");

                    return ResponseEntity.status(HttpStatus.FORBIDDEN).body(blockedResponse);
                }

                log.error("‚ùå –û–®–ò–ë–ö–ê –≤ loadUserByUsername(): {}", e.getMessage(), e);
                return createErrorResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + e.getMessage(), HttpStatus.UNAUTHORIZED);
            } catch (Exception e) {
                log.error("‚ùå –û–®–ò–ë–ö–ê –≤ loadUserByUsername(): {}", e.getMessage(), e);
                log.error("‚ùå Exception class: {}", e.getClass().getName());
                return createErrorResponse("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
            }

            // –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ Authentication
            Authentication authentication;

            try {
                authentication = new UsernamePasswordAuthenticationToken(
                        userDetails, null, userDetails.getAuthorities());
            } catch (Exception e) {
                log.error("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Authentication: {}", e.getMessage(), e);
                return createErrorResponse("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
            }

            // –®–∞–≥ 6: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ SecurityContext
            try {
                SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
                securityContext.setAuthentication(authentication);
                SecurityContextHolder.setContext(securityContext);
            } catch (Exception e) {
                log.error("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ SecurityContext: {}", e.getMessage(), e);
                return createErrorResponse("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
            }

            // –®–∞–≥ 7: –†–∞–±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏–µ–π
            HttpSession session;

            try {
                session = httpRequest.getSession(true);
                session.setAttribute("SPRING_SECURITY_CONTEXT", SecurityContextHolder.getContext());
            } catch (Exception e) {
                log.error("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Å—Å–∏–µ–π: {}", e.getMessage(), e);
                return createErrorResponse("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
            }

            // –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            Map<String, Object> userInfo;

            try {
                userInfo = createUserInfo(user);
            } catch (Exception e) {
                log.error("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UserInfo: {}", e.getMessage(), e);
                return createErrorResponse("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
            }

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            response.put("user", userInfo);
            response.put("sessionId", session.getId());
            response.put("debugAuth", SecurityContextHolder.getContext().getAuthentication() != null ?
                    SecurityContextHolder.getContext().getAuthentication().getName() : "null");

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –õ–û–ì–ò–ù–ï ===");
            log.error("‚ùå Message: {}", e.getMessage());
            log.error("‚ùå Class: {}", e.getClass().getName());
            log.error("‚ùå Stack trace: ", e);

            return createErrorResponse("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private ResponseEntity<Map<String, Object>> createErrorResponse(String message, HttpStatus status) {
        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("success", false);
        errorResponse.put("message", message);
        errorResponse.put("timestamp", java.time.LocalDateTime.now());
        return ResponseEntity.status(status).body(errorResponse);
    }

    private Map<String, Object> createUserInfo(User user) {
        Map<String, Object> userInfo = new HashMap<>();
        userInfo.put("id", user.getId());
        userInfo.put("email", user.getEmail());
        userInfo.put("firstName", user.getFirstName());
        userInfo.put("lastName", user.getLastName());
        userInfo.put("role", user.getRole().name());
        userInfo.put("imageUrl", user.getImageUrl());
        userInfo.put("isPrivateProfile", user.getIsPrivateProfile());
        userInfo.put("followersCount", user.getFollowersCount());
        userInfo.put("followingCount", user.getFollowingCount());

        return userInfo;
    }
//    @PostMapping("/login")
//    public ResponseEntity<Map<String, Object>> login(@Valid @RequestBody LoginRequest request,
//                                                     HttpServletRequest httpRequest) {
//        try {
//            log.debug("–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", request.getEmail());
//
//            Optional<User> userOpt = authenticationService.authenticate(request.getEmail(), request.getPassword());
//
//            if (userOpt.isEmpty()) {
//                Map<String, Object> errorResponse = new HashMap<>();
//                errorResponse.put("success", false);
//                errorResponse.put("message", "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
//                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
//            }
//
//            User user = userOpt.get();
//            UserDetails userDetails = authenticationService.loadUserByUsername(user.getEmail());
//            Authentication authentication = new UsernamePasswordAuthenticationToken(
//                    userDetails, null, userDetails.getAuthorities());
//
//            // –û—Ç–ª–∞–¥–∫–∞ - –î–û —É—Å—Ç–∞–Ω–æ–≤–∫–∏
//            log.info("=== –î–û —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Authentication ===");
//            log.info("Current SecurityContext: {}", SecurityContextHolder.getContext().getAuthentication());
//
//            SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
//            securityContext.setAuthentication(authentication);
//            SecurityContextHolder.setContext(securityContext);
//
//            HttpSession session = httpRequest.getSession(true);
//            session.setAttribute("SPRING_SECURITY_CONTEXT", securityContext);
//
//            // –û—Ç–ª–∞–¥–∫–∞ - –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏
//            log.info("=== –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Authentication ===");
//            log.info("New SecurityContext: {}", SecurityContextHolder.getContext().getAuthentication());
//            log.info("Session ID: {}", session.getId());
//            log.info("Session attribute: {}", session.getAttribute("SPRING_SECURITY_CONTEXT"));
//
//            Map<String, Object> response = new HashMap<>();
//            response.put("success", true);
//            response.put("message", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
//            response.put("user", createUserInfo(user));
//            response.put("sessionId", session.getId());
//            response.put("debugAuth", SecurityContextHolder.getContext().getAuthentication() != null ?
//                    SecurityContextHolder.getContext().getAuthentication().getName() : "null");
//
//            return ResponseEntity.ok(response);
//
//        } catch (Exception e) {
//            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {}", e.getMessage(), e);
//            Map<String, Object> errorResponse = new HashMap<>();
//            errorResponse.put("success", false);
//            errorResponse.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
//        }
//    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    @PostMapping("/logout")
    public ResponseEntity<Map<String, Object>> logout() {
        try {
            // –û—á–∏—â–∞–µ–º SecurityContext
            SecurityContextHolder.clearContext();

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");

            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {}", e.getMessage(), e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    @GetMapping("/status")
    public ResponseEntity<Map<String, Object>> getAuthStatus(Authentication authentication) {
        Map<String, Object> response = new HashMap<>();

        if (authentication != null && authentication.isAuthenticated() &&
                !"anonymousUser".equals(authentication.getName())) {

            response.put("authenticated", true);
            response.put("username", authentication.getName());
            response.put("authorities", authentication.getAuthorities());

        } else {
            response.put("authenticated", false);
            response.put("username", null);
            response.put("authorities", null);
        }

        return ResponseEntity.ok(response);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
     */
    @GetMapping("/validate")
    public ResponseEntity<Map<String, Object>> validateSession(Authentication authentication) {
        try {
            if (authentication == null || !authentication.isAuthenticated()) {
                Map<String, Object> response = new HashMap<>();
                response.put("valid", false);
                response.put("message", "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            Map<String, Object> response = new HashMap<>();
            response.put("valid", true);
            response.put("message", "–°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞");
            response.put("username", authentication.getName());

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {}", e.getMessage(), e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("valid", false);
            errorResponse.put("message", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
    @GetMapping("/test-auth")
    public ResponseEntity<Map<String, Object>> testAuth(Authentication authentication,
                                                        HttpServletRequest request) {

        log.info("=== TEST-AUTH –æ—Ç–ª–∞–¥–∫–∞ ===");
        log.info("Authentication parameter: {}", authentication);
        log.info("SecurityContext: {}", SecurityContextHolder.getContext().getAuthentication());
        log.info("Session ID: {}", request.getSession().getId());
        log.info("Session attribute: {}", request.getSession().getAttribute("SPRING_SECURITY_CONTEXT"));

        Map<String, Object> response = new HashMap<>();
        response.put("authentication", authentication != null ? authentication.getName() : "null");
        response.put("sessionId", request.getSession().getId());
        response.put("authenticated", authentication != null && authentication.isAuthenticated());
        response.put("securityContext", SecurityContextHolder.getContext().getAuthentication() != null ?
                SecurityContextHolder.getContext().getAuthentication().getName() : "null");

        return ResponseEntity.ok(response);
    }

    // –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π endpoint
    @GetMapping("/test-db")
    public ResponseEntity<?> testDb() {
        try {
            long count = userRepository.count();
            return ResponseEntity.ok(Map.of("userCount", count));
        } catch (Exception e) {
            return ResponseEntity.status(500).body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * DTO –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Ö–æ–¥–∞
     */
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class LoginRequest {

        @NotBlank(message = "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        @Email(message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
        private String email;

        @NotBlank(message = "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        @Size(min = 1, message = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
        private String password;
    }
}
