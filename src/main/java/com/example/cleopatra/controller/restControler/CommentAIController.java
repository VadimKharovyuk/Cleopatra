package com.example.cleopatra.controller.restControler;

import com.example.cleopatra.dto.AICommentResponse;
import com.example.cleopatra.dto.Comment.CommentResponse;
import com.example.cleopatra.dto.CreateCommentWithAIRequest;
import com.example.cleopatra.dto.ImproveCommentRequest;
import com.example.cleopatra.service.CommentService;
import com.example.cleopatra.service.CommentAIService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.HashMap;

@Slf4j
@RestController
@RequestMapping("/api/posts/{postId}/comments/ai")
@RequiredArgsConstructor
public class CommentAIController {

    private  final  CommentService commentService;
    private final  CommentAIService commentAIService;

    /**
     * ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é AI
     */
    @PostMapping("/create")
    public ResponseEntity<?> createCommentWithAI(
            @PathVariable Long postId,
            @Valid @RequestBody CreateCommentWithAIRequest request,
            Authentication authentication) {

        try {
            String userEmail = authentication.getName();
            log.info("–°–æ–∑–¥–∞–Ω–∏–µ AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", postId, userEmail);

            CommentResponse response = commentService.createCommentWithAI(postId, request, userEmail);

            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é AI",
                    "comment", response,
                    "aiGenerated", true
            ));

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {}", e.getMessage());
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", e.getMessage()
            ));
        }
    }

    /**
     * üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
     */
    @PostMapping("/preview")
    public ResponseEntity<?> generateCommentPreview(
            @PathVariable Long postId,
            @Valid @RequestBody CreateCommentWithAIRequest request) {

        try {
            log.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {}", postId);

            AICommentResponse response = commentService.generateCommentPreview(postId, request);

            if (response.isSuccess()) {
                return ResponseEntity.ok(Map.of(
                        "success", true,
                        "preview", true,
                        "data", response
                ));
            } else {
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "error", response.getErrorMessage(),
                        "preview", true
                ));
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: {}", e.getMessage());
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", e.getMessage(),
                    "preview", true
            ));
        }
    }

    /**
     * ‚ú® –£–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
     */
    @PostMapping("/improve")
    public ResponseEntity<?> improveComment(
            @PathVariable Long postId,
            @Valid @RequestBody ImproveCommentRequest request) {

        try {
            log.info("–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {}", postId);

            AICommentResponse response = commentService.improveComment(postId, request);

            return ResponseEntity.ok(Map.of(
                    "success", response.isSuccess(),
                    "data", response,
                    "improved", true
            ));

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {}", e.getMessage());
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", e.getMessage(),
                    "improved", false
            ));
        }
    }

    /**
     * ‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI —Å–µ—Ä–≤–∏—Å–∞
     */
    @GetMapping("/status")
    public ResponseEntity<?> getAIStatus() {
        Map<String, Object> status = new HashMap<>();

        boolean isAvailable = commentAIService.isAIServiceAvailable();

        status.put("aiServiceAvailable", isAvailable);
        status.put("status", isAvailable ? "ready" : "unavailable");
        status.put("message", isAvailable
                ? "AI —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
                : "AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        status.put("availableCommentTypes", Map.of(
                "GENERAL", "–û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "QUESTION", "–í–æ–ø—Ä–æ—Å –∫ –∞–≤—Ç–æ—Ä—É",
                "POSITIVE", "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞",
                "CONSTRUCTIVE", "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞",
                "TECHNICAL", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ",
                "CREATIVE", "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        ));

        status.put("availableImprovementTypes", Map.of(
                "GENERAL", "–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ",
                "GRAMMAR", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏",
                "TONE", "–£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ–Ω–∞",
                "CLARITY", "–ü–æ–≤—ã—à–µ–Ω–∏–µ —è—Å–Ω–æ—Å—Ç–∏",
                "POLITENESS", "–ü–æ–≤—ã—à–µ–Ω–∏–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏"
        ));

        return ResponseEntity.ok(status);
    }

    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
     */
    @GetMapping("/examples")
    public ResponseEntity<?> getPromptExamples() {
        Map<String, Object> examples = new HashMap<>();

        examples.put("general", Map.of(
                "prompt", "–≤—ã—Å–∫–∞–∂–∏ —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—å–µ",
                "description", "–û–±—â–∏–π –æ—Ç–∑—ã–≤ –æ –ø–æ—Å—Ç–µ"
        ));

        examples.put("question", Map.of(
                "prompt", "–∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä—É –æ –¥–µ—Ç–∞–ª—è—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
                "description", "–í–æ–ø—Ä–æ—Å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        ));

        examples.put("positive", Map.of(
                "prompt", "–Ω–∞–ø–∏—à–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                "description", "–ü–æ—Ö–≤–∞–ª–∞ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä—É"
        ));

        examples.put("constructive", Map.of(
                "prompt", "–ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É",
                "description", "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"
        ));

        examples.put("technical", Map.of(
                "prompt", "–æ–±—Å—É–¥–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ—à–µ–Ω–∏—è",
                "description", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"
        ));

        examples.put("creative", Map.of(
                "prompt", "–ø—Ä–µ–¥–ª–æ–∂–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–¥–µ–∏",
                "description", "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Ç–µ–º–µ"
        ));

        return ResponseEntity.ok(Map.of(
                "success", true,
                "examples", examples,
                "tips", Map.of(
                        "general", "–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ —Å–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö",
                        "length", "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: 10-100 —Å–∏–º–≤–æ–ª–æ–≤",
                        "context", "–£–ø–æ–º–∏–Ω–∞–π—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                )
        ));
    }

    /**
     * üéØ –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
     */
    @GetMapping("/templates")
    public ResponseEntity<?> getCommentTemplates() {
        Map<String, Object> templates = new HashMap<>();

        templates.put("agreement", Map.of(
                "prompt", "—Å–æ–≥–ª–∞—Å–∏—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –∏ –¥–æ–±–∞–≤—å —Å–≤–æ–π –æ–ø—ã—Ç",
                "example", "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞—à–µ–π —Ç–æ—á–∫–æ–π –∑—Ä–µ–Ω–∏—è! –£ –º–µ–Ω—è –±—ã–ª –ø–æ—Ö–æ–∂–∏–π –æ–ø—ã—Ç..."
        ));

        templates.put("disagreement", Map.of(
                "prompt", "–≤–µ–∂–ª–∏–≤–æ –≤—ã—Å–∫–∞–∂–∏ –¥—Ä—É–≥–æ–µ –º–Ω–µ–Ω–∏–µ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏",
                "example", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è, –Ω–æ —è –¥—É–º–∞—é –∏–Ω–∞—á–µ. –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –≤–∏–¥–µ–Ω–∏–µ–º..."
        ));

        templates.put("gratitude", Map.of(
                "prompt", "–ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                "example", "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ! –û—á–µ–Ω—å –ø–æ–º–æ–≥–ª–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ."
        ));

        templates.put("question", Map.of(
                "prompt", "–∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ",
                "example", "–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê –∫–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏...?"
        ));

        templates.put("experience", Map.of(
                "prompt", "–ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –ø–æ —Ç–µ–º–µ",
                "example", "–í –º–æ–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —è —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å –ø–æ—Ö–æ–∂–µ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π..."
        ));

        return ResponseEntity.ok(Map.of(
                "success", true,
                "templates", templates,
                "usage", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —à–∞–±–ª–æ–Ω—ã –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
        ));
    }
}