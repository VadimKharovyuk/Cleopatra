package com.example.cleopatra.model;

import com.example.cleopatra.enums.ApplicationStatus;
import com.example.cleopatra.enums.PerformerProfile;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.util.List;

@Entity
@Table(name = "job_applications", indexes = {
        @Index(name = "idx_profile", columnList = "profile"),
        @Index(name = "idx_country", columnList = "country"),
        @Index(name = "idx_status", columnList = "status"),
        @Index(name = "idx_created_at", columnList = "created_at"),
        @Index(name = "idx_salary_range", columnList = "min_salary, max_salary")
})
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class JobApplication {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    @NotBlank(message = "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    @Size(max = 50, message = "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(nullable = false, length = 50)
    private String name;

    @NotBlank(message = "–ü–æ–ª–Ω–æ–µ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    @Size(max = 100, message = "–ü–æ–ª–Ω–æ–µ –∏–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(name = "full_name", nullable = false, length = 100)
    private String fullName;

    @Size(max = 2000, message = "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(columnDefinition = "TEXT")
    private String bio;

    // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    @Enumerated(EnumType.STRING)
    @NotNull(message = "–ü—Ä–æ—Ñ–∏–ª—å –∞—Ä—Ç–∏—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    @Column(nullable = false, length = 30)
    private PerformerProfile profile;

    @NotNull(message = "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    @Min(value = 0, message = "–û–ø—ã—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
    @Max(value = 50, message = "–û–ø—ã—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 –ª–µ—Ç")
    @Column(name = "work_experience", nullable = false)
    private Integer workExperience; // –≤ –≥–æ–¥–∞—Ö

    // –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è
    @DecimalMin(value = "0.0", message = "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
    @Column(name = "min_salary", precision = 10, scale = 2)
    private BigDecimal minSalary;

    @DecimalMin(value = "0.0", message = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
    @Column(name = "max_salary", precision = 10, scale = 2)
    private BigDecimal maxSalary;

    @Size(max = 3, message = "–ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3 —Å–∏–º–≤–æ–ª–∞")
    @Column(length = 3)
    @Builder.Default
    private String currency = "USD";

    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    @NotBlank(message = "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    @Email(message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
    @Size(max = 100, message = "Email –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(nullable = false, length = 100)
    private String email;

    @Pattern(regexp = "^\\+?[1-9]\\d{1,14}$", message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    @Size(max = 20, message = "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(length = 20)
    private String phone;

    @Builder.Default
    @Column(name = "phone_visible")
    private Boolean phoneVisible = true; // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å/—Å–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω

    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    @Pattern(regexp = "^@?[A-Za-z0-9_.]+$", message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Instagram username")
    @Size(max = 50, message = "Instagram –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(length = 50)
    private String instagram;

    @Pattern(regexp = "^\\+?[1-9]\\d{1,14}$", message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä WhatsApp")
    @Size(max = 20, message = "WhatsApp –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(length = 20)
    private String whatsapp;

    @Size(max = 100, message = "Facebook –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(length = 100)
    private String facebook;

    // –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
    @Size(max = 500, message = "URL —Ñ–æ—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(name = "profile_picture_url", length = 500)
    private String profilePictureUrl;

    @Pattern(regexp = "^(https?://)?(www\\.)?(youtube\\.com/watch\\?v=|youtu\\.be/)[a-zA-Z0-9_-]+.*$",
            message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube")
    @Size(max = 500, message = "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(name = "video_url", length = 500)
    private String videoUrl;

    // –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    @NotBlank(message = "–°—Ç—Ä–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
    @Size(max = 50, message = "–°—Ç—Ä–∞–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(nullable = false, length = 50)
    private String country;

    @NotNull(message = "–í–æ–∑—Ä–∞—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    @Min(value = 16, message = "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 16 –ª–µ—Ç")
    @Max(value = 80, message = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 80 –ª–µ—Ç")
    @Column(nullable = false)
    private Integer age;

    @Column(name = "birth_date")
    private LocalDate birthDate;

    // –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    @Enumerated(EnumType.STRING)
    @Column(nullable = false, length = 20)
    @Builder.Default
    private ApplicationStatus status = ApplicationStatus.PENDING;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    @Size(max = 1000, message = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(name = "additional_skills", columnDefinition = "TEXT")
    private String additionalSkills;

    @Column(name = "available_from")
    private LocalDate availableFrom;

    @Builder.Default
    @Column(name = "willing_to_travel")
    private Boolean willingToTravel = true;

    @Size(max = 1000, message = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤")
    @Column(columnDefinition = "TEXT")
    private String comments;

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @Column(name = "reviewed_at")
    private LocalDateTime reviewedAt;

    @Column(name = "reviewed_by")
    private Long reviewedBy; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª –∑–∞—è–≤–∫—É

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

    public String getFullProfileName() {
        return profile != null ? profile.getDisplayNameWithIcon() : "–ù–µ —É–∫–∞–∑–∞–Ω";
    }

    public String getSalaryRange() {
        if (minSalary == null && maxSalary == null) {
            return "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
        }
        if (minSalary != null && maxSalary != null) {
            return String.format("%s - %s %s", minSalary, maxSalary, currency);
        }
        if (minSalary != null) {
            return String.format("–æ—Ç %s %s", minSalary, currency);
        }
        return String.format("–¥–æ %s %s", maxSalary, currency);
    }

    public String getContactInfo() {
        StringBuilder contacts = new StringBuilder();
        contacts.append("üìß ").append(email);

        if (phoneVisible && phone != null) {
            contacts.append(" | üì± ").append(phone);
        }

        if (instagram != null) {
            contacts.append(" | üì∑ @").append(instagram);
        }

        if (whatsapp != null) {
            contacts.append(" | üí¨ ").append(whatsapp);
        }

        return contacts.toString();
    }

    public boolean isReviewed() {
        return status != ApplicationStatus.PENDING;
    }

    public int getDaysFromSubmission() {
        return (int) java.time.Duration.between(createdAt, LocalDateTime.now()).toDays();
    }
}