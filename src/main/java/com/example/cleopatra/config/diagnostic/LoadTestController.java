package com.example.cleopatra.config.diagnostic;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
@RestController
@RequestMapping("/diagnostic/load-test")
@RequiredArgsConstructor
@Slf4j
public class LoadTestController {

    private final OptimizedSystemMonitor systemMonitor;
    private final RestTemplate restTemplate = new RestTemplate();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private final AtomicInteger successfulRequests = new AtomicInteger(0);
    private final AtomicInteger failedRequests = new AtomicInteger(0);
    private final AtomicLong totalResponseTime = new AtomicLong(0);
    private volatile boolean isTestRunning = false;

    /**
     * –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
     */
    @PostMapping("/profile/{userId}")
    public ResponseEntity<Map<String, Object>> startProfileLoadTest(
            @PathVariable Long userId,
            @RequestParam(defaultValue = "100") int requests,
            @RequestParam(defaultValue = "10") int concurrency,
            @RequestParam(defaultValue = "false") boolean resetStats) {

        if (isTestRunning) {
            return ResponseEntity.badRequest().body(Map.of(
                    "error", "–¢–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω",
                    "status", "running"
            ));
        }

        if (resetStats) {
            resetStatistics();
        }

        Map<String, Object> result = new HashMap<>();
        result.put("startTime", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        result.put("targetUrl", "/profile/" + userId);
        result.put("totalRequests", requests);
        result.put("concurrency", concurrency);

        // –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        CompletableFuture.runAsync(() -> performLoadTest(userId, requests, concurrency));

        result.put("status", "started");
        result.put("message", "–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω");

        return ResponseEntity.ok(result);
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç - –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    @PostMapping("/simple-test")
    public ResponseEntity<Map<String, Object>> runSimpleTest(
            @RequestParam(defaultValue = "http://localhost:8080/profile/4") String url,
            @RequestParam(defaultValue = "50") int requests) {

        log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞: {} –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ {}", requests, url);

        Map<String, Object> result = new HashMap<>();
        result.put("startTime", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

        long startTime = System.currentTimeMillis();
        int successful = 0;
        int failed = 0;
        long totalTime = 0;

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –î–û —Ç–µ—Å—Ç–∞
        Map<String, Object> systemBefore = systemMonitor.getSystemInfo();

        for (int i = 0; i < requests; i++) {
            try {
                long requestStart = System.currentTimeMillis();

                // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
                ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);

                long requestTime = System.currentTimeMillis() - requestStart;
                totalTime += requestTime;

                if (response.getStatusCode().is2xxSuccessful()) {
                    successful++;
                } else {
                    failed++;
                    log.warn("–ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {}", response.getStatusCode());
                }

                // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
                if ((i + 1) % 10 == 0) {
                    log.info("–í—ã–ø–æ–ª–Ω–µ–Ω–æ {}/{} –∑–∞–ø—Ä–æ—Å–æ–≤", i + 1, requests);
                }

            } catch (Exception e) {
                failed++;
                log.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ #{}: {}", i + 1, e.getMessage());
            }
        }

        long totalTestTime = System.currentTimeMillis() - startTime;

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ü–û–°–õ–ï —Ç–µ—Å—Ç–∞
        Map<String, Object> systemAfter = systemMonitor.getSystemInfo();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result.put("endTime", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        result.put("totalTestTime", totalTestTime + " –º—Å");
        result.put("successfulRequests", successful);
        result.put("failedRequests", failed);
        result.put("averageResponseTime", successful > 0 ? (totalTime / successful) + " –º—Å" : "N/A");
        result.put("requestsPerSecond", String.format("%.2f", (double) requests / (totalTestTime / 1000.0)));

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        result.put("systemBefore", systemBefore);
        result.put("systemAfter", systemAfter);

        log.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {}/{} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {} –º—Å",
                successful, requests, totalTestTime);

        return ResponseEntity.ok(result);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–∞
     */
    @GetMapping("/status")
    public ResponseEntity<Map<String, Object>> getTestStatus() {
        Map<String, Object> status = new HashMap<>();

        status.put("isRunning", isTestRunning);
        status.put("successfulRequests", successfulRequests.get());
        status.put("failedRequests", failedRequests.get());
        status.put("totalRequests", successfulRequests.get() + failedRequests.get());

        if (successfulRequests.get() > 0) {
            status.put("averageResponseTime",
                    totalResponseTime.get() / successfulRequests.get() + " –º—Å");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        status.put("currentSystemState", systemMonitor.getSystemInfo());
        status.put("timestamp", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

        return ResponseEntity.ok(status);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
     */
    @PostMapping("/stop")
    public ResponseEntity<Map<String, Object>> stopTest() {
        isTestRunning = false;

        Map<String, Object> result = new HashMap<>();
        result.put("message", "–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        result.put("finalStats", getTestStatus().getBody());

        return ResponseEntity.ok(result);
    }

    /**
     * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    @PostMapping("/reset")
    public ResponseEntity<Map<String, Object>> resetStatistics() {
        successfulRequests.set(0);
        failedRequests.set(0);
        totalResponseTime.set(0);

        return ResponseEntity.ok(Map.of(
                "message", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞",
                "timestamp", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
        ));
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
     */
    private void performLoadTest(Long userId, int requests, int concurrency) {
        isTestRunning = true;
        String url = "https://cleopatra-brcc.onrender.com/profile/" + userId;

        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: {} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é {}", requests, concurrency);

        ExecutorService executor = Executors.newFixedThreadPool(concurrency);

        try {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            for (int i = 0; i < requests; i++) {
                final int requestNumber = i + 1;

                executor.submit(() -> {
                    if (!isTestRunning) {
                        return; // –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    }

                    try {
                        long startTime = System.currentTimeMillis();

                        ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);

                        long responseTime = System.currentTimeMillis() - startTime;
                        totalResponseTime.addAndGet(responseTime);

                        if (response.getStatusCode().is2xxSuccessful()) {
                            successfulRequests.incrementAndGet();
                        } else {
                            failedRequests.incrementAndGet();
                            log.warn("–ó–∞–ø—Ä–æ—Å #{} –Ω–µ—É—Å–ø–µ—à–µ–Ω: {}", requestNumber, response.getStatusCode());
                        }

                        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        if (requestNumber % 50 == 0) {
                            log.info("–í—ã–ø–æ–ª–Ω–µ–Ω–æ {} –∑–∞–ø—Ä–æ—Å–æ–≤", requestNumber);
                        }

                    } catch (Exception e) {
                        failedRequests.incrementAndGet();
                        log.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ #{}: {}", requestNumber, e.getMessage());
                    }
                });
            }

        } finally {
            executor.shutdown();
            isTestRunning = false;
            log.info("‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
     */
    @GetMapping("/system-snapshot")
    public ResponseEntity<Map<String, Object>> getSystemSnapshot() {
        Map<String, Object> snapshot = new HashMap<>();

        // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        snapshot.put("system", systemMonitor.getSystemInfo());

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞
        snapshot.put("testStats", Map.of(
                "isRunning", isTestRunning,
                "successful", successfulRequests.get(),
                "failed", failedRequests.get(),
                "total", successfulRequests.get() + failedRequests.get()
        ));

        // –í—Ä–µ–º—è —Å–Ω–∏–º–∫–∞
        snapshot.put("timestamp", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

        return ResponseEntity.ok(snapshot);
    }
}