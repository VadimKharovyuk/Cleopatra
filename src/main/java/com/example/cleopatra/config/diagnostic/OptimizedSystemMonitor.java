package com.example.cleopatra.config.diagnostic;

import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPoolMXBean;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.lang.management.GarbageCollectorMXBean;
import java.lang.management.ManagementFactory;
import java.lang.management.MemoryMXBean;
import java.lang.management.MemoryUsage;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã - –¢–û–õ–¨–ö–û —à–µ–¥—É–ª–µ—Ä—ã
 * –û—Ç–¥–µ–ª–µ–Ω –æ—Ç REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
 */
@Component
@Slf4j
public class OptimizedSystemMonitor {

    @Autowired
    private DataSource dataSource;

    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    private static final Runtime runtime = Runtime.getRuntime();
    private static final MemoryMXBean memoryBean = ManagementFactory.getMemoryMXBean();

    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    private final AtomicLong monitoringCycles = new AtomicLong(0);
    private long startTime = System.currentTimeMillis();

    @PostConstruct
    public void logStartupInfo() {
        log.info("=== Cleopatra System Monitor Started ===");
        log.info("Max Memory: {} MB", runtime.maxMemory() / 1024 / 1024);
        log.info("Initial Memory: {} MB", runtime.totalMemory() / 1024 / 1024);
        log.info("Available processors: {}", runtime.availableProcessors());

        // –õ–æ–≥–∏—Ä—É–µ–º GC —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        List<GarbageCollectorMXBean> gcBeans = ManagementFactory.getGarbageCollectorMXBeans();
        gcBeans.forEach(gc -> log.info("GC: {}", gc.getName()));

        startTime = System.currentTimeMillis();
        log.info("=== Monitor initialization completed ===");
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
     * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–∞–º—è—Ç—å + DB pool + –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     */
    @Scheduled(fixedRate = 120000) // –ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    public void performComprehensiveMonitoring() {
        try {
            long cycle = monitoringCycles.incrementAndGet();

            // –ü–∞–º—è—Ç—å
            MemoryStats memory = getMemoryStats();

            // Database Pool
            PoolStats pool = getDatabasePoolStats();

            // –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            log.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{} - –ü–∞–º—è—Ç—å: {}/{} –ú–ë ({}%), –ë–î –ø—É–ª: {}/{}, –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {} –º–∏–Ω",
                    cycle,
                    memory.usedMB, memory.totalMB, memory.usagePercent,
                    pool.active, pool.total,
                    (System.currentTimeMillis() - startTime) / 60000);

            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
            if (memory.usagePercent > 85 || pool.active >= pool.total) {
                log.warn("üö® –í–´–°–û–ö–ê–Ø –ù–ê–ì–†–£–ó–ö–ê - Heap: {} –ú–ë, Non-Heap: {} –ú–ë, –ë–î –æ–∂–∏–¥–∞–µ—Ç: {}",
                        memory.heapUsedMB, memory.nonHeapUsedMB, pool.waiting);

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
                if (memory.usagePercent > 90) {
                    System.gc();
                    log.info("üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏");
                }
            } else if (memory.usagePercent > 75) {
                log.info("‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {}% –æ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π", memory.usagePercent);
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if (pool.waiting > 0) {
                log.warn("‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {} –ø–æ—Ç–æ–∫–æ–≤ –æ–∂–∏–¥–∞—é—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", pool.waiting);
            }

            // –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö
            if (memory.usagePercent < 60 && pool.active == 0) {
                log.debug("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ - –ø–∞–º—è—Ç—å: {}%, –ë–î –ø—É–ª —Å–≤–æ–±–æ–¥–µ–Ω",
                        memory.usagePercent);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã: {}", e.getMessage());
        }
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     * –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç
    public void performQuickHealthCheck() {
        try {
            long usedMB = (runtime.totalMemory() - runtime.freeMemory()) / 1024 / 1024;
            double usagePercent = (double) usedMB / (runtime.totalMemory() / 1024 / 1024) * 100;

            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
            if (usagePercent > 75) {
                log.warn("Memory check - {} MB used ({}% of allocated)", usedMB, String.format("%.1f", usagePercent));
            }

        } catch (Exception e) {
            log.error("Quick health check error: {}", e.getMessage());
        }
    }


    public Map<String, Object> getMemoryInfo() {
        Map<String, Object> result = new HashMap<>(8);

        try {
            long maxMB = runtime.maxMemory() / 1024 / 1024;
            long totalMB = runtime.totalMemory() / 1024 / 1024;
            long freeMB = runtime.freeMemory() / 1024 / 1024;
            long usedMB = totalMB - freeMB;

            // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
            result.put("–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è–ü–∞–º—è—Ç—å", maxMB + " –ú–ë");
            result.put("–≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è–ü–∞–º—è—Ç—å", totalMB + " –ú–ë");
            result.put("–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è–ü–∞–º—è—Ç—å", usedMB + " –ú–ë");
            result.put("—Å–≤–æ–±–æ–¥–Ω–∞—è–ü–∞–º—è—Ç—å", freeMB + " –ú–ë");
            result.put("–ø—Ä–æ—Ü–µ–Ω—Ç–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", String.format("%.1f%%", (double) usedMB / totalMB * 100));

            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è JVM
            MemoryUsage heap = memoryBean.getHeapMemoryUsage();
            MemoryUsage nonHeap = memoryBean.getNonHeapMemoryUsage();
            result.put("heap–ü–∞–º—è—Ç—å", heap.getUsed() / 1024 / 1024 + " –ú–ë");
            result.put("nonHeap–ü–∞–º—è—Ç—å", nonHeap.getUsed() / 1024 / 1024 + " –ú–ë");

            // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            result.put("–≤—Ä–µ–º—è–†–∞–±–æ—Ç—ã–ú–∏–Ω—É—Ç—ã", (System.currentTimeMillis() - startTime) / 60000);

            // –î–æ–±–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            double usagePercent = (double) usedMB / totalMB * 100;
            String status;
            if (usagePercent > 90) {
                status = "üî• –ö—Ä–∏—Ç–∏—á–Ω–æ";
            } else if (usagePercent > 80) {
                status = "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞";
            } else if (usagePercent > 60) {
                status = "üìà –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞";
            } else {
                status = "‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ";
            }
            result.put("—Å—Ç–∞—Ç—É—Å–°–∏—Å—Ç–µ–º—ã", status);

        } catch (Exception e) {
            result.put("–æ—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏: " + e.getMessage());
        }

        return result;
    }

//    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
//    public Map<String, Object> getMemoryInfo() {
//        Map<String, Object> result = new HashMap<>(8);
//
//        try {
//            long maxMB = runtime.maxMemory() / 1024 / 1024;
//            long totalMB = runtime.totalMemory() / 1024 / 1024;
//            long freeMB = runtime.freeMemory() / 1024 / 1024;
//            long usedMB = totalMB - freeMB;
//
//            result.put("maxMemory", maxMB + " MB");
//            result.put("totalMemory", totalMB + " MB");
//            result.put("usedMemory", usedMB + " MB");
//            result.put("freeMemory", freeMB + " MB");
//            result.put("usagePercent", String.format("%.1f%%", (double) usedMB / totalMB * 100));
//
//            MemoryUsage heap = memoryBean.getHeapMemoryUsage();
//            MemoryUsage nonHeap = memoryBean.getNonHeapMemoryUsage();
//            result.put("heapUsed", heap.getUsed() / 1024 / 1024 + " MB");
//            result.put("nonHeapUsed", nonHeap.getUsed() / 1024 / 1024 + " MB");
//
//            result.put("uptimeMinutes", (System.currentTimeMillis() - startTime) / 60000);
//
//        } catch (Exception e) {
//            result.put("error", "Cannot retrieve memory info: " + e.getMessage());
//        }
//
//        return result;
//    }

    public Map<String, Object> getSystemInfo() {
        Map<String, Object> result = new HashMap<>();

        // Memory
        result.put("memory", getMemoryInfo());

        // Database Pool
        if (dataSource instanceof HikariDataSource) {
            HikariPoolMXBean pool = ((HikariDataSource) dataSource).getHikariPoolMXBean();
            Map<String, Object> poolInfo = new HashMap<>();
            poolInfo.put("active", pool.getActiveConnections());
            poolInfo.put("idle", pool.getIdleConnections());
            poolInfo.put("total", pool.getTotalConnections());
            poolInfo.put("waiting", pool.getThreadsAwaitingConnection());
            result.put("databasePool", poolInfo);
        }

        // System
        Map<String, Object> systemInfo = new HashMap<>();
        systemInfo.put("processors", runtime.availableProcessors());
        systemInfo.put("monitoringCycles", monitoringCycles.get());
        systemInfo.put("uptimeMinutes", (System.currentTimeMillis() - startTime) / 60000);
        result.put("system", systemInfo);

        return result;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private MemoryStats getMemoryStats() {
        long totalMB = runtime.totalMemory() / 1024 / 1024;
        long freeMB = runtime.freeMemory() / 1024 / 1024;
        long usedMB = totalMB - freeMB;

        MemoryUsage heap = memoryBean.getHeapMemoryUsage();
        MemoryUsage nonHeap = memoryBean.getNonHeapMemoryUsage();

        return new MemoryStats(
                usedMB, totalMB,
                heap.getUsed() / 1024 / 1024,
                nonHeap.getUsed() / 1024 / 1024,
                (int) ((double) usedMB / totalMB * 100)
        );
    }

    private PoolStats getDatabasePoolStats() {
        if (dataSource instanceof HikariDataSource) {
            HikariPoolMXBean pool = ((HikariDataSource) dataSource).getHikariPoolMXBean();
            return new PoolStats(
                    pool.getActiveConnections(),
                    pool.getTotalConnections(),
                    pool.getThreadsAwaitingConnection()
            );
        }
        return new PoolStats(0, 0, 0);
    }

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    private static class MemoryStats {
        final long usedMB, totalMB, heapUsedMB, nonHeapUsedMB;
        final int usagePercent;

        MemoryStats(long usedMB, long totalMB, long heapUsedMB, long nonHeapUsedMB, int usagePercent) {
            this.usedMB = usedMB;
            this.totalMB = totalMB;
            this.heapUsedMB = heapUsedMB;
            this.nonHeapUsedMB = nonHeapUsedMB;
            this.usagePercent = usagePercent;
        }
    }

    private static class PoolStats {
        final int active, total, waiting;

        PoolStats(int active, int total, int waiting) {
            this.active = active;
            this.total = total;
            this.waiting = waiting;
        }
    }
}