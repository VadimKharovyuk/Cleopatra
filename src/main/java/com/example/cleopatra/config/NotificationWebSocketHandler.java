package com.example.cleopatra.config;

import com.example.cleopatra.dto.Notification.NotificationDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.*;

import java.io.IOException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;

@Component
@RequiredArgsConstructor
@Slf4j
public class NotificationWebSocketHandler implements WebSocketHandler {

    private final ObjectMapper objectMapper;

    // –û—Ç–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private final Map<Long, WebSocketSession> notificationSessions = new ConcurrentHashMap<>();

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        log.info("üîî Notification WebSocket connection established: {}", session.getId());

        // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        Long userId = getUserIdFromSession(session);

        if (userId != null) {
            notificationSessions.put(userId, session);
            session.getAttributes().put("userId", userId);
            log.info("üë§ User {} connected to notifications WebSocket", userId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            sendMessage(session, Map.of(
                    "type", "connected",
                    "message", "Connected to notifications"
            ));
        } else {
            log.warn("‚ö†Ô∏è No user ID found, closing connection");
            session.close();
        }
    }

    @Override
    public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {
        // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–∞ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        log.debug("üì® Received notification message: {}", message.getPayload());
    }

    @Override
    public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {
        log.error("‚ùå Notification WebSocket error for session {}: {}",
                session.getId(), exception.getMessage());
        removeUserSession(session);
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception {
        Long userId = (Long) session.getAttributes().get("userId");
        if (userId != null) {
            notificationSessions.remove(userId);
            log.info("üîî User {} disconnected from notifications WebSocket", userId);
        }
    }

    @Override
    public boolean supportsPartialMessages() {
        return false;
    }

    // ===================== –ú–ï–¢–û–î–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====================

    /**
     * üöÄ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @return true –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, false –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
     */
    public boolean sendNotificationToUser(Long userId, NotificationDto notification) {
        log.debug("üì§ Attempting to send notification to user {}: {}", userId, notification.getTitle());

        WebSocketSession session = notificationSessions.get(userId);

        if (session != null && session.isOpen()) {
            try {
                Map<String, Object> message = Map.of(
                        "type", "new_notification",
                        "notification", notification
                );

                sendMessage(session, message);
                log.info("‚úÖ Notification sent to user {}: {}", userId, notification.getTitle());
                return true; // üîß –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

            } catch (Exception e) {
                log.error("‚ùå Error sending notification to user {}", userId, e);
                notificationSessions.remove(userId);
                return false; // üîß –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        } else {
            log.debug("üîï User {} not connected to notifications WebSocket", userId);
            return false; // üîß –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        }
    }


    private Long getUserIdFromSession(WebSocketSession session) {
        try {
            String query = session.getUri().getQuery();
            if (query != null && query.contains("userId=")) {
                String userIdStr = query.split("userId=")[1].split("&")[0];
                return Long.parseLong(userIdStr);
            }
        } catch (Exception e) {
            log.error("‚ùå Error extracting user ID", e);
        }
        return null;
    }

    private void sendMessage(WebSocketSession session, Object message) throws IOException {
        if (session.isOpen()) {
            String json = objectMapper.writeValueAsString(message);
            session.sendMessage(new TextMessage(json));
            log.debug("üì® Message sent: {}", json);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
     */
    public boolean isUserConnected(Long userId) {
        WebSocketSession session = notificationSessions.get(userId);
        return session != null && session.isOpen();
    }

    // ===================== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ =====================



    private void removeUserSession(WebSocketSession session) {
        Long userId = (Long) session.getAttributes().get("userId");
        if (userId != null) {
            notificationSessions.remove(userId);
        }
    }
}